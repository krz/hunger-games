{"version":3,"file":"static/js/97.1899b77a.chunk.js","mappings":"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","sources":["hooks/useUrlParams.js","pages/insights/FilterInsights.jsx","pages/insights/InsightsGrid.jsx","pages/insights/index.jsx","robotoff.ts","utils.js"],"sourcesContent":["import * as React from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nexport const setUrlParams = (parameters, defaultParameters) => {\n  const newRelativePathQuery = `${\n    window.location.pathname\n  }?${convertObjectParamsToUrlParams(parameters, defaultParameters)}`;\n  window.history.pushState(null, \"\", newRelativePathQuery);\n};\n\nexport const getDefaultizedUrlParams = (defaultParameters, synonyms = {}) => {\n  const parameters = { ...defaultParameters };\n  const urlParams = new URLSearchParams(window.location.search);\n  Object.keys(defaultParameters).forEach((key) => {\n    const value = urlParams.get(key);\n    if (value !== null && JSON.stringify(defaultParameters[key]) !== value) {\n      if (value === \"true\" || value === \"false\") {\n        parameters[key] = JSON.parse(value);\n      } else {\n        parameters[key] = value;\n      }\n    }\n  });\n\n  Object.entries(synonyms).forEach(([valueKey, synonymKeys]) => {\n    const toTest =\n      typeof synonymKeys === \"string\" ? [synonymKeys] : synonymKeys;\n    toTest.forEach((synonymKey) => {\n      const value = urlParams.get(synonymKey);\n      if (\n        value !== null &&\n        JSON.stringify(defaultParameters[valueKey]) !== value\n      ) {\n        if (value === \"true\" || value === \"false\") {\n          parameters[valueKey] = JSON.parse(value);\n        } else {\n          parameters[valueKey] = value;\n        }\n      }\n    });\n  });\n\n  return parameters;\n};\n\nexport const convertObjectParamsToUrlParams = (\n  parameters,\n  defaultParameters\n) => {\n  const urlParams = new URLSearchParams(window.location.search);\n\n  Object.keys(parameters).forEach((key) => {\n    if (JSON.stringify(parameters[key]) !== urlParams.get(key)) {\n      urlParams.set(key, parameters[key]);\n    }\n  });\n\n  if (defaultParameters !== undefined) {\n    Object.keys(defaultParameters).forEach((key) => {\n      if (\n        urlParams.get(key) !== null &&\n        defaultParameters[key] === parameters[key]\n      ) {\n        // Already in default. We can remove it\n        urlParams.delete(key);\n      }\n    });\n  }\n\n  return urlParams.toString();\n};\n\n/**\n * Hook that works as useState to keep in sync with URL query params\n * @param {object} defaultParams The object to get from the URL\n * @param {object} synonyms The synonmys under the form { valueKeyA: ['synonymA1', 'synsonymA2'], valueKeyB: 'synsonlymB1' }.\n * If the urls containg a paramter named `synonymA1` it will be used to override valueKeyA value.\n * @returns [state, setState]\n */\nconst useUrlParams = (defaultParams, synonyms) => {\n  const [parameters, setParameters] = React.useState(() =>\n    getDefaultizedUrlParams(defaultParams)\n  );\n  const { search } = useLocation();\n\n  React.useEffect(() => {\n    setParameters((prevParams) => {\n      const newParams = getDefaultizedUrlParams(defaultParams, synonyms);\n\n      const shouldUpdate = Object.keys(defaultParams).some(\n        (key) => newParams[key] !== prevParams[key]\n      );\n      return shouldUpdate ? newParams : prevParams;\n    });\n  }, [search, defaultParams, synonyms]);\n\n  const updateParameters = React.useCallback(\n    (modifier) => {\n      let newParams;\n      if (typeof modifier === \"function\") {\n        newParams = modifier(parameters);\n      } else {\n        newParams = modifier;\n      }\n      setParameters(newParams);\n      setUrlParams(newParams, defaultParams);\n    },\n    [parameters, defaultParams]\n  );\n  return [parameters, updateParameters];\n};\n\nexport default useUrlParams;\n","import * as React from \"react\";\n\nimport { Stack, Button, TextField, MenuItem } from \"@mui/material\";\nimport { useTranslation } from \"react-i18next\";\n\nconst typeOptions = [\n  { value: \"\", labelKey: \"insights.all\" },\n  { value: \"label\", labelKey: \"insights.label\" },\n  { value: \"product_weight\", labelKey: \"insights.product_weight\" },\n  { value: \"category\", labelKey: \"insights.category\" },\n  { value: \"expiration_date\", labelKey: \"insights.expiration_date\" },\n  { value: \"packager_code\", labelKey: \"insights.packager_code\" },\n  { value: \"brand\", labelKey: \"logos.brand\" },\n  { value: \"packaging\", labelKey: \"logos.packaging\" },\n  { value: \"qr_code\", labelKey: \"logos.qr_code\" },\n];\n\nconst annotationOptions = [\n  { value: \"\", labelKey: \"insights.all\" },\n  { value: \"-1\", labelKey: \"insights.skipped\" },\n  { value: \"0\", labelKey: \"insights.rejected\" },\n  { value: \"1\", labelKey: \"insights.accepted\" },\n  { value: \"not_annotated\", labelKey: \"insights.not_annotated\" },\n];\n\nconst useControled = (exteriorValue) => {\n  const [innerValue, setInnerValue] = React.useState(exteriorValue ?? \"\");\n\n  React.useEffect(() => {\n    setInnerValue((v) => (v !== exteriorValue ? exteriorValue : v));\n  }, [exteriorValue]);\n\n  return [innerValue, setInnerValue];\n};\n\nconst FilterForm = ({ filterState = {}, setFilterState }) => {\n  const { t } = useTranslation();\n\n  const [innerBarcode, setInnerBarcode] = useControled(\n    filterState.barcode ?? \"\"\n  );\n  const [innerValueTag, setInnerValueTag] = useControled(\n    filterState.valueTag ?? \"\"\n  );\n  const [innerInsightType, setInnerInsightType] = useControled(\n    filterState.insightType ?? \"\"\n  );\n  const [innerAnnotationStatus, setInnerAnnotationStatus] = useControled(\n    filterState.annotationStatus ?? \"\"\n  );\n\n  const validateFilter = React.useCallback(() => {\n    setFilterState({\n      barcode: innerBarcode,\n      valueTag: innerValueTag,\n      insightType: innerInsightType,\n      annotationStatus: innerAnnotationStatus,\n    });\n  }, [\n    innerBarcode,\n    innerValueTag,\n    innerInsightType,\n    innerAnnotationStatus,\n    setFilterState,\n  ]);\n\n  return (\n    <Stack direction=\"column\" spacing={2} sx={{ padding: 2 }}>\n      <Stack direction=\"row\" spacing={2}>\n        <TextField\n          fullWidth\n          label={t(\"insights.barcode\")}\n          placeholder={t(\"insights.barcode_placeholder\")}\n          value={innerBarcode}\n          onChange={(event) => setInnerBarcode(event.target.value)}\n        />\n        <TextField\n          fullWidth\n          label={t(\"insights.value_tag\")}\n          placeholder={t(\"insights.value_placeholder\")}\n          value={innerValueTag}\n          onChange={(event) => setInnerValueTag(event.target.value)}\n        />\n      </Stack>\n      <Stack direction=\"row\" spacing={2}>\n        <TextField\n          fullWidth\n          label={t(\"insights.type\")}\n          value={innerInsightType}\n          onChange={(event) => setInnerInsightType(event.target.value)}\n          select\n        >\n          {typeOptions.map(({ value, labelKey }) => (\n            <MenuItem key={value} value={value}>\n              {t(labelKey)}\n            </MenuItem>\n          ))}\n        </TextField>\n        <TextField\n          fullWidth\n          label={t(\"insights.annotated\")}\n          value={innerAnnotationStatus}\n          onChange={(event) => setInnerAnnotationStatus(event.target.value)}\n          select\n        >\n          {annotationOptions.map(({ value, labelKey }) => (\n            <MenuItem key={value} value={value}>\n              {t(labelKey)}\n            </MenuItem>\n          ))}\n        </TextField>\n      </Stack>\n\n      <Stack direction=\"row\" justifyContent=\"end\">\n        <Button variant=\"contained\" onClick={validateFilter} sx={{ ml: 2 }}>\n          {t(\"insights.search\")}\n        </Button>\n      </Stack>\n    </Stack>\n  );\n};\n\nexport default FilterForm;\n","import * as React from \"react\";\n\nimport { DataGrid, GridToolbar, GridActionsCellItem } from \"@mui/x-data-grid\";\n\nimport EditIcon from \"@mui/icons-material/Edit\";\nimport VisibilityIcon from \"@mui/icons-material/Visibility\";\n\nimport CheckCircleOutlineIcon from \"@mui/icons-material/CheckCircleOutline\";\nimport CancelOutlinedIcon from \"@mui/icons-material/CancelOutlined\";\nimport QuestionMarkOutlinedIcon from \"@mui/icons-material/QuestionMarkOutlined\";\nimport FaceIcon from \"@mui/icons-material/Face\";\nimport SmartToyIcon from \"@mui/icons-material/SmartToy\";\n\nimport Tooltip from \"@mui/material/Tooltip\";\nimport Link from \"@mui/material/Link\";\n\nimport robotoffService from \"../../robotoff\";\nimport offService from \"../../off\";\nimport { useTranslation } from \"react-i18next\";\nimport { Typography } from \"@mui/material\";\n\nconst RenderLink = (props) => {\n  const { value, ...other } = props;\n  return (\n    <Link component=\"button\" {...other}>\n      {props.value}\n    </Link>\n  );\n};\n\nconst getProductUrl = (code) => {\n  if (!code) {\n    return \"\";\n  }\n  return offService.getProductUrl(code);\n};\nconst getProductEditUrl = (code) => {\n  if (!code) {\n    return \"\";\n  }\n  return offService.getProductEditUrl(code);\n};\nconst getQuestionUrl = (type, value_tag) => {\n  if (\n    !value_tag ||\n    ![\"category\", \"brand\", \"product_weight\", \"label\"].includes(type)\n  ) {\n    return \"\";\n  }\n  return `/questions?type=${type}&value_tag=${value_tag}`;\n};\n\nconst typeKeyToTranslationKey = {\n  \"\": \"insights.all\",\n  product_weight: \"insights.product_weight\",\n  label: \"insights.label\",\n  category: \"insights.category\",\n  expiration_date: \"insights.expiration_date\",\n  packager_code: \"insights.packager_code\",\n  brand: \"logos.brand\",\n  packaging: \"logos.packaging\",\n  qr_code: \"logos.qr_code\",\n};\n\nconst annotationValueToTranslationKey = {\n  \"\": \"insights.all\",\n  \"-1\": \"insights.skipped\",\n  0: \"insights.rejected\",\n  1: \"insights.accepted\",\n  not_annotated: \"insights.not_annotated\",\n};\n\nconst TypeCell = ({ value }) => {\n  const { t } = useTranslation();\n  const text = typeKeyToTranslationKey[value ?? \"\"]\n    ? t(typeKeyToTranslationKey[value ?? \"\"])\n    : value;\n\n  return <Typography>{text}</Typography>;\n};\nconst AnnotationStateCell = ({ value }) => {\n  const { t } = useTranslation();\n  const text = t(annotationValueToTranslationKey[value ?? \"\"]);\n\n  switch (value) {\n    case 1:\n      return (\n        <Tooltip title={text}>\n          <CheckCircleOutlineIcon color=\"success\" />\n        </Tooltip>\n      );\n    case 0:\n      return (\n        <Tooltip title={text}>\n          <CancelOutlinedIcon color=\"error\" />\n        </Tooltip>\n      );\n    case -1:\n      return (\n        <Tooltip title={text}>\n          <QuestionMarkOutlinedIcon color=\"warning\" />\n        </Tooltip>\n      );\n    default:\n      return null;\n  }\n};\n\nconst dateTimeColumn = {\n  type: \"dateTime\",\n  minWidth: 150,\n  maxWidth: 200,\n  flex: 1,\n  valueGetter: (params) => (params.value ? new Date(params.value) : null),\n};\n\nconst PAGE_SIZE = 25;\n\nconst InsightGrid = ({ filterState = {}, setFilterState }) => {\n  const { t } = useTranslation();\n\n  const [pageState, setPageState] = React.useState({ page: 1, rowCount: 0 });\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [rows, setRows] = React.useState([]);\n\n  const columns = React.useMemo(() => {\n    return [\n      {\n        field: \"actions\",\n        type: \"actions\",\n        getActions: (params) => [\n          <GridActionsCellItem\n            component=\"a\"\n            href={getProductEditUrl(params.row.barcode)}\n            label={t(\"insights.edit_product\")}\n            icon={\n              <Tooltip title={t(\"insights.edit_product\")}>\n                <EditIcon />\n              </Tooltip>\n            }\n          />,\n          <GridActionsCellItem\n            component=\"a\"\n            href={getProductUrl(params.row.barcode)}\n            label={t(\"insights.view_product\")}\n            icon={\n              <Tooltip title={t(\"insights.view_product\")}>\n                <VisibilityIcon />\n              </Tooltip>\n            }\n          />,\n        ],\n      },\n      {\n        field: \"type\",\n        minWidth: 150,\n        flex: 1,\n        maxWidth: 200,\n        renderCell: (params) => <TypeCell {...params} />,\n      },\n      {\n        field: \"value_tag\",\n        minWidth: 200,\n        flex: 1,\n        renderCell: ({ row }) =>\n          row.type && row.value_tag ? (\n            <Link href={getQuestionUrl(row.type, row.value_tag)}>\n              {row.value_tag} : {row.value}\n            </Link>\n          ) : (\n            <span>\n              {row.value_tag} : {row.value}\n            </span>\n          ),\n      },\n      {\n        field: \"barcode\",\n        renderCell: ({ value, tabIndex }) => {\n          return (\n            <RenderLink\n              value={value}\n              tabIndex={tabIndex}\n              onClick={() => {\n                setFilterState((f) => ({ ...f, barcode: value }));\n              }}\n            />\n          );\n        },\n        minWidth: 180,\n        flex: 1,\n        maxWidth: 200,\n      },\n      { field: \"id\", flex: 1 },\n      { field: \"timestamp\", ...dateTimeColumn },\n      {\n        field: \"completed_at\",\n        ...dateTimeColumn,\n      },\n      {\n        field: \"annotation\",\n        renderCell: (params) => <AnnotationStateCell {...params} />,\n        minWidth: 70,\n        maxWidth: 110,\n        flex: 1,\n      },\n      {\n        field: \"automatic_processing\",\n        type: \"boolean\",\n        valueGetter: ({ value }) => Boolean(value),\n        minWidth: 70,\n        flex: 1,\n        maxWidth: 110,\n        renderCell: ({ value }) =>\n          value ? (\n            <Tooltip title={t(\"insights.automatic\")}>\n              <SmartToyIcon color=\"action\" />\n            </Tooltip>\n          ) : (\n            <Tooltip title={t(\"insights.human_required\")}>\n              <FaceIcon color=\"action\" />\n            </Tooltip>\n          ),\n      },\n    ].map((col) => ({ ...col, sortable: false }));\n  }, [setFilterState, t]);\n\n  React.useEffect(() => {\n    setIsLoading(true);\n    let isValid = true;\n    robotoffService\n      .getInsights(\n        filterState.barcode,\n        filterState.insightType,\n        filterState.valueTag,\n        filterState.annotationStatus,\n        pageState.page,\n        PAGE_SIZE\n      )\n      .then((result) => {\n        if (isValid) {\n          const newRowCount = result.data.count;\n          setPageState((prevState) =>\n            newRowCount !== prevState.rowCount\n              ? { ...prevState, rowCount: newRowCount }\n              : prevState\n          );\n          setRows(\n            result.data.insights.map((row) => ({\n              ...row,\n              value_tag: row.value_tag ?? row.value,\n            }))\n          );\n          setIsLoading(false);\n        }\n      })\n      .catch(() => {\n        if (isValid) {\n          setIsLoading(false);\n        }\n      });\n    return () => {\n      isValid = false;\n    };\n  }, [\n    filterState.barcode,\n    filterState.valueTag,\n    filterState.insightType,\n    filterState.annotationStatus,\n    pageState.page,\n    t,\n  ]);\n\n  return (\n    <DataGrid\n      autoHeight\n      columns={columns}\n      rows={rows}\n      disableColumnFilter\n      disableCol\n      componentsProps={{\n        toolbar: {\n          printOptions: { disableToolbarButton: true },\n          csvOptions: { disableToolbarButton: true },\n        },\n      }}\n      components={{ Toolbar: GridToolbar }}\n      isLoading={isLoading}\n      page={pageState.page - 1}\n      pageSize={PAGE_SIZE}\n      rowsPerPageOptions={[PAGE_SIZE]}\n      onPageChange={(page) =>\n        setPageState((prev) => ({ ...prev, page: page + 1 }))\n      }\n      paginationMode=\"server\"\n      rowCount={pageState.rowCount}\n      density=\"compact\"\n      initialState={{\n        columns: {\n          columnVisibilityModel: {\n            id: false,\n          },\n        },\n      }}\n    />\n  );\n};\n\nexport default InsightGrid;\n","import { CircularProgress, Divider, Stack } from \"@mui/material\";\nimport * as React from \"react\";\n\nimport Typography from \"@mui/material/Typography\";\n\nimport FilterInsights from \"./FilterInsights\";\nimport InsightGrid from \"./InsightsGrid\";\nimport { useTranslation } from \"react-i18next\";\n\nimport useUrlParams from \"../../hooks/useUrlParams\";\n\nexport default function Insights() {\n  const { t } = useTranslation();\n\n  const [filterState, setFilterState] = useUrlParams(\n    {\n      barcode: \"\",\n      valueTag: \"\",\n      insightType: \"\",\n      annotationStatus: \"\",\n    },\n    {\n      valueTag: [\"value\", \"value_tag\"],\n    }\n  );\n\n  return (\n    <React.Suspense fallback={<CircularProgress />}>\n      <Stack spacing={2} sx={{ padding: 2 }}>\n        <Typography>{t(\"insights.insights\")}</Typography>\n        <FilterInsights\n          filterState={filterState}\n          setFilterState={setFilterState}\n        />\n        <Divider />\n        <div style={{ height: \"250px\" }}>\n          <InsightGrid\n            filterState={filterState}\n            setFilterState={setFilterState}\n          />\n        </div>\n      </Stack>\n    </React.Suspense>\n  );\n}\n","import axios from \"axios\";\nimport { ROBOTOFF_API_URL, IS_DEVELOPMENT_MODE } from \"./const\";\nimport { getLang } from \"./localeStorageManager\";\nimport { reformatValueTag, removeEmptyKeys } from \"./utils\";\n\nexport interface QuestionInterface {\n  barcode: string;\n  insight_id: string;\n  insight_type: string;\n  question: string;\n  source_image_url?: string;\n  type: string;\n  value: string;\n  value_tag: string;\n}\n\ntype GetQuestionsResponse = { count: number; questions: QuestionInterface[] };\n\nconst robotoff = {\n  annotate(insightId: string, annotation) {\n    if (IS_DEVELOPMENT_MODE) {\n      console.log(\n        `Annotated, ${ROBOTOFF_API_URL}/insights/annotate`,\n        new URLSearchParams(\n          `insight_id=${insightId}&annotation=${annotation}&update=1`\n        ),\n        { withCredentials: true }\n      );\n    } else {\n      return axios.post(\n        `${ROBOTOFF_API_URL}/insights/annotate`,\n        new URLSearchParams(\n          `insight_id=${insightId}&annotation=${annotation}&update=1`\n        ),\n        { withCredentials: true }\n      );\n    }\n  },\n\n  questionsByProductCode(code: string) {\n    return axios\n      .get<GetQuestionsResponse>(`${ROBOTOFF_API_URL}/questions/${code}`)\n      .then((result) => {\n        let questions = result.data.questions;\n        result.data.questions = questions.filter(\n          (question) => question.source_image_url\n        );\n        return result;\n      });\n  },\n\n  questions(filterState, count = 10, page = 1) {\n    const {\n      insightType,\n      brandFilter,\n      valueTag,\n      countryFilter,\n      sortByPopularity,\n      campaign,\n      predictor,\n    } = filterState;\n\n    const searchParams = {\n      insight_types: insightType,\n      value_tag: valueTag,\n      brands: reformatValueTag(brandFilter),\n      country: countryFilter !== \"en:world\" ? countryFilter : null,\n      campaign,\n      predictor,\n    };\n\n    const lang = getLang();\n\n    return axios.get<GetQuestionsResponse>(\n      `${ROBOTOFF_API_URL}/questions/${\n        sortByPopularity ? \"popular\" : \"random\"\n      }`,\n      {\n        params: removeEmptyKeys({\n          ...searchParams,\n          lang,\n          count,\n          page,\n        }),\n      }\n    );\n  },\n\n  insightDetail(insight_id) {\n    return axios.get(`${ROBOTOFF_API_URL}/insights/detail/${insight_id}`);\n  },\n\n  loadLogo(logoId) {\n    return axios.get(`${ROBOTOFF_API_URL}/images/logos/${logoId}`);\n  },\n\n  updateLogo(logoId, value, type) {\n    return axios.put(\n      `${ROBOTOFF_API_URL}/images/logos/${logoId}`,\n      removeEmptyKeys({\n        value,\n        type,\n      }),\n      { withCredentials: true }\n    );\n  },\n\n  searchLogos(barcode, value, type, count = 25, random = false) {\n    const formattedValue = [\"label\", \"category\"].includes(type)\n      ? { taxonomy_value: value }\n      : { value };\n\n    return axios.get(`${ROBOTOFF_API_URL}/images/logos/search/`, {\n      params: removeEmptyKeys({\n        barcode,\n        type,\n        count,\n        random,\n        ...formattedValue,\n      }),\n    });\n  },\n\n  getLogoAnnotations(logoId, index, count = 25) {\n    const url =\n      logoId.length > 0\n        ? `${ROBOTOFF_API_URL}/ann/search/${logoId}`\n        : `${ROBOTOFF_API_URL}/ann/search`;\n    return axios.get(url, {\n      params: removeEmptyKeys({\n        index,\n        count,\n      }),\n    });\n  },\n\n  annotateLogos(annotations) {\n    return axios.post(\n      `${ROBOTOFF_API_URL}/images/logos/annotate`,\n      removeEmptyKeys({\n        annotations,\n      }),\n      { withCredentials: true }\n    );\n  },\n\n  getInsights(\n    barcode = \"\",\n    insightType = \"\",\n    valueTag = \"\",\n    annotation = \"\",\n    page = 1,\n    count = 25\n  ) {\n    let annotated;\n    if (annotation.length && annotation === \"not_annotated\") {\n      annotated = \"0\";\n      annotation = \"\";\n    }\n    return axios.get(`${ROBOTOFF_API_URL}/insights`, {\n      params: removeEmptyKeys({\n        barcode,\n        insight_types: insightType,\n        value_tag: valueTag,\n        annotation,\n        page,\n        annotated,\n        count,\n      }),\n    });\n  },\n\n  getUserStatistics(username) {\n    return axios.get(`${ROBOTOFF_API_URL}/users/statistics/${username}`);\n  },\n\n  getCroppedImageUrl(imageUrl, boundingBox) {\n    const [y_min, x_min, y_max, x_max] = boundingBox;\n    return `${ROBOTOFF_API_URL}/images/crop?image_url=${imageUrl}&y_min=${y_min}&x_min=${x_min}&y_max=${y_max}&x_max=${x_max}`;\n  },\n\n  getLogosImages(logoIds) {\n    return axios.get(\n      `${ROBOTOFF_API_URL}/images/logos?logo_ids=${logoIds.join(\",\")}`\n    );\n  },\n\n  getNutritionValueFromImage(language, imageOcrUrl, images) {\n    var ocrUrlSubString = imageOcrUrl.split(\"/\");\n\n    // setting a default value, assuming length of ocrUrlSubString is 7,\n    // and product code is 8 characters long\n    var productCodeForOcrUrl = ocrUrlSubString[5];\n\n    let nutritionKeyWithLangSuffix = `nutrition_${language}`;\n\n    for (var key in images) {\n      if (nutritionKeyWithLangSuffix === key) {\n        var imgid = images[nutritionKeyWithLangSuffix].imgid;\n      }\n    }\n\n    if (ocrUrlSubString.length > 7) {\n      // the productCode is 13 characters long\n      productCodeForOcrUrl =\n        ocrUrlSubString[5] +\n        \"/\" +\n        ocrUrlSubString[6] +\n        \"/\" +\n        ocrUrlSubString[7] +\n        \"/\" +\n        ocrUrlSubString[8];\n    }\n\n    return axios.get(\n      `${ROBOTOFF_API_URL}/predict/nutrient?ocr_url=https://images.openfoodfacts.org/images/products/${productCodeForOcrUrl}/${imgid}.json`\n    );\n  },\n\n  getUnansweredValues(params: {\n    type: \"label\" | \"brand\" | \"category\";\n    country;\n    campaign;\n    page?: number;\n    count?: number;\n  }) {\n    let page = params.page ?? 1;\n    page = page >= 1 ? page : 1;\n\n    return axios.get(\n      `${ROBOTOFF_API_URL}/questions/unanswered/?${Object.keys({\n        ...params,\n        page,\n      })\n        .filter((key) => params[key] !== undefined)\n        .map((key) => `${key}=${params[key]}`)\n        .join(\"&\")}`\n    );\n  },\n};\n\nexport default robotoff;\n","const reformatTagMapping = {\n  \" \": \"-\",\n  \"'\": \"-\",\n  \"&\": \"\",\n  à: \"a\",\n  â: \"a\",\n  ä: \"a\",\n  é: \"e\",\n  è: \"e\",\n  ê: \"e\",\n  ë: \"e\",\n  î: \"i\",\n  ï: \"i\",\n  ô: \"o\",\n  ö: \"o\",\n  û: \"u\",\n  ù: \"u\",\n  ü: \"u\",\n};\n\nexport const reformatValueTag = (value) => {\n  if (!value) {\n    return value;\n  }\n  let output = value.trim().toLowerCase();\n  for (const [search, replace] of Object.entries(reformatTagMapping)) {\n    output = output.replace(new RegExp(search, \"g\"), replace);\n  }\n  output = output.replace(/-{2,}/g, \"-\");\n  return output;\n};\n\nexport const removeEmptyKeys = (obj) => {\n  Object.keys(obj).forEach(\n    (key) => (obj[key] == null || obj[key] === \"\") && delete obj[key]\n  );\n  return obj;\n};\n\n//  Only for testing purpose\nexport function sleep(ms) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\n//to provide capitalised country name; en:france => France\nexport const capitaliseName = (string) => {\n  if (!string) {\n    return string;\n  }\n  let name = string.slice(3);\n  return name.charAt(0).toUpperCase() + name.slice(1);\n};\n"],"names":["getDefaultizedUrlParams","defaultParameters","synonyms","parameters","urlParams","URLSearchParams","window","location","search","Object","keys","forEach","key","value","get","JSON","stringify","parse","entries","valueKey","synonymKeys","synonymKey","convertObjectParamsToUrlParams","set","undefined","delete","toString","defaultParams","React","setParameters","useLocation","prevParams","newParams","some","updateParameters","modifier","newRelativePathQuery","pathname","history","pushState","setUrlParams","typeOptions","labelKey","annotationOptions","useControled","exteriorValue","innerValue","setInnerValue","v","filterState","setFilterState","t","useTranslation","barcode","innerBarcode","setInnerBarcode","valueTag","innerValueTag","setInnerValueTag","insightType","innerInsightType","setInnerInsightType","annotationStatus","innerAnnotationStatus","setInnerAnnotationStatus","validateFilter","Stack","direction","spacing","sx","padding","TextField","fullWidth","label","placeholder","onChange","event","target","select","map","MenuItem","justifyContent","Button","variant","onClick","ml","RenderLink","props","other","Link","component","getProductUrl","code","offService","typeKeyToTranslationKey","product_weight","category","expiration_date","packager_code","brand","packaging","qr_code","annotationValueToTranslationKey","not_annotated","TypeCell","text","Typography","AnnotationStateCell","Tooltip","title","CheckCircleOutline","color","CancelOutlined","QuestionMarkOutlined","dateTimeColumn","type","minWidth","maxWidth","flex","valueGetter","params","Date","page","rowCount","pageState","setPageState","isLoading","setIsLoading","rows","setRows","columns","field","getActions","GridActionsCellItem","href","row","icon","Edit","Visibility","renderCell","value_tag","includes","tabIndex","f","Boolean","SmartToy","Face","col","sortable","isValid","robotoffService","then","result","newRowCount","data","count","prevState","insights","catch","DataGrid","autoHeight","disableColumnFilter","disableCol","componentsProps","toolbar","printOptions","disableToolbarButton","csvOptions","components","Toolbar","GridToolbar","pageSize","rowsPerPageOptions","onPageChange","prev","paginationMode","density","initialState","columnVisibilityModel","id","Insights","useUrlParams","fallback","CircularProgress","FilterInsights","Divider","style","height","robotoff","annotate","insightId","annotation","IS_DEVELOPMENT_MODE","axios","ROBOTOFF_API_URL","withCredentials","console","log","questionsByProductCode","questions","filter","question","source_image_url","brandFilter","countryFilter","sortByPopularity","campaign","predictor","searchParams","insight_types","brands","reformatValueTag","country","lang","getLang","removeEmptyKeys","insightDetail","insight_id","loadLogo","logoId","updateLogo","searchLogos","random","formattedValue","taxonomy_value","getLogoAnnotations","index","url","length","annotateLogos","annotations","getInsights","annotated","getUserStatistics","username","getCroppedImageUrl","imageUrl","boundingBox","y_min","x_min","y_max","x_max","getLogosImages","logoIds","join","getNutritionValueFromImage","language","imageOcrUrl","images","ocrUrlSubString","split","productCodeForOcrUrl","nutritionKeyWithLangSuffix","imgid","getUnansweredValues","reformatTagMapping","à","â","ä","é","è","ê","ë","î","ï","ô","ö","û","ù","ü","output","trim","toLowerCase","replace","RegExp","obj","sleep","ms","Promise","resolve","setTimeout","capitaliseName","string","name","slice","charAt","toUpperCase"],"sourceRoot":""}