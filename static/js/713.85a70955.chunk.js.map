{"version":3,"file":"static/js/713.85a70955.chunk.js","mappings":"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","sources":["components/ZoomableImage.tsx","externalApi.js","hooks/matomoEvents.ts","l10n-shortcuts.ts","components/CroppedLogo.tsx","pages/questions/QuestionDisplay.jsx","pages/questions/DebugQuestion.tsx","pages/questions/ProductInformation.jsx","pages/questions/UserData.tsx","pages/questions/index.jsx","pages/questions/utils.ts"],"sourcesContent":["import * as React from \"react\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport Button from \"@mui/material/Button\";\nimport Box from \"@mui/material/Box\";\nimport Divider from \"@mui/material/Divider\";\nimport IconButton from \"@mui/material/IconButton\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport { alpha } from \"@mui/material/styles\";\nimport { TransformWrapper, TransformComponent } from \"react-zoom-pan-pinch\";\n\nimport RotateLeftIcon from \"@mui/icons-material/RotateLeft\";\nimport RotateRightIcon from \"@mui/icons-material/RotateRight\";\nimport OpenInFullIcon from \"@mui/icons-material/OpenInFull\";\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\nimport { useTheme } from \"@mui/material/styles\";\n\nconst ZoomableImage = (props) => {\n  const { src, srcFull, zoomIn, imageProps, ...other } = props;\n\n  const apiRef = React.useRef(null);\n  const [rotation, setRotation] = React.useState(0);\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down(\"md\"));\n\n  return (\n    <>\n      <div {...other} style={{ ...other.style, position: \"relative\" }}>\n        {zoomIn ? (\n          <TransformWrapper>\n            <TransformComponent>\n              <img src={src} alt=\"\" {...imageProps} />\n            </TransformComponent>\n          </TransformWrapper>\n        ) : (\n          <img src={src} alt=\"\" {...imageProps} />\n        )}\n        <IconButton\n          onClick={() => {\n            setIsOpen(true);\n          }}\n          sx={(theme) => ({\n            position: \"absolute\",\n            color: \"white\",\n            backgroundColor: alpha(theme.palette.secondary.main, 0.5),\n            bottom: 5,\n            right: 5,\n          })}\n        >\n          <OpenInFullIcon />\n        </IconButton>\n      </div>\n      <Dialog\n        open={isOpen}\n        onClose={() => {\n          setIsOpen(false);\n        }}\n        maxWidth=\"xl\"\n        fullScreen={fullScreen}\n      >\n        <Box\n          sx={{\n            p: 1,\n            display: \"flex\",\n            flexDirection: \"row-reverse\",\n          }}\n        >\n          <IconButton onClick={() => setIsOpen(false)}>\n            <CloseIcon />\n          </IconButton>\n        </Box>\n        <Divider />\n        <DialogContent\n          sx={{\n            p: { xs: 1, md: 2 },\n          }}\n        >\n          <TransformWrapper limitToBounds={false} ref={apiRef}>\n            <TransformComponent>\n              <img\n                src={srcFull ?? src}\n                alt=\"\"\n                style={{\n                  maxHeight: \"calc(100vh - 160px )\",\n                  maxWidth: \"min(100%, 1400px)\",\n                  transform: `rotate(${rotation * 90}deg)`,\n                  transformOrigin: \"center\",\n                }}\n              />\n            </TransformComponent>\n          </TransformWrapper>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            fullWidth\n            variant=\"outlined\"\n            onClick={() => {\n              setRotation((prev) => prev - 1);\n            }}\n            startIcon={<RotateLeftIcon />}\n          >\n            left\n          </Button>\n          <Button\n            fullWidth\n            onClick={() => {\n              setRotation(0);\n              apiRef.current?.resetTransform();\n            }}\n          >\n            Reset\n          </Button>\n          <Button\n            fullWidth\n            variant=\"outlined\"\n            onClick={() => {\n              setRotation((prev) => prev + 1);\n            }}\n            endIcon={<RotateRightIcon />}\n          >\n            right\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n\nexport default ZoomableImage;\n","import axios from \"axios\";\n\nexport const addImageFlag = ({ barcode, imgid, url }) => {\n  axios\n    .put(`https://amathjourney.com/api/off-annotation/flag-image/${barcode}`, {\n      mode: \"no-cors\",\n      imgid,\n      url,\n    })\n    .catch(() => {\n      console.log(\"Image flagged\");\n    });\n};\n\nexport const removeImageFlag = ({ barcode, imgid }) => {\n  axios\n    .delete(\n      `https://amathjourney.com/api/off-annotation/flag-image/${barcode}`,\n      {\n        mode: \"no-cors\",\n        data: {\n          imgid,\n        },\n      }\n    )\n    .catch(() => {\n      console.log(\"Something went wrong. Image could not be flagged\");\n    });\n};\n\nconst externalApi = {\n  addImageFlag,\n  removeImageFlag,\n};\n\nexport default externalApi;\n","import { useMatomo } from \"@jonkoops/matomo-tracker-react\";\nimport { CORRECT_INSIGHT, WRONG_INSIGHT, SKIPPED_INSIGHT } from \"../const\";\n\nconst mapValueToAction = {\n  [CORRECT_INSIGHT]: \"yes\",\n  [WRONG_INSIGHT]: \"no\",\n  [SKIPPED_INSIGHT]: \"skip\",\n};\n\nexport const useMatomoTrackAnswerQuestion = () => {\n  const { trackEvent } = useMatomo();\n\n  return {\n    answerQuestions: (answer: -1 | 0 | 1) => {\n      trackEvent({\n        category: \"question-page\",\n        action: mapValueToAction[answer],\n      });\n    },\n    annotateLogo: ({ game, type, value, number }) => {\n      trackEvent({\n        category: \"logo\",\n        action: \"annotation\",\n        name: `${game} - ${type} - ${value}`,\n        value: number,\n      });\n    },\n  };\n};\n","import { getLang } from \"./localeStorageManager\";\n\ntype Shortcuts = {\n  yes: string;\n  no: string;\n  skip: string;\n};\n\ntype ShortcutLocalization = {\n  en: Shortcuts;\n  [locale: string]: Partial<Shortcuts>;\n};\n\nconst SHORTCUT_LOCALISATION = {\n  en: {\n    yes: \"y\",\n    no: \"n\",\n    skip: \"k\",\n  },\n  fr: {\n    yes: \"o\",\n    no: \"n\",\n    skip: \"k\",\n  },\n};\n\nexport const getShortcuts = (lang?: string): ShortcutLocalization => {\n  return {\n    ...SHORTCUT_LOCALISATION.en,\n    ...SHORTCUT_LOCALISATION[lang ?? getLang()],\n  };\n};\n","import * as React from \"react\";\n\nimport robotoff from \"../robotoff\";\nimport off from \"../off\";\n\nconst fetchData = async (insightId: string) => {\n  const response = await robotoff.insightDetail(insightId);\n\n  if (\n    response?.data?.source_image &&\n    response?.data?.data?.logo_id &&\n    !response?.data?.data?.bounding_box\n  ) {\n    const logoData = await robotoff.getLogosImages([\n      response?.data?.data?.logo_id,\n    ]);\n    const bounding_box = logoData?.data?.logos?.[0]?.bounding_box;\n\n    return { ...response, bounding_box };\n  }\n\n  return response;\n};\n\nconst getCroppedLogoUrl = (debugResponse) => {\n  const debugData = debugResponse?.data;\n  const bounding_box =\n    debugData?.data?.bounding_box || debugResponse?.bounding_box;\n\n  if (!debugData?.source_image || !bounding_box) {\n    return null;\n  }\n\n  const sourceImage = off.getImageUrl(debugData?.source_image);\n  return robotoff.getCroppedImageUrl(sourceImage, bounding_box);\n};\n\nconst CroppedLogo = (props) => {\n  const { insightId, ...other } = props;\n  const [logoUrl, setLogoUrl] = React.useState(null);\n\n  React.useEffect(() => {\n    let isValid = true;\n\n    fetchData(insightId)\n      .then(getCroppedLogoUrl)\n      .then((url) => {\n        if (isValid) {\n          setLogoUrl(url);\n        }\n      })\n      .catch(() => {});\n\n    return () => {\n      isValid = false;\n    };\n  }, [insightId]);\n\n  if (!logoUrl) {\n    return null;\n  }\n  return <img alt=\"logo used in prediction\" src={logoUrl} {...other} />;\n};\n\nexport default CroppedLogo;\n","import * as React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport Button from \"@mui/material/Button\";\nimport Badge from \"@mui/material/Badge\";\nimport Box from \"@mui/material/Box\";\nimport Divider from \"@mui/material/Divider\";\nimport Stack from \"@mui/material/Stack\";\nimport Typography from \"@mui/material/Typography\";\nimport LinkIcon from \"@mui/icons-material/Link\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport DoneIcon from \"@mui/icons-material/Done\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport MuiLink from \"@mui/material/Link\";\nimport { useTheme } from \"@mui/material/styles\";\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\n\nimport { useTranslation } from \"react-i18next\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { CORRECT_INSIGHT, WRONG_INSIGHT, SKIPPED_INSIGHT } from \"../../const\";\nimport { DEFAULT_FILTER_STATE } from \"../../components/QuestionFilter/const\";\nimport {\n  filterStateSelector,\n  isLoadingSelector,\n  updateFilter,\n  answerQuestion as answerQuestionAction,\n} from \"./store\";\nimport { useMatomoTrackAnswerQuestion } from \"../../hooks/matomoEvents\";\nimport {\n  getFullSizeImage,\n  getValueTagExamplesURL,\n  getValueTagQuestionsURL,\n  getNbOfQuestionForValue,\n} from \"./utils\";\n\nimport { getShortcuts } from \"../../l10n-shortcuts\";\nimport CroppedLogo from \"../../components/CroppedLogo\";\nimport ZoomableImage from \"../../components/ZoomableImage\";\n\nconst usePotentialQuestionNumber = (filterState, question) => {\n  const [nbOfPotentialQuestion, setNbOfPotentialQuestions] =\n    React.useState(null);\n\n  React.useEffect(() => {\n    if (\n      filterState.valueTag ||\n      !question?.insight_type ||\n      !question?.value_tag\n    ) {\n      // value is already in the filter so it's a useless information\n      setNbOfPotentialQuestions(null);\n      return;\n    }\n    let validRequest = true;\n\n    getNbOfQuestionForValue({\n      ...filterState,\n      insightType: question?.insight_type,\n      valueTag: question?.value_tag,\n    })\n      .then((nbQuestions) => {\n        if (validRequest) {\n          setNbOfPotentialQuestions(nbQuestions);\n        }\n      })\n      .catch(() => {});\n\n    return () => {\n      validRequest = false;\n    };\n  }, [filterState, question?.insight_type, question?.value_tag]);\n\n  return nbOfPotentialQuestion;\n};\n\nconst useKeyboardShortcuts = (question, answerQuestion) => {\n  const shortcuts = getShortcuts();\n\n  React.useEffect(() => {\n    function handleShortCut(event) {\n      const preventShortCut = event.target.tagName.toUpperCase() === \"INPUT\";\n      if (question?.insight_id && !preventShortCut) {\n        switch (event.key) {\n          case shortcuts.skip:\n            answerQuestion({\n              value: SKIPPED_INSIGHT,\n              insight_id: question.insight_id,\n            });\n            break;\n          case shortcuts.yes:\n            answerQuestion({\n              value: CORRECT_INSIGHT,\n              insight_id: question.insight_id,\n            });\n            break;\n          case shortcuts.no:\n            answerQuestion({\n              value: WRONG_INSIGHT,\n              insight_id: question.insight_id,\n            });\n            break;\n          default:\n            break;\n        }\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleShortCut);\n    return () => window.removeEventListener(\"keydown\", handleShortCut);\n  }, [\n    question?.insight_id,\n    answerQuestion,\n    shortcuts.skip,\n    shortcuts.yes,\n    shortcuts.no,\n  ]);\n\n  return shortcuts;\n};\nconst QuestionDisplay = ({ question, productData }) => {\n  const { t } = useTranslation();\n\n  const { answerQuestions: matomoTrackAnswerQuestions } =\n    useMatomoTrackAnswerQuestion();\n\n  const filterState = useSelector(filterStateSelector);\n  const isLoading = useSelector(isLoadingSelector);\n  const dispatch = useDispatch();\n\n  const resetFilters = () => dispatch(updateFilter(DEFAULT_FILTER_STATE));\n  const answerQuestion = React.useCallback(\n    ({ insight_id, value }) => {\n      dispatch(answerQuestionAction({ insight_id, value }));\n      matomoTrackAnswerQuestions(value);\n    },\n    [dispatch, matomoTrackAnswerQuestions]\n  );\n\n  const valueTagQuestionsURL = getValueTagQuestionsURL(filterState, question);\n  const valueTagExamplesURL = getValueTagExamplesURL(question);\n\n  const theme = useTheme();\n  const isDesktop = useMediaQuery(theme.breakpoints.up(\"md\"));\n\n  const nbOfPotentialQuestion = usePotentialQuestionNumber(\n    filterState,\n    question\n  );\n  const shortcuts = useKeyboardShortcuts(question, answerQuestion);\n\n  if (question === null) {\n    if (isLoading) {\n      return (\n        <Box sx={{ width: \"100%\", textAlign: \"center\", py: 10, m: 0 }}>\n          <Typography variant=\"subtitle1\">\n            {t(\"questions.please_wait_while_we_fetch_the_question\")}\n          </Typography>\n          <br />\n          <CircularProgress />\n        </Box>\n      );\n    }\n    return (\n      <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\n        <p>{t(\"questions.no_questions_remaining\")}</p>\n        <Button size=\"small\" variant=\"contained\" onClick={resetFilters}>\n          {t(\"questions.reset_filters\")}\n        </Button>\n      </Stack>\n    );\n  }\n\n  return (\n    <Stack\n      sx={{\n        textAlign: \"center\",\n        flexGrow: 1,\n        flexBasis: 0,\n        flexShrink: 1,\n      }}\n    >\n      <Stack\n        sx={{\n          alignItems: \"center\",\n        }}\n      >\n        <Typography>{question?.question}</Typography>\n        <Box sx={{ display: \"flex\", alignItems: \"center\" }}>\n          {valueTagQuestionsURL ? (\n            <Badge\n              sx={{ marginY: 1 }}\n              badgeContent={nbOfPotentialQuestion}\n              color=\"primary\"\n            >\n              <Button\n                sx={{ paddingX: 4 }}\n                component={Link}\n                to={valueTagQuestionsURL}\n                endIcon={<LinkIcon />}\n                variant=\"outlined\"\n              >\n                {question.value}\n              </Button>\n            </Badge>\n          ) : (\n            <Button sx={{ paddingX: 4, marginY: 1 }} variant=\"outlined\">\n              {question.value}\n            </Button>\n          )}\n          {question.ref_image_url && (\n            <img\n              alt=\"logo example\"\n              src={question.ref_image_url}\n              style={{ height: \"36px\", marginLeft: 8 }}\n            />\n          )}\n        </Box>\n        {valueTagExamplesURL && (\n          <MuiLink\n            variant=\"body2\"\n            href={valueTagExamplesURL}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            sx={{ mb: 2, display: { xs: \"none\", md: \"inherit\" } }}\n          >\n            <div>{`${t(\"questions.see_examples\")} ${\n              question.insight_type\n            }`}</div>\n          </MuiLink>\n        )}\n      </Stack>\n      <Divider />\n      <Box\n        flexGrow={1}\n        flexShrink={1}\n        sx={{\n          height: `calc(100vh - ${isDesktop ? 461 : 445}px)`,\n          marginBottom: 1,\n          position: \"relative\",\n        }}\n      >\n        <ZoomableImage\n          src={\n            question.source_image_url ||\n            \"https://static.openfoodfacts.org/images/image-placeholder.png\"\n          }\n          srcFull={getFullSizeImage(question.source_image_url)}\n          alt=\"\"\n          style={{\n            height: isDesktop ? \"100%\" : \"calc(100% - 24px)\",\n            display: \"inline-block\",\n          }}\n          imageProps={{\n            style: {\n              maxHeight: \"100%\",\n              maxWidth: \"100%\",\n            },\n          }}\n        />\n        {isDesktop ? (\n          <CroppedLogo\n            insightId={question.insight_id}\n            style={{\n              position: \"absolute\",\n              bottom: 0,\n              right: 0,\n              maxHeight: \"75px\",\n              maxWidth: \"150px\",\n            }}\n          />\n        ) : (\n          <Typography\n            sx={{\n              position: \"absolute\",\n              bottom: 0,\n            }}\n          >\n            {productData?.productName}\n          </Typography>\n        )}\n      </Box>\n      <Stack direction=\"row\" justifyContent=\"center\" spacing={2} sx={{ mb: 1 }}>\n        <Button\n          onClick={() =>\n            answerQuestion({\n              value: WRONG_INSIGHT,\n              insight_id: question?.insight_id,\n            })\n          }\n          color=\"error\"\n          variant=\"contained\"\n          size=\"large\"\n          sx={{ display: \"flex\", flexDirection: \"column\", flexGrow: 1 }}\n        >\n          <DeleteIcon />\n          {t(\"questions.no\")} ({shortcuts.no})\n        </Button>\n        <Button\n          onClick={() =>\n            answerQuestion({\n              value: CORRECT_INSIGHT,\n              insight_id: question?.insight_id,\n            })\n          }\n          startIcon={<DoneIcon />}\n          color=\"success\"\n          variant=\"contained\"\n          size=\"large\"\n          sx={{ display: \"flex\", flexDirection: \"column\", flexGrow: 1 }}\n        >\n          {t(\"questions.yes\")} ({shortcuts.yes})\n        </Button>\n      </Stack>\n      <Button\n        onClick={() =>\n          answerQuestion({\n            value: SKIPPED_INSIGHT,\n            insight_id: question?.insight_id,\n          })\n        }\n        color=\"secondary\"\n        variant=\"contained\"\n        size=\"medium\"\n        autoFocus\n        sx={{ py: \"1rem\" }}\n      >\n        {t(\"questions.skip\")} ({shortcuts.skip})\n      </Button>\n    </Stack>\n  );\n};\nexport default QuestionDisplay;\n","import * as React from \"react\";\n\nimport Accordion from \"@mui/material/Accordion\";\nimport AccordionSummary from \"@mui/material/AccordionSummary\";\nimport AccordionDetails from \"@mui/material/AccordionDetails\";\nimport Typography from \"@mui/material/Typography\";\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\nimport LinearProgress from \"@mui/material/LinearProgress\";\n\nimport robotoff from \"../../robotoff\";\nimport off from \"../../off\";\n\nimport Divider from \"@mui/material/Divider\";\nimport Box from \"@mui/material/Box\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableRow from \"@mui/material/TableRow\";\nimport TableCell from \"@mui/material/TableCell\";\n\nconst fetchData = async (insightId) => {\n  const response = await robotoff.insightDetail(insightId);\n\n  if (\n    response?.data?.source_image &&\n    response?.data?.data?.logo_id &&\n    !response?.data?.data?.bounding_box\n  ) {\n    const logoData = await robotoff.getLogosImages([\n      response?.data?.data?.logo_id,\n    ]);\n    const bounding_box = logoData?.data?.logos?.[0]?.bounding_box;\n\n    return { ...response, bounding_box };\n  }\n\n  return response;\n};\n\nconst getCroppedLogoUrl = (debugResponse) => {\n  const debugData = debugResponse?.data;\n  const bounding_box =\n    debugData?.data?.bounding_box || debugResponse?.bounding_box;\n\n  if (!debugData?.source_image || !bounding_box) {\n    return null;\n  }\n\n  const sourceImage = off.getImageUrl(debugData?.source_image);\n  return robotoff.getCroppedImageUrl(sourceImage, bounding_box);\n};\nconst DebugQuestion = (props) => {\n  const { insightId } = props;\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [debugResponse, setDebugResponse] = React.useState<any>({});\n  const [openDetails, setOpenDetails] = React.useState<any>({\n    resume: false,\n    json_details: false,\n  });\n\n  const handleChange = (panelId) => (event, newState) => {\n    setOpenDetails((prev) => ({ ...prev, [panelId]: newState }));\n  };\n\n  React.useEffect(() => {\n    setIsLoading(true);\n    let isValid = true;\n    fetchData(insightId)\n      .then((response) => {\n        if (!isValid) {\n          return;\n        }\n        setIsLoading(false);\n        setDebugResponse(response);\n      })\n      .catch((e) => {\n        if (!isValid) {\n          return;\n        }\n        setIsLoading(false);\n        setDebugResponse(e);\n      });\n    return () => {\n      isValid = false;\n    };\n  }, [insightId]);\n\n  const croppedUrl = getCroppedLogoUrl(debugResponse);\n  return (\n    <>\n      <Divider sx={{ mt: 2 }} />\n      <Box sx={{ px: 2, my: 2 }}>\n        <Accordion\n          variant=\"outlined\"\n          onChange={handleChange(\"resume\")}\n          expanded={openDetails[\"resume\"]}\n        >\n          <AccordionSummary\n            expandIcon={<ExpandMoreIcon />}\n            aria-controls=\"panel1a-content\"\n            id=\"panel1a-header\"\n          >\n            <Typography>resume</Typography>\n          </AccordionSummary>\n          <AccordionDetails>\n            {isLoading ? (\n              <LinearProgress />\n            ) : (\n              <div>\n                <Table size=\"small\">\n                  <TableBody\n                    sx={{\n                      \" td, th\": { border: \"none\" },\n                      th: { verticalAlign: \"top\", pr: 0 },\n                    }}\n                  >\n                    <TableRow>\n                      <TableCell component=\"th\" scope=\"row\">\n                        insight id\n                      </TableCell>\n                      <TableCell>{debugResponse?.data?.id}</TableCell>\n                    </TableRow>\n\n                    <TableRow>\n                      <TableCell component=\"th\" scope=\"row\">\n                        generator model\n                      </TableCell>\n                      <TableCell>{debugResponse?.data?.predictor}</TableCell>\n                    </TableRow>\n\n                    <TableRow>\n                      <TableCell component=\"th\" scope=\"row\">\n                        timestamp\n                      </TableCell>\n                      <TableCell>\n                        {new Date(\n                          debugResponse?.data?.timestamp\n                        ).toLocaleString()}\n                      </TableCell>\n                    </TableRow>\n                  </TableBody>\n                </Table>\n                {croppedUrl && (\n                  <img\n                    alt=\"lroUsed for prediction\"\n                    src={croppedUrl}\n                    style={{ maxHeight: \"150px\" }}\n                  />\n                )}\n              </div>\n            )}\n          </AccordionDetails>\n        </Accordion>\n        <Accordion\n          variant=\"outlined\"\n          onChange={handleChange(\"json_details\")}\n          expanded={openDetails[\"json_details\"]}\n        >\n          <AccordionSummary\n            expandIcon={<ExpandMoreIcon />}\n            aria-controls=\"panel1a-content\"\n            id=\"panel1a-header\"\n          >\n            <Typography>raw JSON</Typography>\n          </AccordionSummary>\n          <AccordionDetails>\n            {isLoading ? (\n              <LinearProgress />\n            ) : (\n              <Typography variant=\"caption\" component=\"pre\">\n                {JSON.stringify(debugResponse?.data ?? debugResponse, null, 2)}\n              </Typography>\n            )}\n          </AccordionDetails>\n        </Accordion>\n      </Box>\n    </>\n  );\n};\n\nexport default DebugQuestion;\n","import * as React from \"react\";\nimport Box from \"@mui/material/Box\";\nimport Stack from \"@mui/material/Stack\";\nimport Button from \"@mui/material/Button\";\nimport Link from \"@mui/material/Link\";\nimport Divider from \"@mui/material/Divider\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport Typography from \"@mui/material/Typography\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport Grid from \"@mui/material/Grid\";\nimport EditIcon from \"@mui/icons-material/Edit\";\nimport VisibilityIcon from \"@mui/icons-material/Visibility\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableRow from \"@mui/material/TableRow\";\nimport OutlinedFlagIcon from \"@mui/icons-material/OutlinedFlag\";\nimport FlagIcon from \"@mui/icons-material/Flag\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  NO_QUESTION_LEFT,\n  SKIPPED_INSIGHT,\n  CORRECT_INSIGHT,\n  WRONG_INSIGHT,\n} from \"../../const\";\nimport offService from \"../../off\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Tooltip from \"@mui/material/Tooltip\";\nimport {\n  localSettings,\n  localSettingsKeys,\n  getHideImages,\n  getPageCustomization,\n  getIsDevMode,\n} from \"../../localeStorageManager\";\nimport DebugQuestion from \"./DebugQuestion\";\nimport ZoomableImage from \"../../components/ZoomableImage\";\nimport robotoff from \"../../robotoff\";\nimport {\n  ADDITIONAL_INFO_TRANSLATION,\n  getImageId,\n  getImagesUrls,\n  useOtherQuestions,\n  useFlagImage,\n} from \"./utils\";\nimport { capitaliseName } from \"../../utils\";\n\nconst ProductInformation = (props) => {\n  const { question, productData } = props;\n  const { t } = useTranslation();\n  const isDevMode = getIsDevMode();\n\n  const [hideImages, setHideImages] = React.useState(getHideImages);\n  const [devCustomization] = React.useState(\n    () => getPageCustomization().questionPage\n  );\n  const [flagged, flagImage, deleteFlagImage] = useFlagImage(question?.barcode);\n\n  const [\n    otherQuestionsState,\n    setOtherQuestionsState,\n    pendingAnswers,\n    setPendingAnswers,\n  ] = useOtherQuestions(question?.barcode, question?.insight_id);\n\n  const handleHideImages = (event) => {\n    setHideImages(event.target.checked);\n    localSettings.update(localSettingsKeys.hideImages, event.target.checked);\n  };\n\n  if (!question || question.insight_id === NO_QUESTION_LEFT) {\n    return null;\n  }\n\n  const splitCountries = (string) => {\n    if (!Boolean(string)) return;\n    let countries = string.split(\", \");\n    let allCountries = \"\";\n    for (let i = 0; i < countries.length; i++) {\n      allCountries += capitaliseName(countries[i]);\n      if (i !== countries.length - 1) {\n        allCountries += \", \";\n      }\n    }\n    return allCountries;\n  };\n\n  return (\n    <Box>\n      {/* Main information about the product */}\n      <Typography>{productData?.productName}</Typography>\n      <Button\n        size=\"small\"\n        component={Link}\n        target=\"_blank\"\n        href={offService.getProductUrl(question.barcode)}\n        variant=\"outlined\"\n        startIcon={<VisibilityIcon />}\n        sx={{ minWidth: 150 }}\n      >\n        {t(\"questions.view\")}\n      </Button>\n      <Button\n        size=\"small\"\n        component={Link}\n        target=\"_blank\"\n        href={offService.getProductEditUrl(question.barcode)}\n        variant=\"contained\"\n        startIcon={<EditIcon />}\n        sx={{ ml: 2, minWidth: 150 }}\n      >\n        {t(\"questions.edit\")}\n      </Button>\n      {\n        /* Other questions */\n\n        isDevMode && (\n          <>\n            <Divider sx={{ my: 1 }} />\n            <Typography variant=\"h5\">\n              {t(\"questions.other_questions\")}\n            </Typography>\n\n            {otherQuestionsState.isLoading\n              ? null\n              : otherQuestionsState.questions.map((otherQuestion) => (\n                  <Stack\n                    direction=\"row\"\n                    key={otherQuestion.insight_id}\n                    sx={{ mt: 1, alignItems: \"flex-start\" }}\n                  >\n                    <Typography key={otherQuestion.insight_id}>\n                      {otherQuestion?.question} ({otherQuestion?.value})\n                    </Typography>\n                    <Button\n                      onClick={() => {\n                        setPendingAnswers((prev) => ({\n                          ...prev,\n                          [otherQuestion?.insight_id]:\n                            prev[otherQuestion?.insight_id] === CORRECT_INSIGHT\n                              ? SKIPPED_INSIGHT\n                              : CORRECT_INSIGHT,\n                        }));\n                      }}\n                      color=\"success\"\n                      variant={\n                        pendingAnswers[otherQuestion?.insight_id] ===\n                        CORRECT_INSIGHT\n                          ? \"contained\"\n                          : \"outlined\"\n                      }\n                      size=\"small\"\n                      sx={{ ml: 1 }}\n                    >\n                      {t(\"questions.yes\")}\n                    </Button>\n                    <Button\n                      onClick={() => {\n                        setPendingAnswers((prev) => ({\n                          ...prev,\n                          [otherQuestion?.insight_id]:\n                            prev[otherQuestion?.insight_id] === WRONG_INSIGHT\n                              ? SKIPPED_INSIGHT\n                              : WRONG_INSIGHT,\n                        }));\n                      }}\n                      color=\"error\"\n                      variant={\n                        pendingAnswers[otherQuestion?.insight_id] ===\n                        WRONG_INSIGHT\n                          ? \"contained\"\n                          : \"outlined\"\n                      }\n                      size=\"small\"\n                    >\n                      {t(\"questions.no\")}\n                    </Button>\n                    <Button\n                      onClick={() => {\n                        const answer =\n                          pendingAnswers[otherQuestion?.insight_id];\n                        if (\n                          answer === CORRECT_INSIGHT ||\n                          answer === WRONG_INSIGHT ||\n                          answer === SKIPPED_INSIGHT\n                        ) {\n                          robotoff.annotate(otherQuestion?.insight_id, answer);\n                          setOtherQuestionsState((prev) => ({\n                            ...prev,\n                            questions: prev.questions.filter(\n                              (q) => q?.insight_id !== otherQuestion?.insight_id\n                            ),\n                          }));\n                        }\n                        setPendingAnswers((prev) => ({\n                          ...prev,\n                          [otherQuestion?.insight_id]: WRONG_INSIGHT,\n                        }));\n                      }}\n                      color=\"secondary\"\n                      disabled={\n                        ![CORRECT_INSIGHT, WRONG_INSIGHT].includes(\n                          pendingAnswers[otherQuestion?.insight_id]\n                        )\n                      }\n                      variant=\"contained\"\n                      size=\"small\"\n                      sx={{ ml: 1 }}\n                    >\n                      {t(\"questions.send\")}\n                    </Button>\n                  </Stack>\n                ))}\n          </>\n        )\n      }\n\n      <Divider sx={{ my: 1 }} />\n\n      {/* Image display section */}\n      <FormControlLabel\n        control={<Checkbox checked={hideImages} onChange={handleHideImages} />}\n        label={t(\"questions.hide_images\")}\n        labelPlacement=\"end\"\n      />\n      {!hideImages && productData?.images && (\n        <Grid container rowSpacing={1.5} spacing={1}>\n          {getImagesUrls(productData.images, question.barcode).map((src) => (\n            <Grid\n              item\n              key={src}\n              style={{ display: \"inline-flex\", alignItems: \"flex-start\" }}\n            >\n              <ZoomableImage\n                src={src}\n                imageProps={{\n                  loading: \"lazy\",\n                  style: { maxWidth: 300, maxHeight: 300 },\n                }}\n              />\n              {flagged.includes(getImageId(src)) ? (\n                <Tooltip title={t(\"questions.unflag\")}>\n                  <IconButton\n                    onClick={() => deleteFlagImage(src, question.barcode)}\n                  >\n                    <FlagIcon />\n                  </IconButton>\n                </Tooltip>\n              ) : (\n                <Tooltip title={t(\"questions.flag\")}>\n                  <IconButton onClick={() => flagImage(src, question.barcode)}>\n                    <OutlinedFlagIcon />\n                  </IconButton>\n                </Tooltip>\n              )}\n            </Grid>\n          ))}\n        </Grid>\n      )}\n\n      {/* Remaining info */}\n      <Divider />\n\n      <Table size=\"small\">\n        <TableBody\n          sx={{\n            \" td, th\": { border: \"none\" },\n            th: { verticalAlign: \"top\", pr: 0 },\n          }}\n        >\n          {Object.keys(ADDITIONAL_INFO_TRANSLATION).map((infoKey) => (\n            <TableRow key={infoKey}>\n              <TableCell component=\"th\" scope=\"row\">\n                {t(`questions.${ADDITIONAL_INFO_TRANSLATION[infoKey]}`)}\n              </TableCell>\n              {infoKey !== \"countriesTags\" ? (\n                <TableCell>{productData?.[infoKey]}</TableCell>\n              ) : (\n                <TableCell>{splitCountries(productData?.[infoKey])}</TableCell>\n              )}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n      {isDevMode && devCustomization.showDebug && (\n        <DebugQuestion insightId={question.insight_id} />\n      )}\n      <Divider />\n    </Box>\n  );\n};\nexport default ProductInformation;\n","import * as React from \"react\";\n\nimport Typography from \"@mui/material/Typography\";\nimport Box from \"@mui/material/Box\";\nimport Stack from \"@mui/material/Stack\";\nimport Link from \"@mui/material/Link\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogContentText from \"@mui/material/DialogContentText\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport Button from \"@mui/material/Button\";\n\nimport CancelOutlinedIcon from \"@mui/icons-material/CancelOutlined\";\nimport CheckCircleOutlineIcon from \"@mui/icons-material/CheckCircleOutline\";\nimport IconButton from \"@mui/material/IconButton\";\nimport CancelScheduleSendIcon from \"@mui/icons-material/CancelScheduleSend\";\n\nimport { useTranslation } from \"react-i18next\";\nimport { useSelector } from \"react-redux\";\n\nimport { CORRECT_INSIGHT, WRONG_INSIGHT } from \"../../const\";\nimport offService from \"../../off\";\nimport LoginContext from \"../../contexts/login\";\nimport {\n  answeredQuestionsSelector,\n  numberOfQuestionsAvailableSelector,\n} from \"./store\";\n\nconst NB_DISPLAYED_QUESTIONS = 30;\nconst UserData = () => {\n  const { t } = useTranslation();\n  const numberOfQuestionsAvailable = useSelector(\n    numberOfQuestionsAvailableSelector\n  );\n  const answered = useSelector(answeredQuestionsSelector);\n\n  const [loginAlreadyProposed, setLoginAlreadyProposed] = React.useState(false);\n  const [loginModalOpen, setLoginModalOpen] = React.useState(false);\n\n  const { isLoggedIn } = React.useContext(LoginContext);\n\n  React.useEffect(() => {\n    if (answered.length > 3 && !isLoggedIn && !loginAlreadyProposed) {\n      setLoginModalOpen(true);\n    }\n  }, [answered.length, isLoggedIn, loginAlreadyProposed]);\n\n  let displayedAnswers = answered.filter(\n    (question) => question.validationValue !== -1\n  );\n\n  displayedAnswers = displayedAnswers.slice(\n    Math.max(0, displayedAnswers.length - NB_DISPLAYED_QUESTIONS),\n    displayedAnswers.length\n  );\n\n  return (\n    <Box>\n      <Stack spacing={1}>\n        <Typography sx={{ my: 2 }}>\n          {t(\"questions.remaining_annotations\")}: {numberOfQuestionsAvailable}\n        </Typography>\n        {displayedAnswers.map(\n          ({\n            insight_id,\n            barcode,\n            value,\n            insight_type,\n            validationValue,\n            isPending,\n          }) => (\n            <Stack key={insight_id} direction=\"row\" alignItems=\"center\">\n              {isPending && (\n                <IconButton\n                  size=\"small\"\n                  sx={{ mr: 1 }}\n                  // Prevent sending logos could be reintroduce if done sever side\n                  // onClick={() => preventAnnotation(insight_id)}\n                >\n                  <CancelScheduleSendIcon fontSize=\"inherit\" />\n                </IconButton>\n              )}\n              <Link href={offService.getProductEditUrl(barcode)}>\n                {insight_type}: {value}\n              </Link>\n              {validationValue === WRONG_INSIGHT && (\n                <CancelOutlinedIcon color=\"error\" sx={{ ml: 2 }} />\n              )}\n              {validationValue === CORRECT_INSIGHT && (\n                <CheckCircleOutlineIcon color=\"success\" sx={{ ml: 2 }} />\n              )}\n            </Stack>\n          )\n        )}\n      </Stack>\n      <Dialog\n        open={loginModalOpen}\n        onClose={() => {\n          setLoginModalOpen(false);\n          setLoginAlreadyProposed(true);\n        }}\n      >\n        <DialogTitle>{t(\"questions.login_title\")}</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            {t(\"questions.login_description\")}\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            variant=\"contained\"\n            href=\"https://world.openfoodfacts.org/cgi/login.pl\"\n            component={Link}\n            target=\"_blank\"\n          >\n            {t(\"questions.log_in\")}\n          </Button>\n          <Button\n            variant=\"contained\"\n            href=\"https://world.openfoodfacts.org/cgi/user.pl\"\n            component={Link}\n            target=\"_blank\"\n          >\n            {t(\"questions.sign_up\")}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default UserData;\n","import * as React from \"react\";\n\nimport QuestionFilter from \"../../components/QuestionFilter\";\n\nimport QuestionDisplay from \"./QuestionDisplay\";\nimport ProductInformation from \"./ProductInformation\";\nimport UserData from \"./UserData\";\nimport { useProductData } from \"./utils\";\n\nimport Divider from \"@mui/material/Divider\";\nimport Stack from \"@mui/material/Stack\";\nimport Grid from \"@mui/material/Grid\";\n\nimport store, {\n  fetchQuestions,\n  nbOfQuestionsInBufferSelector,\n  currentQuestionSelector,\n  nextImagesSelector,\n  nextPageSelector,\n} from \"./store\";\nimport { Provider, useDispatch, useSelector } from \"react-redux\";\nimport { CircularProgress } from \"@mui/material\";\n\nfunction QuestionsConsumer() {\n  const dispatch = useDispatch();\n\n  const remainingQuestionNb = useSelector(nbOfQuestionsInBufferSelector);\n  const nextPage = useSelector(nextPageSelector);\n  const nextImages = useSelector(nextImagesSelector);\n\n  React.useEffect(() => {\n    if (remainingQuestionNb < 5) {\n      dispatch(fetchQuestions());\n    }\n  }, [dispatch, remainingQuestionNb, nextPage]);\n\n  const question = useSelector(currentQuestionSelector);\n\n  const productData = useProductData(question?.barcode);\n\n  return (\n    <Grid container spacing={2} p={2}>\n      <Grid item xs={12} md={5}>\n        <Stack\n          direction=\"column\"\n          sx={{\n            height: { xs: \"calc(100vh - 76px)\", md: \"calc(100vh - 110px)\" },\n          }}\n        >\n          <QuestionFilter />\n          <Divider sx={{ margin: \"1rem\" }} />\n          <QuestionDisplay question={question} productData={productData} />\n        </Stack>\n      </Grid>\n      <Grid item xs={12} md={5}>\n        <ProductInformation question={question} productData={productData} />\n      </Grid>\n      <Grid item xs={12} md={2}>\n        <UserData />\n      </Grid>\n\n      {/* pre-fetch images of the next question */}\n      {nextImages.map((source_image_url) => (\n        <link rel=\"prefetch\" key={source_image_url} href={source_image_url} />\n      ))}\n    </Grid>\n  );\n}\n\nexport default function Questions() {\n  return (\n    <React.Suspense fallback={<CircularProgress />}>\n      <Provider store={store}>\n        <QuestionsConsumer />\n      </Provider>\n    </React.Suspense>\n  );\n}\n","import * as React from \"react\";\n\nimport { NO_QUESTION_LEFT, OFF_URL } from \"../../const\";\nimport { reformatValueTag } from \"../../utils\";\nimport externalApi from \"../../externalApi\";\nimport offService from \"../../off\";\nimport robotoff from \"../../robotoff\";\nimport { getQuestionSearchParams } from \"../../components/QuestionFilter/useFilterSearch\";\n\nexport const ADDITIONAL_INFO_TRANSLATION = {\n  brands: \"brands\",\n  ingredientsText: \"ingredients\",\n  countriesTags: \"countries\",\n  categories: \"categories\",\n  labels_tags: \"labels\",\n  quantity: \"quantity\",\n};\n\n// src looks like: \"https://static.openfoodfacts.org/images/products/004/900/053/2258/1.jpg\"\nexport const getImageId = (src) => {\n  const file = src.split(\"/\").at(-1);\n  const imageId = file.replace(/\\..+$/, \"\");\n  return Number(imageId);\n};\n\nexport const getImagesUrls = (images, barcode) => {\n  if (!images || !barcode) {\n    return [];\n  }\n  const formattedCode = offService.getFormatedBarcode(barcode);\n  const rootImageUrl = offService.getImageUrl(formattedCode);\n  return Object.keys(images)\n    .filter((key) => !isNaN(Number.parseInt(key)))\n    .map((key) => `${rootImageUrl}/${key}.jpg`);\n};\n\n// Other questions fetching\nexport const useOtherQuestions = (code, insight_id) => {\n  const [otherQuestionsState, setOtherQuestionsState] = React.useState({\n    questions: [],\n    isLoading: true,\n  });\n  React.useEffect(() => {\n    if (!code) {\n      return;\n    }\n    let isStillValid = true;\n    setOtherQuestionsState({\n      questions: [],\n      isLoading: true,\n    });\n    robotoff.questionsByProductCode(code).then((result) => {\n      if (!isStillValid) {\n        return;\n      }\n      const newQuestions = result?.data?.questions ?? [];\n      setOtherQuestionsState({\n        questions: newQuestions.filter((q) => q?.insight_id !== insight_id),\n        isLoading: false,\n      });\n    });\n    return () => {\n      isStillValid = false;\n    };\n  }, [code, insight_id]);\n\n  const [pendingAnswers, setPendingAnswers] = React.useState({});\n  return [\n    otherQuestionsState,\n    setOtherQuestionsState,\n    pendingAnswers,\n    setPendingAnswers,\n  ];\n};\n\nexport const useFlagImage = (barcode) => {\n  const [flagged, setFlagged] = React.useState([]);\n\n  const flagImage = React.useCallback(\n    (src) => {\n      const imgid = getImageId(src);\n      externalApi.addImageFlag({ barcode, imgid, url: src });\n      setFlagged((prev) => [...prev, imgid]);\n    },\n    [barcode]\n  );\n\n  const deleteFlagImage = React.useCallback(\n    (src) => {\n      const imgid = getImageId(src);\n      externalApi.removeImageFlag({ barcode, imgid });\n\n      setFlagged((prev) =>\n        prev.filter((flaggedImageId) => flaggedImageId !== imgid)\n      );\n    },\n    [barcode]\n  );\n\n  // Reset flags\n  React.useEffect(() => {\n    setFlagged([]);\n  }, [barcode]);\n\n  return [flagged, flagImage, deleteFlagImage];\n};\n\nexport const useProductData = (barcode) => {\n  const [productData, setProductData] = React.useState({});\n\n  // product data fetching\n  React.useEffect(() => {\n    if (!barcode) {\n      return;\n    }\n    let isValid = true;\n    setProductData({\n      code: barcode,\n      isLoading: true,\n    });\n\n    offService\n      .getProduct(barcode)\n      .then((result) => {\n        if (!isValid) {\n          return;\n        }\n        const product = result.data.product;\n        setProductData({\n          code: barcode,\n          productName: product?.product_name || \"\",\n          brands: product?.brands || \"?\",\n          ingredientsText: product?.ingredients_text || \"?\",\n          countriesTags: product?.countries_tags\n            ? `${product?.countries_tags?.join?.(\", \")}.`\n            : \"?\",\n          images: product?.images || {},\n          categories: product?.categories || \"?\",\n          labels_tags: product?.labels_tags?.join?.(\", \") || \"?\",\n          quantity: product?.quantity || \"?\",\n          isLoading: false,\n        });\n      })\n      .catch(() => {});\n    return () => {\n      isValid = false;\n    };\n  }, [barcode]);\n\n  return productData;\n};\n\nexport const getFullSizeImage = (src) => {\n  if (!src) {\n    return \"https://static.openfoodfacts.org/images/image-placeholder.png\";\n  }\n  const needsFull = /\\/[a-z_]+.[0-9]*.400.jpg$/gm.test(src);\n\n  if (needsFull) {\n    return src.replace(\"400.jpg\", \"full.jpg\");\n  }\n  return src.replace(\"400.jpg\", \"jpg\");\n};\n\nexport const getValueTagQuestionsURL = (filterState, question) => {\n  if (\n    question !== null &&\n    question &&\n    question?.insight_id !== NO_QUESTION_LEFT &&\n    question?.value_tag\n  ) {\n    const urlParams = new URLSearchParams();\n    urlParams.append(\"type\", question.insight_type);\n    urlParams.append(\"value_tag\", reformatValueTag(question?.value_tag));\n    return `/questions?${getQuestionSearchParams({\n      ...filterState,\n      insightType: question.insight_type,\n      valueTag: question?.value_tag,\n    })}`;\n  }\n  return null;\n};\n\nexport const getValueTagExamplesURL = (question) => {\n  if (\n    question !== null &&\n    question?.insight_id !== NO_QUESTION_LEFT &&\n    question?.value_tag &&\n    question.insight_type\n  ) {\n    return `${OFF_URL}/${question.insight_type}/${reformatValueTag(\n      question?.value_tag\n    )}`;\n  }\n  return \"\";\n};\n\nexport const getNbOfQuestionForValue = async (filterState) => {\n  const { data: dataFetched } = await robotoff.questions(filterState, 1);\n  return dataFetched.count;\n};\n"],"names":["props","src","srcFull","zoomIn","imageProps","other","apiRef","React","rotation","setRotation","isOpen","setIsOpen","theme","useTheme","fullScreen","useMediaQuery","breakpoints","down","style","position","alt","onClick","sx","color","backgroundColor","alpha","palette","secondary","main","bottom","right","open","onClose","maxWidth","p","display","flexDirection","xs","md","limitToBounds","ref","maxHeight","transform","transformOrigin","fullWidth","variant","prev","startIcon","current","resetTransform","endIcon","externalApi","addImageFlag","barcode","imgid","url","axios","mode","catch","console","log","removeImageFlag","data","mapValueToAction","CORRECT_INSIGHT","WRONG_INSIGHT","SKIPPED_INSIGHT","useMatomoTrackAnswerQuestion","trackEvent","useMatomo","answerQuestions","answer","category","action","annotateLogo","game","type","value","number","name","SHORTCUT_LOCALISATION","en","yes","no","skip","fr","fetchData","insightId","robotoff","response","source_image","logo_id","bounding_box","logoData","logos","getCroppedLogoUrl","debugResponse","debugData","sourceImage","off","logoUrl","setLogoUrl","isValid","then","useKeyboardShortcuts","question","answerQuestion","lang","shortcuts","getLang","handleShortCut","event","preventShortCut","target","tagName","toUpperCase","insight_id","key","window","addEventListener","removeEventListener","productData","t","useTranslation","matomoTrackAnswerQuestions","filterState","useSelector","filterStateSelector","isLoading","isLoadingSelector","dispatch","useDispatch","answerQuestionAction","valueTagQuestionsURL","getValueTagQuestionsURL","valueTagExamplesURL","getValueTagExamplesURL","isDesktop","up","nbOfPotentialQuestion","setNbOfPotentialQuestions","valueTag","insight_type","value_tag","validRequest","getNbOfQuestionForValue","insightType","nbQuestions","usePotentialQuestionNumber","Box","width","textAlign","py","m","Typography","CircularProgress","Stack","direction","alignItems","spacing","Button","size","updateFilter","DEFAULT_FILTER_STATE","flexGrow","flexBasis","flexShrink","Badge","marginY","badgeContent","paddingX","component","Link","to","ref_image_url","height","marginLeft","href","rel","mb","Divider","marginBottom","ZoomableImage","Z","source_image_url","getFullSizeImage","productName","justifyContent","Delete","Done","autoFocus","setIsLoading","setDebugResponse","resume","json_details","openDetails","setOpenDetails","handleChange","panelId","newState","e","croppedUrl","mt","px","my","Accordion","onChange","expanded","AccordionSummary","expandIcon","ExpandMore","id","AccordionDetails","LinearProgress","Table","TableBody","border","th","verticalAlign","pr","TableRow","TableCell","scope","predictor","Date","timestamp","toLocaleString","JSON","stringify","isDevMode","getIsDevMode","getHideImages","hideImages","setHideImages","getPageCustomization","questionPage","devCustomization","useFlagImage","flagged","flagImage","deleteFlagImage","useOtherQuestions","otherQuestionsState","setOtherQuestionsState","pendingAnswers","setPendingAnswers","NO_QUESTION_LEFT","splitCountries","string","Boolean","countries","split","allCountries","i","length","capitaliseName","offService","Visibility","minWidth","Edit","ml","questions","map","otherQuestion","filter","q","disabled","includes","FormControlLabel","control","Checkbox","checked","localSettings","localSettingsKeys","label","labelPlacement","images","Grid","container","rowSpacing","getImagesUrls","item","loading","getImageId","Tooltip","title","IconButton","Flag","OutlinedFlag","Object","keys","ADDITIONAL_INFO_TRANSLATION","infoKey","showDebug","numberOfQuestionsAvailable","numberOfQuestionsAvailableSelector","answered","answeredQuestionsSelector","loginAlreadyProposed","setLoginAlreadyProposed","loginModalOpen","setLoginModalOpen","isLoggedIn","LoginContext","displayedAnswers","validationValue","slice","Math","max","isPending","mr","CancelScheduleSend","fontSize","CancelOutlined","CheckCircleOutline","Dialog","DialogTitle","DialogContent","DialogContentText","DialogActions","QuestionsConsumer","remainingQuestionNb","nbOfQuestionsInBufferSelector","nextPage","nextPageSelector","nextImages","nextImagesSelector","fetchQuestions","currentQuestionSelector","useProductData","QuestionFilter","margin","Questions","fallback","store","brands","ingredientsText","countriesTags","categories","labels_tags","quantity","imageId","at","replace","Number","formattedCode","rootImageUrl","isNaN","parseInt","code","isStillValid","result","newQuestions","setFlagged","flaggedImageId","setProductData","product","product_name","ingredients_text","countries_tags","join","test","urlParams","URLSearchParams","append","reformatValueTag","getQuestionSearchParams","OFF_URL","dataFetched","count"],"sourceRoot":""}