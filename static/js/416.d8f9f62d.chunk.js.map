{"version":3,"file":"static/js/416.d8f9f62d.chunk.js","mappings":"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","sources":["components/QuestionFilter/LabelFilter.tsx","components/QuestionFilter/const.js","components/QuestionFilter/index.js","pages/questions/QuestionFilter.jsx","components/QuestionFilter/useFilterSearch.js","hooks/useUrlParams.js","pages/questions/store.js","robotoff.ts","utils.js"],"sourcesContent":["import * as React from \"react\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport TextField from \"@mui/material/TextField\";\nimport { getLang } from \"../../localeStorageManager\";\nimport axios from \"axios\";\nimport { URL_ORIGINE } from \"../../const\";\n\n// Otherwise fallback on english\nconst AVAILABLE_OPTIONS = [\"de\", \"es\", \"fr\", \"hr\", \"nl\", \"sv\"];\n\nconst cleanName = (name) =>\n  name\n    .normalize(\"NFD\")\n    .replace(/[\\u0300-\\u036f]/g, \"\")\n    .toLowerCase()\n    .replace(/[^0-9a-z]/gi, \" \");\n\nconst useOptionFetching = (insightType, inputValue, lang) => {\n  const [options, setOptions] = React.useState([]);\n  const fetchedKeysRef = React.useRef({});\n\n  React.useEffect(() => {\n    setOptions([]);\n    fetchedKeysRef.current = {};\n  }, [insightType]);\n\n  React.useEffect(() => {\n    let keyToFetch = inputValue.toLowerCase();\n    if (/^[a-z][a-z]:/.test(keyToFetch)) {\n      keyToFetch = keyToFetch.slice(3);\n    }\n    keyToFetch = keyToFetch.replace(/[^0-9a-z]/gi, \"-\");\n\n    [\n      keyToFetch.slice(0, 1),\n      keyToFetch.slice(0, 2),\n      keyToFetch.slice(0, 3),\n    ].forEach((key) => {\n      if (key.length > 0 && !fetchedKeysRef.current[key]) {\n        fetchedKeysRef.current[key] = true;\n        axios\n          .get(\n            `${URL_ORIGINE}/data/${\n              AVAILABLE_OPTIONS.includes(lang) ? lang : \"en\"\n            }/${insightType}/${key}.json`\n          )\n          .then(({ data }) => {\n            setOptions((prevOptions) => {\n              const existingKeys = prevOptions.map((x) => x.key);\n              return [\n                ...prevOptions,\n                ...data\n                  .filter(({ key }) => !existingKeys.includes(key))\n                  .map((option) => ({\n                    ...option,\n                    cleanName: cleanName(option.name),\n                  })),\n              ];\n            });\n          })\n          .catch(() => {});\n      }\n    });\n  }, [inputValue, insightType, lang]);\n\n  return options;\n};\n\nconst LabelFilter = (props) => {\n  const { showKey, onChange, value, insightType, fullWidth, ...other } = props;\n\n  const [innerValue, setInnerValue] = React.useState(null);\n  const [inputValue, setInputValue] = React.useState(\"\");\n\n  const lang = getLang();\n\n  const options = useOptionFetching(insightType, inputValue, lang);\n\n  React.useEffect(() => {\n    setInnerValue((prev) => {\n      if (typeof prev === \"object\" && prev?.key === value) {\n        return prev;\n      }\n      const solution = options.find((option) => option.key === value);\n\n      if (solution) {\n        return solution;\n      }\n      return value;\n    });\n  }, [value, options]);\n\n  return (\n    <Autocomplete\n      fullWidth={fullWidth}\n      freeSolo\n      onChange={(_, newValue) => {\n        setInnerValue(newValue);\n        onChange(newValue?.key ?? newValue);\n      }}\n      onInputChange={(e, newInputValue, reason) => {\n        setInputValue(newInputValue);\n      }}\n      onBlur={() => {\n        const isSelectedValue =\n          typeof innerValue === \"string\"\n            ? innerValue === inputValue\n            : innerValue.name === inputValue;\n        if (!isSelectedValue) {\n          setInnerValue(inputValue);\n          onChange(inputValue);\n        }\n      }}\n      inputValue={inputValue}\n      value={innerValue}\n      options={options}\n      getOptionLabel={(option) => option?.name ?? option}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          {...other}\n          helperText={\n            showKey &&\n            (innerValue?.key ||\n              (innerValue !== \"\" &&\n                innerValue !== null &&\n                `⚠️ unknown: \"${innerValue}\"`))\n          }\n        />\n      )}\n      filterOptions={(options, state) => {\n        return options.filter((option) =>\n          option?.cleanName.includes(cleanName(state.inputValue))\n        );\n      }}\n    />\n  );\n};\n\nexport default LabelFilter;\n","export const DEFAULT_FILTER_STATE = {\n  insightType: \"brand\",\n  brandFilter: \"\",\n  countryFilter: \"\",\n  sortByPopularity: true,\n  valueTag: \"\",\n  campaign: \"\",\n};\n\nexport const campagnes = [\"agribalyse-category\"];\n\nexport const countryNames = [\n  \"\",\n  \"en:australia\",\n  \"en:belgium\",\n  \"en:canada\",\n  \"en:croatia\",\n  \"en:denmark\",\n  \"en:france\",\n  \"en:germany\",\n  \"en:italy\",\n  \"en:netherlands\",\n  \"en:portugal\",\n  \"en:spain\",\n  \"en:sweden\",\n  \"en:switzerland\",\n  \"en:united-kingdom\",\n  \"en:united-states\",\n];\n\nexport const insightTypesNames = {\n  label: \"label\",\n  category: \"category\",\n  brand: \"brand\",\n  product_weight: \"product_weight\",\n  packaging: \"packaging\",\n};\n\nexport const key2urlParam = {\n  valueTag: \"value_tag\",\n  brandFilter: \"brand\",\n  countryFilter: \"country\",\n  insightType: \"type\",\n  sortByPopularity: \"sorted\",\n  campaign: \"campaign\",\n};\n\nconst urlParams2Key = {};\nObject.entries(key2urlParam).forEach(([key, value]) => {\n  urlParams2Key[value] = key;\n});\n\nexport { urlParams2Key };\n","import { QuestionFilter } from \"../../pages/questions/QuestionFilter\";\nexport { getQuestionSearchParams } from \"./useFilterSearch\";\n\nexport default QuestionFilter;\n","import * as React from \"react\";\n\nimport TextField from \"@mui/material/TextField\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport Button from \"@mui/material/Button\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport FormControl from \"@mui/material/FormControl\";\nimport FormLabel from \"@mui/material/FormLabel\";\nimport Stack from \"@mui/material/Stack\";\nimport Chip from \"@mui/material/Chip\";\nimport RadioGroup from \"@mui/material/RadioGroup\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport Box from \"@mui/material/Box\";\nimport Radio from \"@mui/material/Radio\";\nimport Dialog from \"@mui/material/Dialog\";\nimport { useTheme } from \"@mui/material/styles\";\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\nimport { DialogActions, DialogContent } from \"@mui/material\";\n\nimport IconButton from \"@mui/material/IconButton\";\nimport EditIcon from \"@mui/icons-material/Edit\";\nimport StarIcon from \"@mui/icons-material/Star\";\nimport StarBorderIcon from \"@mui/icons-material/StarBorder\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { useFilterSearch } from \"../../components/QuestionFilter/useFilterSearch\";\nimport LabelFilter from \"../../components/QuestionFilter/LabelFilter\";\nimport brands from \"../../assets/brands.json\";\nimport {\n  countryNames,\n  insightTypesNames,\n  campagnes,\n} from \"../../components/QuestionFilter/const\";\nimport { capitaliseName } from \"../../utils\";\nimport { filterStateSelector, updateFilter } from \"./store\";\n\nconst getChipsParams = (filterState, setFilterState, t) =>\n  [\n    {\n      key: \"valueTag\",\n      display: !!filterState?.valueTag,\n      label: `${t(\"questions.filters.short_label.value\")}: ${\n        filterState?.valueTag\n      }`,\n      onDelete: () => {\n        setFilterState({ valueTag: \"\" });\n      },\n    },\n\n    {\n      key: \"countryFilter\",\n      display: !!filterState?.countryFilter,\n      label: `${t(\"questions.filters.short_label.country\")}: ${capitaliseName(\n        filterState?.countryFilter\n      )}`,\n      onDelete: () => {\n        setFilterState({ countryFilter: \"\" });\n      },\n    },\n\n    {\n      key: \"brandFilter\",\n      display: !!filterState?.brandFilter,\n      label: `${t(\"questions.filters.short_label.brand\")}: ${\n        filterState?.brandFilter\n      }`,\n      onDelete: () => {\n        setFilterState({ brandFilter: \"\" });\n      },\n    },\n    {\n      key: \"sortByPopularity\",\n      display: !!filterState?.sortByPopularity,\n      label: t(\"questions.filters.short_label.popularity\"),\n      onDelete: () => {\n        setFilterState({\n          sortByPopularity: false,\n        });\n      },\n    },\n    {\n      key: \"campaign\",\n      display: !!filterState?.campaign,\n      label: `${t(\"questions.filters.short_label.campaign\")}: ${\n        filterState?.campaign\n      }`,\n      onDelete: () => {\n        setFilterState((state) => ({\n          ...state,\n          campaign: \"\",\n        }));\n      },\n    },\n  ].filter((item) => item.display);\n\nexport const QuestionFilter = () => {\n  const { t } = useTranslation();\n  const theme = useTheme();\n  const isDesktop = useMediaQuery(theme.breakpoints.up(\"md\"));\n\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  const dispatch = useDispatch();\n  const filterState = useSelector(filterStateSelector);\n\n  const [exposedParameters, setSearchParams, isFavorite, toggleFavorite] =\n    useFilterSearch();\n\n  if (\n    Object.keys(exposedParameters).some(\n      (key) => exposedParameters[key] !== filterState[key]\n    )\n  ) {\n    dispatch(updateFilter(exposedParameters));\n  }\n\n  const updateSearchParams = (newParams) => {\n    setSearchParams(newParams);\n    dispatch(updateFilter(newParams));\n  };\n  // internal values\n  const [innerInsightType, setInnerInsightType] = React.useState(\n    filterState?.insightType\n  );\n  const [innerValueTag, setInnerValueTag] = React.useState(\n    filterState?.valueTag\n  );\n  const [innerCountryFilter, setInnerCountryFilter] = React.useState(\n    filterState?.countryFilter\n  );\n  const [innerBrandFilter, setInnerBrandFilter] = React.useState(\n    filterState?.brandFilter\n  );\n  const [innerSortByPopularity, setInnerSortByPopularity] = React.useState(\n    filterState?.sortByPopularity\n  );\n  const [innerCampaign, setInnerCampaign] = React.useState(\n    filterState?.campaign\n  );\n\n  const resetFilter = () => {\n    setInnerInsightType(filterState?.insightType);\n    setInnerValueTag(filterState?.valueTag);\n    setInnerCountryFilter(filterState?.countryFilter);\n    setInnerBrandFilter(filterState?.brandFilter);\n    setInnerSortByPopularity(filterState?.sortByPopularity);\n    setInnerCampaign(filterState?.campaign);\n    setIsOpen(false);\n  };\n\n  const applyFilter = () => {\n    updateSearchParams({\n      insightType: innerInsightType,\n      valueTag: innerValueTag,\n      countryFilter: innerCountryFilter,\n      brandFilter: innerBrandFilter,\n      sortByPopularity: innerSortByPopularity,\n      campaign: innerCampaign,\n    });\n\n    setIsOpen(false);\n  };\n\n  React.useEffect(() => {\n    // Update internal filter state if `filterState` get updated\n    setInnerInsightType((prevInsightType) =>\n      prevInsightType !== filterState.insightType\n        ? filterState.insightType\n        : prevInsightType\n    );\n    setInnerValueTag((prevInnerValueTag) =>\n      prevInnerValueTag !== filterState?.valueTag\n        ? filterState?.valueTag\n        : prevInnerValueTag\n    );\n    setInnerCountryFilter((prevInnerCountryFilter) =>\n      prevInnerCountryFilter !== filterState?.countryFilter\n        ? filterState?.countryFilter\n        : prevInnerCountryFilter\n    );\n    setInnerBrandFilter((prevInnerBrandFilter) =>\n      prevInnerBrandFilter !== filterState?.brandFilter\n        ? filterState?.brandFilter\n        : prevInnerBrandFilter\n    );\n    setInnerSortByPopularity((prevInnerSortByPopularity) =>\n      prevInnerSortByPopularity !== filterState?.sortByPopularity\n        ? filterState?.sortByPopularity\n        : prevInnerSortByPopularity\n    );\n    setInnerCampaign((prevInnerInnerCampaign) =>\n      prevInnerInnerCampaign !== filterState?.campaign\n        ? filterState?.campaign\n        : prevInnerInnerCampaign\n    );\n  }, [filterState]);\n\n  const handleInnerInsightTypeChange = (event) => {\n    const newValue = event.target.value;\n    setInnerInsightType(newValue);\n    // setFilterState((state) => ({ ...state, insightType: newValue }));\n  };\n\n  const handleInsightTypeChange = (event) => {\n    const newValue = event.target.value;\n    updateSearchParams({ insightType: newValue });\n  };\n\n  const chipsParams = getChipsParams(\n    filterState,\n    (newFilterState) => updateSearchParams(newFilterState),\n    t\n  );\n\n  return (\n    <Box>\n      {/* Chip indicating the current state of the filtering */}\n      <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n        <TextField\n          select\n          size=\"small\"\n          sx={{\n            width: {\n              xs: \"130px\",\n              md: \"auto\",\n            },\n          }}\n          value={filterState?.insightType}\n          onChange={handleInsightTypeChange}\n          label={t(`questions.insightTypeLabel`)}\n        >\n          {Object.keys(insightTypesNames).map((insightType) => (\n            <MenuItem key={insightType} value={insightType}>\n              {t(`questions.${insightType}`)}{\" \"}\n            </MenuItem>\n          ))}\n        </TextField>\n\n        <Box sx={{ overflow: \"hidden\" }}>\n          {isDesktop ? (\n            chipsParams.map(({ key, display, label, onDelete }) => (\n              <Chip key={key} label={label} onDelete={onDelete} />\n            ))\n          ) : (\n            <Chip\n              label={t(\"questions.filters.active_filter_number\", {\n                count: chipsParams.length,\n              })}\n            />\n          )}\n        </Box>\n\n        <IconButton\n          onClick={() => {\n            toggleFavorite();\n          }}\n          color=\"primary\"\n        >\n          {isFavorite ? <StarIcon /> : <StarBorderIcon />}\n        </IconButton>\n        <IconButton\n          onClick={() => setIsOpen(true)}\n          color=\"primary\"\n          sx={{ display: { xs: \"inherit\", md: \"none\" } }}\n        >\n          <EditIcon />\n        </IconButton>\n      </Stack>\n\n      {/* The filter form itself */}\n      <Dialog\n        open={isOpen}\n        onClose={() => setIsOpen(false)}\n        PaperProps={{\n          sx: { p: 2 },\n        }}\n      >\n        <DialogContent>\n          <Stack spacing={2} sx={{ display: isOpen ? undefined : \"none\" }}>\n            <FormControl>\n              <FormLabel id=\"insightType-radio-buttons\">\n                {t(\"questions.filters.long_label.type\")}\n              </FormLabel>\n              <RadioGroup\n                row={isDesktop}\n                aria-labelledby=\"insightType-radio-buttons\"\n                name=\"insightTypes\"\n                value={innerInsightType}\n                onChange={handleInnerInsightTypeChange}\n              >\n                {Object.keys(insightTypesNames).map((insightType) => (\n                  <FormControlLabel\n                    key={insightType}\n                    value={insightType}\n                    control={<Radio />}\n                    label={t(`questions.${insightType}`)}\n                    labelPlacement={isDesktop ? \"top\" : \"end\"}\n                  />\n                ))}\n              </RadioGroup>\n            </FormControl>\n\n            {[\"category\", \"label\"].includes(innerInsightType) ? (\n              <LabelFilter\n                value={innerValueTag}\n                onChange={setInnerValueTag}\n                insightType={innerInsightType}\n                label={t(\"questions.filters.long_label.value\")}\n                placeholder={t(\"questions.filters.placeholders.value\")}\n                size=\"small\"\n              />\n            ) : (\n              <TextField\n                value={innerValueTag}\n                onChange={(event) => {\n                  setInnerValueTag(event.target.value);\n                }}\n                label={t(\"questions.filters.long_label.value\")}\n                placeholder={t(\"questions.filters.placeholders.value\")}\n                size=\"small\"\n              />\n            )}\n\n            <Autocomplete\n              id=\"free-solo-demo\"\n              value={innerCountryFilter}\n              onChange={(event, newValue) => setInnerCountryFilter(newValue)}\n              options={countryNames}\n              getOptionLabel={(countryTag) => capitaliseName(countryTag)}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  label={t(\"questions.filters.long_label.country\")}\n                  size=\"small\"\n                />\n              )}\n            />\n\n            <Autocomplete\n              id=\"free-solo-demo\"\n              freeSolo\n              value={innerBrandFilter}\n              onChange={(event, newValue) => setInnerBrandFilter(newValue)}\n              options={brands}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  label={t(\"questions.filters.long_label.brand\")}\n                  placeholder={t(\"questions.filters.placeholders.brand\")}\n                  size=\"small\"\n                />\n              )}\n            />\n\n            <TextField\n              select\n              value={innerCampaign}\n              onChange={(event) => {\n                setInnerCampaign(event.target.value);\n              }}\n              label={t(\"questions.filters.long_label.campaign\")}\n              placeholder={t(\"questions.filters.placeholders.campaign\")}\n              size=\"small\"\n            >\n              {campagnes.map((val) => (\n                <MenuItem key={val} value={val}>\n                  {val}\n                </MenuItem>\n              ))}\n            </TextField>\n\n            <FormControlLabel\n              value={innerSortByPopularity}\n              onChange={(event) =>\n                setInnerSortByPopularity(event.target.checked)\n              }\n              control={<Checkbox />}\n              label={t(\"questions.filters.long_label.popularity\")}\n              labelPlacement=\"end\"\n            />\n          </Stack>\n        </DialogContent>\n        <DialogActions>\n          <Stack direction=\"row\" justifyContent=\"flex-end\" spacing={1}>\n            <Button variant=\"outlined\" onClick={resetFilter}>\n              {t(\"questions.filters.actions.cancel\")}\n            </Button>\n            <Button variant=\"contained\" onClick={applyFilter}>\n              {t(\"questions.filters.actions.apply\")}\n            </Button>\n          </Stack>\n        </DialogActions>\n      </Dialog>\n\n      {/* Edit filter on desktop only */}\n      <Box sx={{ textAlign: \"center\", display: { xs: \"none\", md: \"inherit\" } }}>\n        <Button\n          variant=\"contained\"\n          onClick={() => setIsOpen(true)}\n          startIcon={<EditIcon />}\n          size=\"small\"\n        >\n          {t(\"questions.filters.actions.edit\")}\n        </Button>\n      </Box>\n    </Box>\n  );\n};\n","import * as React from \"react\";\n\nimport { key2urlParam, urlParams2Key, DEFAULT_FILTER_STATE } from \"./const\";\nimport { localFavorites } from \"../../localeStorageManager\";\nimport logo from \"../../assets/logo.png\";\nimport useUrlParams, {\n  convertObjectParamsToUrlParams,\n} from \"../../hooks/useUrlParams\";\n\nconst convertParamsToUrl = (params) => {\n  const rep = {};\n  Object.keys(params).forEach((key) => {\n    rep[key2urlParam[key]] = params[key];\n  });\n  return rep;\n};\n\nconst convertUrlToParams = (params) => {\n  const rep = {};\n  Object.keys(params).forEach((key) => {\n    rep[urlParams2Key[key]] = params[key];\n  });\n  return rep;\n};\n\nconst DEFAULT_FILTER_URL_PARAMS = convertParamsToUrl(DEFAULT_FILTER_STATE);\n\nexport const getQuestionSearchParams = (params) =>\n  convertObjectParamsToUrlParams(convertParamsToUrl(params));\n\nexport function useFilterSearch() {\n  // Search filter is a bit special because it's the first API we created and url_params are reused in other applications.\n  // To avoid breaking deep link, we maintainthe previouse search params in url, but use more detailed on in the app\n  // This hook do the translation\n\n  const [urlSearchParams, setUrlSearchParams] = useUrlParams(\n    DEFAULT_FILTER_URL_PARAMS,\n    { valueTag: [\"value_tag\", \"value\"] }\n  );\n  const exposedParameters = React.useMemo(\n    () => convertUrlToParams(urlSearchParams),\n    [urlSearchParams]\n  );\n\n  const [isFavorite, setIsFavorite] = React.useState(\n    localFavorites.isSaved(exposedParameters)\n  );\n\n  const setSearchParams = React.useCallback(\n    (modifier) => {\n      let newExposedParameters;\n      if (typeof modifier === \"function\") {\n        newExposedParameters = modifier(exposedParameters);\n      } else {\n        newExposedParameters = modifier;\n      }\n\n      const isDifferent = Object.keys(DEFAULT_FILTER_STATE).some(\n        (key) => newExposedParameters[key] !== exposedParameters[key]\n      );\n\n      if (!isDifferent) {\n        return;\n      }\n\n      setIsFavorite(localFavorites.isSaved(newExposedParameters));\n      setUrlSearchParams(convertParamsToUrl(newExposedParameters));\n    },\n    [exposedParameters, setUrlSearchParams]\n  );\n\n  const toggleFavorite = React.useCallback(\n    (imageSrc = logo, title = \"\") => {\n      const isSaved = localFavorites.isSaved(exposedParameters);\n\n      if (isSaved) {\n        localFavorites.removeQuestion(exposedParameters);\n      } else {\n        localFavorites.addQuestion(exposedParameters, logo, title);\n      }\n\n      setIsFavorite(!isSaved);\n    },\n    [exposedParameters]\n  );\n\n  return [exposedParameters, setSearchParams, isFavorite, toggleFavorite];\n}\n","import * as React from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nexport const setUrlParams = (parameters, defaultParameters) => {\n  const newRelativePathQuery = `${\n    window.location.pathname\n  }?${convertObjectParamsToUrlParams(parameters, defaultParameters)}`;\n  window.history.pushState(null, \"\", newRelativePathQuery);\n};\n\nexport const getDefaultizedUrlParams = (defaultParameters, synonyms = {}) => {\n  const parameters = { ...defaultParameters };\n  const urlParams = new URLSearchParams(window.location.search);\n  Object.keys(defaultParameters).forEach((key) => {\n    const value = urlParams.get(key);\n    if (value !== null && JSON.stringify(defaultParameters[key]) !== value) {\n      if (value === \"true\" || value === \"false\") {\n        parameters[key] = JSON.parse(value);\n      } else {\n        parameters[key] = value;\n      }\n    }\n  });\n\n  Object.entries(synonyms).forEach(([valueKey, synonymKeys]) => {\n    const toTest =\n      typeof synonymKeys === \"string\" ? [synonymKeys] : synonymKeys;\n    toTest.forEach((synonymKey) => {\n      const value = urlParams.get(synonymKey);\n      if (\n        value !== null &&\n        JSON.stringify(defaultParameters[valueKey]) !== value\n      ) {\n        if (value === \"true\" || value === \"false\") {\n          parameters[valueKey] = JSON.parse(value);\n        } else {\n          parameters[valueKey] = value;\n        }\n      }\n    });\n  });\n\n  return parameters;\n};\n\nexport const convertObjectParamsToUrlParams = (\n  parameters,\n  defaultParameters\n) => {\n  const urlParams = new URLSearchParams(window.location.search);\n\n  Object.keys(parameters).forEach((key) => {\n    if (JSON.stringify(parameters[key]) !== urlParams.get(key)) {\n      urlParams.set(key, parameters[key]);\n    }\n  });\n\n  if (defaultParameters !== undefined) {\n    Object.keys(defaultParameters).forEach((key) => {\n      if (\n        urlParams.get(key) !== null &&\n        defaultParameters[key] === parameters[key]\n      ) {\n        // Already in default. We can remove it\n        urlParams.delete(key);\n      }\n    });\n  }\n\n  return urlParams.toString();\n};\n\n/**\n * Hook that works as useState to keep in sync with URL query params\n * @param {object} defaultParams The object to get from the URL\n * @param {object} synonyms The synonmys under the form { valueKeyA: ['synonymA1', 'synsonymA2'], valueKeyB: 'synsonlymB1' }.\n * If the urls containg a paramter named `synonymA1` it will be used to override valueKeyA value.\n * @returns [state, setState]\n */\nconst useUrlParams = (defaultParams, synonyms) => {\n  const [parameters, setParameters] = React.useState(() =>\n    getDefaultizedUrlParams(defaultParams)\n  );\n  const { search } = useLocation();\n\n  React.useEffect(() => {\n    setParameters((prevParams) => {\n      const newParams = getDefaultizedUrlParams(defaultParams, synonyms);\n\n      const shouldUpdate = Object.keys(defaultParams).some(\n        (key) => newParams[key] !== prevParams[key]\n      );\n      return shouldUpdate ? newParams : prevParams;\n    });\n  }, [search, defaultParams, synonyms]);\n\n  const updateParameters = React.useCallback(\n    (modifier) => {\n      let newParams;\n      if (typeof modifier === \"function\") {\n        newParams = modifier(parameters);\n      } else {\n        newParams = modifier;\n      }\n      setParameters(newParams);\n      setUrlParams(newParams, defaultParams);\n    },\n    [parameters, defaultParams]\n  );\n  return [parameters, updateParameters];\n};\n\nexport default useUrlParams;\n","import {\n  createSlice,\n  createAsyncThunk,\n  configureStore,\n  createSelector,\n} from \"@reduxjs/toolkit\";\n\nimport { IS_DEVELOPMENT_MODE } from \"../../const\";\nimport robotoff from \"../../robotoff\";\n\nimport { sleep } from \"../../utils\";\n\nconst PAGE_SIZE = 25;\n\nexport const fetchQuestions = createAsyncThunk(\n  \"fetchQuestions\",\n  async (_, thunkApi) => {\n    const state = thunkApi.getState();\n    const { data } = await robotoff.questions(\n      state.questionBuffer.filterState,\n      PAGE_SIZE,\n      state.questionBuffer.page\n    );\n    return { page: state.questionBuffer.page, pages_size: PAGE_SIZE, ...data };\n  }\n);\n\nexport const answerQuestion = createAsyncThunk(\n  \"answerQuestion\",\n  async ({ insight_id, value }) => {\n    if (IS_DEVELOPMENT_MODE) {\n      return await sleep(500);\n    }\n    return await robotoff.annotate(insight_id, value);\n  }\n);\n\nexport const questionBuffer = createSlice({\n  name: \"questions\",\n  initialState: {\n    page: 1,\n    questions: {},\n    remainingQuestions: [],\n    answeredQuestions: [],\n    fetchCompletted: false,\n    numberOfQuestionsAvailable: 0,\n    filterState: {\n      insightType: \"brand\",\n      brandFilter: \"\",\n      countryFilter: \"\",\n      sortByPopularity: false,\n      valueTag: \"\",\n      predictor: \"\",\n    },\n  },\n  reducers: {\n    updateFilter: (state, action) => {\n      if (\n        Object.keys(action.payload).every(\n          (key) => state.filterState[key] === action.payload[key]\n        )\n      ) {\n        // Early return if new state is similar to the current one\n        return;\n      }\n      // Update filter and reset fetched data\n      state.filterState = { ...state.filterState, ...action.payload };\n      state.page = 1;\n      state.remainingQuestions = [];\n      state.fetchCompletted = false;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchQuestions.fulfilled, (state, { payload }) => {\n        const { questions, count, page, pages_size } = payload;\n\n        const newQuestions = questions.filter(\n          (question) => state.questions[question.insight_id] === undefined\n        );\n\n        const questionsToAdd = newQuestions.filter(\n          (question) => question.source_image_url\n        );\n\n        const newQuestionsObject = {};\n        questionsToAdd.forEach((q) => {\n          newQuestionsObject[q.insight_id] = q;\n        });\n\n        const questionsFromNextPage = Math.max(0, count - page * pages_size); // The number of questions starting from page+1\n\n        const numberOfQuestionsAvailable =\n          questionsFromNextPage + //Questions from unseen pages\n          state.remainingQuestions.length + //Questions from previouse pages\n          questionsToAdd.length; // QUestions added with this fetch\n\n        const newPage =\n          questionsFromNextPage > 0 && questionsToAdd.length === 0\n            ? state.page + 1\n            : state.page;\n\n        return {\n          ...state,\n          page: newPage,\n          remainingQuestions: [\n            ...state.remainingQuestions,\n            ...questionsToAdd.map((question) => question.insight_id),\n          ],\n          questions: { ...state.questions, ...newQuestionsObject },\n          fetchCompletted: count < state.page * PAGE_SIZE,\n          numberOfQuestionsAvailable,\n        };\n      })\n      .addCase(answerQuestion.pending, (state, action) => {\n        const { insight_id, value } = action.meta.arg;\n\n        return {\n          ...state,\n          remainingQuestions: state.remainingQuestions.filter(\n            (question_id) => question_id !== insight_id\n          ),\n          answeredQuestions: [...state.answeredQuestions, insight_id],\n          numberOfQuestionsAvailable: state.numberOfQuestionsAvailable - 1,\n          questions: {\n            ...state.questions,\n            [insight_id]: {\n              ...state.questions[insight_id],\n              validationValue: value,\n              status: \"pending\",\n            },\n          },\n        };\n      })\n      .addCase(answerQuestion.fulfilled, (state, action) => {\n        const { insight_id } = action.meta.arg;\n        return {\n          ...state,\n          questions: {\n            ...state.questions,\n            [insight_id]: {\n              ...state.questions[insight_id],\n              status: \"validated\",\n            },\n          },\n        };\n      })\n      .addCase(answerQuestion.rejected, (state, action) => {\n        const { insight_id } = action.meta.arg;\n        return {\n          ...state,\n          questions: {\n            ...state.questions,\n            [insight_id]: {\n              ...state.questions[insight_id],\n              status: \"failled\",\n            },\n          },\n        };\n      });\n  },\n});\n\nexport const { updateFilter } = questionBuffer.actions;\nexport default configureStore({\n  reducer: {\n    questionBuffer: questionBuffer.reducer,\n  },\n});\n\nconst getSubState = (state) => state.questionBuffer;\n\nexport const nbOfQuestionsInBufferSelector = createSelector(\n  getSubState,\n  (bufferState) => bufferState.remainingQuestions.length\n);\n\nexport const nextPageSelector = createSelector(\n  getSubState,\n  (bufferState) => bufferState.remainingQuestions.length\n);\n\nexport const currentQuestionSelector = createSelector(\n  getSubState,\n  (bufferState) =>\n    bufferState.questions[bufferState.remainingQuestions[0]] ?? null\n);\n\nexport const questionsToAnswerSelector = createSelector(\n  getSubState,\n  (bufferState) =>\n    bufferState.remainingQuestions.map(\n      (insight_id) => bufferState.questions[insight_id]\n    )\n);\n\nexport const filterStateSelector = createSelector(\n  getSubState,\n  (bufferState) => bufferState.filterState\n);\n\nexport const answeredQuestionsSelector = createSelector(\n  getSubState,\n  (bufferState) =>\n    bufferState.answeredQuestions.map(\n      (insight_id) => bufferState.questions[insight_id]\n    )\n);\n\nexport const nextImagesSelector = createSelector(getSubState, (bufferState) =>\n  bufferState.remainingQuestions\n    .slice(1, 5)\n    .map((insight_id) => bufferState.questions[insight_id]?.source_image_url)\n    .filter((image_url) => !!image_url)\n);\n\nexport const isLoadingSelector = createSelector(\n  getSubState,\n  (bufferState) => !bufferState.fetchCompletted\n);\n\nexport const numberOfQuestionsAvailableSelector = createSelector(\n  getSubState,\n  (bufferState) => bufferState.numberOfQuestionsAvailable\n);\n","import axios from \"axios\";\nimport { ROBOTOFF_API_URL, IS_DEVELOPMENT_MODE } from \"./const\";\nimport { getLang } from \"./localeStorageManager\";\nimport { reformatValueTag, removeEmptyKeys } from \"./utils\";\n\nexport interface QuestionInterface {\n  barcode: string;\n  insight_id: string;\n  insight_type: string;\n  question: string;\n  source_image_url?: string;\n  type: string;\n  value: string;\n  value_tag: string;\n}\n\ntype GetQuestionsResponse = { count: number; questions: QuestionInterface[] };\n\nconst robotoff = {\n  annotate(insightId: string, annotation) {\n    if (IS_DEVELOPMENT_MODE) {\n      console.log(\n        `Annotated, ${ROBOTOFF_API_URL}/insights/annotate`,\n        new URLSearchParams(\n          `insight_id=${insightId}&annotation=${annotation}&update=1`\n        ),\n        { withCredentials: true }\n      );\n    } else {\n      return axios.post(\n        `${ROBOTOFF_API_URL}/insights/annotate`,\n        new URLSearchParams(\n          `insight_id=${insightId}&annotation=${annotation}&update=1`\n        ),\n        { withCredentials: true }\n      );\n    }\n  },\n\n  questionsByProductCode(code: string) {\n    return axios\n      .get<GetQuestionsResponse>(`${ROBOTOFF_API_URL}/questions/${code}`)\n      .then((result) => {\n        let questions = result.data.questions;\n        result.data.questions = questions.filter(\n          (question) => question.source_image_url\n        );\n        return result;\n      });\n  },\n\n  questions(filterState, count = 10, page = 1) {\n    const {\n      insightType,\n      brandFilter,\n      valueTag,\n      countryFilter,\n      sortByPopularity,\n      campaign,\n      predictor,\n    } = filterState;\n\n    const searchParams = {\n      insight_types: insightType,\n      value_tag: valueTag,\n      brands: reformatValueTag(brandFilter),\n      country: countryFilter !== \"en:world\" ? countryFilter : null,\n      campaign,\n      predictor,\n    };\n\n    const lang = getLang();\n\n    return axios.get<GetQuestionsResponse>(\n      `${ROBOTOFF_API_URL}/questions/${\n        sortByPopularity ? \"popular\" : \"random\"\n      }`,\n      {\n        params: removeEmptyKeys({\n          ...searchParams,\n          lang,\n          count,\n          page,\n        }),\n      }\n    );\n  },\n\n  insightDetail(insight_id) {\n    return axios.get(`${ROBOTOFF_API_URL}/insights/detail/${insight_id}`);\n  },\n\n  loadLogo(logoId) {\n    return axios.get(`${ROBOTOFF_API_URL}/images/logos/${logoId}`);\n  },\n\n  updateLogo(logoId, value, type) {\n    return axios.put(\n      `${ROBOTOFF_API_URL}/images/logos/${logoId}`,\n      removeEmptyKeys({\n        value,\n        type,\n      }),\n      { withCredentials: true }\n    );\n  },\n\n  searchLogos(barcode, value, type, count = 25, random = false) {\n    const formattedValue = [\"label\", \"category\"].includes(type)\n      ? { taxonomy_value: value }\n      : { value };\n\n    return axios.get(`${ROBOTOFF_API_URL}/images/logos/search/`, {\n      params: removeEmptyKeys({\n        barcode,\n        type,\n        count,\n        random,\n        ...formattedValue,\n      }),\n    });\n  },\n\n  getLogoAnnotations(logoId, index, count = 25) {\n    const url =\n      logoId.length > 0\n        ? `${ROBOTOFF_API_URL}/ann/search/${logoId}`\n        : `${ROBOTOFF_API_URL}/ann/search`;\n    return axios.get(url, {\n      params: removeEmptyKeys({\n        index,\n        count,\n      }),\n    });\n  },\n\n  annotateLogos(annotations) {\n    return axios.post(\n      `${ROBOTOFF_API_URL}/images/logos/annotate`,\n      removeEmptyKeys({\n        annotations,\n      }),\n      { withCredentials: true }\n    );\n  },\n\n  getInsights(\n    barcode = \"\",\n    insightType = \"\",\n    valueTag = \"\",\n    annotation = \"\",\n    page = 1,\n    count = 25\n  ) {\n    let annotated;\n    if (annotation.length && annotation === \"not_annotated\") {\n      annotated = \"0\";\n      annotation = \"\";\n    }\n    return axios.get(`${ROBOTOFF_API_URL}/insights`, {\n      params: removeEmptyKeys({\n        barcode,\n        insight_types: insightType,\n        value_tag: valueTag,\n        annotation,\n        page,\n        annotated,\n        count,\n      }),\n    });\n  },\n\n  getUserStatistics(username) {\n    return axios.get(`${ROBOTOFF_API_URL}/users/statistics/${username}`);\n  },\n\n  getCroppedImageUrl(imageUrl, boundingBox) {\n    const [y_min, x_min, y_max, x_max] = boundingBox;\n    return `${ROBOTOFF_API_URL}/images/crop?image_url=${imageUrl}&y_min=${y_min}&x_min=${x_min}&y_max=${y_max}&x_max=${x_max}`;\n  },\n\n  getLogosImages(logoIds) {\n    return axios.get(\n      `${ROBOTOFF_API_URL}/images/logos?logo_ids=${logoIds.join(\",\")}`\n    );\n  },\n\n  getNutritionValueFromImage(language, imageOcrUrl, images) {\n    var ocrUrlSubString = imageOcrUrl.split(\"/\");\n\n    // setting a default value, assuming length of ocrUrlSubString is 7,\n    // and product code is 8 characters long\n    var productCodeForOcrUrl = ocrUrlSubString[5];\n\n    let nutritionKeyWithLangSuffix = `nutrition_${language}`;\n\n    for (var key in images) {\n      if (nutritionKeyWithLangSuffix === key) {\n        var imgid = images[nutritionKeyWithLangSuffix].imgid;\n      }\n    }\n\n    if (ocrUrlSubString.length > 7) {\n      // the productCode is 13 characters long\n      productCodeForOcrUrl =\n        ocrUrlSubString[5] +\n        \"/\" +\n        ocrUrlSubString[6] +\n        \"/\" +\n        ocrUrlSubString[7] +\n        \"/\" +\n        ocrUrlSubString[8];\n    }\n\n    return axios.get(\n      `${ROBOTOFF_API_URL}/predict/nutrient?ocr_url=https://images.openfoodfacts.org/images/products/${productCodeForOcrUrl}/${imgid}.json`\n    );\n  },\n\n  getUnansweredValues(params: {\n    type: \"label\" | \"brand\" | \"category\";\n    country;\n    campaign;\n    page?: number;\n    count?: number;\n  }) {\n    let page = params.page ?? 1;\n    page = page >= 1 ? page : 1;\n\n    return axios.get(\n      `${ROBOTOFF_API_URL}/questions/unanswered/?${Object.keys({\n        ...params,\n        page,\n      })\n        .filter((key) => params[key] !== undefined)\n        .map((key) => `${key}=${params[key]}`)\n        .join(\"&\")}`\n    );\n  },\n};\n\nexport default robotoff;\n","const reformatTagMapping = {\n  \" \": \"-\",\n  \"'\": \"-\",\n  \"&\": \"\",\n  à: \"a\",\n  â: \"a\",\n  ä: \"a\",\n  é: \"e\",\n  è: \"e\",\n  ê: \"e\",\n  ë: \"e\",\n  î: \"i\",\n  ï: \"i\",\n  ô: \"o\",\n  ö: \"o\",\n  û: \"u\",\n  ù: \"u\",\n  ü: \"u\",\n};\n\nexport const reformatValueTag = (value) => {\n  if (!value) {\n    return value;\n  }\n  let output = value.trim().toLowerCase();\n  for (const [search, replace] of Object.entries(reformatTagMapping)) {\n    output = output.replace(new RegExp(search, \"g\"), replace);\n  }\n  output = output.replace(/-{2,}/g, \"-\");\n  return output;\n};\n\nexport const removeEmptyKeys = (obj) => {\n  Object.keys(obj).forEach(\n    (key) => (obj[key] == null || obj[key] === \"\") && delete obj[key]\n  );\n  return obj;\n};\n\n//  Only for testing purpose\nexport function sleep(ms) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\n//to provide capitalised country name; en:france => France\nexport const capitaliseName = (string) => {\n  if (!string) {\n    return string;\n  }\n  let name = string.slice(3);\n  return name.charAt(0).toUpperCase() + name.slice(1);\n};\n"],"names":["AVAILABLE_OPTIONS","cleanName","name","normalize","replace","toLowerCase","props","showKey","onChange","value","insightType","fullWidth","other","React","innerValue","setInnerValue","inputValue","setInputValue","lang","getLang","options","setOptions","fetchedKeysRef","current","keyToFetch","test","slice","forEach","key","length","axios","URL_ORIGINE","includes","then","data","prevOptions","existingKeys","map","x","filter","option","catch","useOptionFetching","prev","solution","find","freeSolo","_","newValue","onInputChange","e","newInputValue","reason","onBlur","getOptionLabel","renderInput","params","helperText","filterOptions","state","DEFAULT_FILTER_STATE","brandFilter","countryFilter","sortByPopularity","valueTag","campaign","campagnes","countryNames","insightTypesNames","label","category","brand","product_weight","packaging","key2urlParam","urlParams2Key","Object","entries","t","useTranslation","theme","useTheme","isDesktop","useMediaQuery","breakpoints","up","isOpen","setIsOpen","dispatch","useDispatch","filterState","useSelector","filterStateSelector","useFilterSearch","exposedParameters","setSearchParams","isFavorite","toggleFavorite","keys","some","updateFilter","updateSearchParams","newParams","innerInsightType","setInnerInsightType","innerValueTag","setInnerValueTag","innerCountryFilter","setInnerCountryFilter","innerBrandFilter","setInnerBrandFilter","innerSortByPopularity","setInnerSortByPopularity","innerCampaign","setInnerCampaign","prevInsightType","prevInnerValueTag","prevInnerCountryFilter","prevInnerBrandFilter","prevInnerSortByPopularity","prevInnerInnerCampaign","chipsParams","setFilterState","display","onDelete","capitaliseName","item","getChipsParams","newFilterState","Box","Stack","direction","spacing","alignItems","TextField","select","size","sx","width","xs","md","event","target","MenuItem","overflow","Chip","count","IconButton","onClick","color","Star","StarBorder","Edit","Dialog","open","onClose","PaperProps","p","DialogContent","undefined","FormControl","FormLabel","id","RadioGroup","row","FormControlLabel","control","Radio","labelPlacement","LabelFilter","placeholder","Autocomplete","countryTag","brands","val","checked","Checkbox","DialogActions","justifyContent","Button","variant","textAlign","startIcon","convertParamsToUrl","rep","DEFAULT_FILTER_URL_PARAMS","getQuestionSearchParams","convertObjectParamsToUrlParams","useUrlParams","urlSearchParams","setUrlSearchParams","convertUrlToParams","localFavorites","setIsFavorite","modifier","newExposedParameters","title","isSaved","logo","getDefaultizedUrlParams","defaultParameters","synonyms","parameters","urlParams","URLSearchParams","window","location","search","get","JSON","stringify","parse","valueKey","synonymKeys","synonymKey","set","delete","toString","defaultParams","setParameters","useLocation","prevParams","updateParameters","newRelativePathQuery","pathname","history","pushState","setUrlParams","fetchQuestions","createAsyncThunk","thunkApi","getState","robotoff","questionBuffer","page","pages_size","answerQuestion","insight_id","IS_DEVELOPMENT_MODE","sleep","createSlice","initialState","questions","remainingQuestions","answeredQuestions","fetchCompletted","numberOfQuestionsAvailable","predictor","reducers","action","payload","every","extraReducers","builder","addCase","fulfilled","questionsToAdd","question","source_image_url","newQuestionsObject","q","questionsFromNextPage","Math","max","newPage","pending","meta","arg","question_id","validationValue","status","rejected","actions","configureStore","reducer","getSubState","nbOfQuestionsInBufferSelector","createSelector","bufferState","nextPageSelector","currentQuestionSelector","questionsToAnswerSelector","answeredQuestionsSelector","nextImagesSelector","image_url","isLoadingSelector","numberOfQuestionsAvailableSelector","annotate","insightId","annotation","ROBOTOFF_API_URL","withCredentials","console","log","questionsByProductCode","code","result","searchParams","insight_types","value_tag","reformatValueTag","country","removeEmptyKeys","insightDetail","loadLogo","logoId","updateLogo","type","searchLogos","barcode","random","formattedValue","taxonomy_value","getLogoAnnotations","index","url","annotateLogos","annotations","getInsights","annotated","getUserStatistics","username","getCroppedImageUrl","imageUrl","boundingBox","y_min","x_min","y_max","x_max","getLogosImages","logoIds","join","getNutritionValueFromImage","language","imageOcrUrl","images","ocrUrlSubString","split","productCodeForOcrUrl","nutritionKeyWithLangSuffix","imgid","getUnansweredValues","reformatTagMapping","à","â","ä","é","è","ê","ë","î","ï","ô","ö","û","ù","ü","output","trim","RegExp","obj","ms","Promise","resolve","setTimeout","string","charAt","toUpperCase"],"sourceRoot":""}