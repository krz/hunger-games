{"version":3,"file":"static/js/915.7c9d507e.chunk.js","mappings":"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","sources":["../node_modules/@mui/base/AutocompleteUnstyled/useAutocomplete.js","../node_modules/@mui/material/internal/svg-icons/Close.js","../node_modules/@mui/material/Autocomplete/autocompleteClasses.js","../node_modules/@mui/material/Autocomplete/Autocomplete.js","../node_modules/@mui/utils/esm/usePreviousProps.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\n/* eslint-disable no-constant-condition */\nimport * as React from 'react';\nimport { unstable_setRef as setRef, unstable_useEventCallback as useEventCallback, unstable_useControlled as useControlled, unstable_useId as useId, usePreviousProps } from '@mui/utils';\n\n// https://stackoverflow.com/questions/990904/remove-accents-diacritics-in-a-string-in-javascript\n// Give up on IE11 support for this feature\nfunction stripDiacritics(string) {\n  return typeof string.normalize !== 'undefined' ? string.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '') : string;\n}\nexport function createFilterOptions(config = {}) {\n  const {\n    ignoreAccents = true,\n    ignoreCase = true,\n    limit,\n    matchFrom = 'any',\n    stringify,\n    trim = false\n  } = config;\n  return (options, {\n    inputValue,\n    getOptionLabel\n  }) => {\n    let input = trim ? inputValue.trim() : inputValue;\n    if (ignoreCase) {\n      input = input.toLowerCase();\n    }\n    if (ignoreAccents) {\n      input = stripDiacritics(input);\n    }\n    const filteredOptions = !input ? options : options.filter(option => {\n      let candidate = (stringify || getOptionLabel)(option);\n      if (ignoreCase) {\n        candidate = candidate.toLowerCase();\n      }\n      if (ignoreAccents) {\n        candidate = stripDiacritics(candidate);\n      }\n      return matchFrom === 'start' ? candidate.indexOf(input) === 0 : candidate.indexOf(input) > -1;\n    });\n    return typeof limit === 'number' ? filteredOptions.slice(0, limit) : filteredOptions;\n  };\n}\n\n// To replace with .findIndex() once we stop IE11 support.\nfunction findIndex(array, comp) {\n  for (let i = 0; i < array.length; i += 1) {\n    if (comp(array[i])) {\n      return i;\n    }\n  }\n  return -1;\n}\nconst defaultFilterOptions = createFilterOptions();\n\n// Number of options to jump in list box when `Page Up` and `Page Down` keys are used.\nconst pageSize = 5;\nconst defaultIsActiveElementInListbox = listboxRef => {\n  var _listboxRef$current$p;\n  return listboxRef.current !== null && ((_listboxRef$current$p = listboxRef.current.parentElement) == null ? void 0 : _listboxRef$current$p.contains(document.activeElement));\n};\nexport default function useAutocomplete(props) {\n  const {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    unstable_isActiveElementInListbox = defaultIsActiveElementInListbox,\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    unstable_classNamePrefix = 'Mui',\n    autoComplete = false,\n    autoHighlight = false,\n    autoSelect = false,\n    blurOnSelect = false,\n    clearOnBlur = !props.freeSolo,\n    clearOnEscape = false,\n    componentName = 'useAutocomplete',\n    defaultValue = props.multiple ? [] : null,\n    disableClearable = false,\n    disableCloseOnSelect = false,\n    disabled: disabledProp,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    filterOptions = defaultFilterOptions,\n    filterSelectedOptions = false,\n    freeSolo = false,\n    getOptionDisabled,\n    getOptionLabel: getOptionLabelProp = option => {\n      var _option$label;\n      return (_option$label = option.label) != null ? _option$label : option;\n    },\n    groupBy,\n    handleHomeEndKeys = !props.freeSolo,\n    id: idProp,\n    includeInputInList = false,\n    inputValue: inputValueProp,\n    isOptionEqualToValue = (option, value) => option === value,\n    multiple = false,\n    onChange,\n    onClose,\n    onHighlightChange,\n    onInputChange,\n    onOpen,\n    open: openProp,\n    openOnFocus = false,\n    options,\n    readOnly = false,\n    selectOnFocus = !props.freeSolo,\n    value: valueProp\n  } = props;\n  const id = useId(idProp);\n  let getOptionLabel = getOptionLabelProp;\n  getOptionLabel = option => {\n    const optionLabel = getOptionLabelProp(option);\n    if (typeof optionLabel !== 'string') {\n      if (process.env.NODE_ENV !== 'production') {\n        const erroneousReturn = optionLabel === undefined ? 'undefined' : `${typeof optionLabel} (${optionLabel})`;\n        console.error(`MUI: The \\`getOptionLabel\\` method of ${componentName} returned ${erroneousReturn} instead of a string for ${JSON.stringify(option)}.`);\n      }\n      return String(optionLabel);\n    }\n    return optionLabel;\n  };\n  const ignoreFocus = React.useRef(false);\n  const firstFocus = React.useRef(true);\n  const inputRef = React.useRef(null);\n  const listboxRef = React.useRef(null);\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [focusedTag, setFocusedTag] = React.useState(-1);\n  const defaultHighlighted = autoHighlight ? 0 : -1;\n  const highlightedIndexRef = React.useRef(defaultHighlighted);\n  const [value, setValueState] = useControlled({\n    controlled: valueProp,\n    default: defaultValue,\n    name: componentName\n  });\n  const [inputValue, setInputValueState] = useControlled({\n    controlled: inputValueProp,\n    default: '',\n    name: componentName,\n    state: 'inputValue'\n  });\n  const [focused, setFocused] = React.useState(false);\n  const resetInputValue = React.useCallback((event, newValue) => {\n    // retain current `inputValue` if new option isn't selected and `clearOnBlur` is false\n    // When `multiple` is enabled, `newValue` is an array of all selected items including the newly selected item\n    const isOptionSelected = multiple ? value.length < newValue.length : newValue !== null;\n    if (!isOptionSelected && !clearOnBlur) {\n      return;\n    }\n    let newInputValue;\n    if (multiple) {\n      newInputValue = '';\n    } else if (newValue == null) {\n      newInputValue = '';\n    } else {\n      const optionLabel = getOptionLabel(newValue);\n      newInputValue = typeof optionLabel === 'string' ? optionLabel : '';\n    }\n    if (inputValue === newInputValue) {\n      return;\n    }\n    setInputValueState(newInputValue);\n    if (onInputChange) {\n      onInputChange(event, newInputValue, 'reset');\n    }\n  }, [getOptionLabel, inputValue, multiple, onInputChange, setInputValueState, clearOnBlur, value]);\n  const [open, setOpenState] = useControlled({\n    controlled: openProp,\n    default: false,\n    name: componentName,\n    state: 'open'\n  });\n  const [inputPristine, setInputPristine] = React.useState(true);\n  const inputValueIsSelectedValue = !multiple && value != null && inputValue === getOptionLabel(value);\n  const popupOpen = open && !readOnly;\n  const filteredOptions = popupOpen ? filterOptions(options.filter(option => {\n    if (filterSelectedOptions && (multiple ? value : [value]).some(value2 => value2 !== null && isOptionEqualToValue(option, value2))) {\n      return false;\n    }\n    return true;\n  }),\n  // we use the empty string to manipulate `filterOptions` to not filter any options\n  // i.e. the filter predicate always returns true\n  {\n    inputValue: inputValueIsSelectedValue && inputPristine ? '' : inputValue,\n    getOptionLabel\n  }) : [];\n  const previousProps = usePreviousProps({\n    filteredOptions,\n    value\n  });\n  React.useEffect(() => {\n    const valueChange = value !== previousProps.value;\n    if (focused && !valueChange) {\n      return;\n    }\n\n    // Only reset the input's value when freeSolo if the component's value changes.\n    if (freeSolo && !valueChange) {\n      return;\n    }\n    resetInputValue(null, value);\n  }, [value, resetInputValue, focused, previousProps.value, freeSolo]);\n  const listboxAvailable = open && filteredOptions.length > 0 && !readOnly;\n  if (process.env.NODE_ENV !== 'production') {\n    if (value !== null && !freeSolo && options.length > 0) {\n      const missingValue = (multiple ? value : [value]).filter(value2 => !options.some(option => isOptionEqualToValue(option, value2)));\n      if (missingValue.length > 0) {\n        console.warn([`MUI: The value provided to ${componentName} is invalid.`, `None of the options match with \\`${missingValue.length > 1 ? JSON.stringify(missingValue) : JSON.stringify(missingValue[0])}\\`.`, 'You can use the `isOptionEqualToValue` prop to customize the equality test.'].join('\\n'));\n      }\n    }\n  }\n  const focusTag = useEventCallback(tagToFocus => {\n    if (tagToFocus === -1) {\n      inputRef.current.focus();\n    } else {\n      anchorEl.querySelector(`[data-tag-index=\"${tagToFocus}\"]`).focus();\n    }\n  });\n\n  // Ensure the focusedTag is never inconsistent\n  React.useEffect(() => {\n    if (multiple && focusedTag > value.length - 1) {\n      setFocusedTag(-1);\n      focusTag(-1);\n    }\n  }, [value, multiple, focusedTag, focusTag]);\n  function validOptionIndex(index, direction) {\n    if (!listboxRef.current || index === -1) {\n      return -1;\n    }\n    let nextFocus = index;\n    while (true) {\n      // Out of range\n      if (direction === 'next' && nextFocus === filteredOptions.length || direction === 'previous' && nextFocus === -1) {\n        return -1;\n      }\n      const option = listboxRef.current.querySelector(`[data-option-index=\"${nextFocus}\"]`);\n\n      // Same logic as MenuList.js\n      const nextFocusDisabled = disabledItemsFocusable ? false : !option || option.disabled || option.getAttribute('aria-disabled') === 'true';\n      if (option && !option.hasAttribute('tabindex') || nextFocusDisabled) {\n        // Move to the next element.\n        nextFocus += direction === 'next' ? 1 : -1;\n      } else {\n        return nextFocus;\n      }\n    }\n  }\n  const setHighlightedIndex = useEventCallback(({\n    event,\n    index,\n    reason = 'auto'\n  }) => {\n    highlightedIndexRef.current = index;\n\n    // does the index exist?\n    if (index === -1) {\n      inputRef.current.removeAttribute('aria-activedescendant');\n    } else {\n      inputRef.current.setAttribute('aria-activedescendant', `${id}-option-${index}`);\n    }\n    if (onHighlightChange) {\n      onHighlightChange(event, index === -1 ? null : filteredOptions[index], reason);\n    }\n    if (!listboxRef.current) {\n      return;\n    }\n    const prev = listboxRef.current.querySelector(`[role=\"option\"].${unstable_classNamePrefix}-focused`);\n    if (prev) {\n      prev.classList.remove(`${unstable_classNamePrefix}-focused`);\n      prev.classList.remove(`${unstable_classNamePrefix}-focusVisible`);\n    }\n    const listboxNode = listboxRef.current.parentElement.querySelector('[role=\"listbox\"]');\n\n    // \"No results\"\n    if (!listboxNode) {\n      return;\n    }\n    if (index === -1) {\n      listboxNode.scrollTop = 0;\n      return;\n    }\n    const option = listboxRef.current.querySelector(`[data-option-index=\"${index}\"]`);\n    if (!option) {\n      return;\n    }\n    option.classList.add(`${unstable_classNamePrefix}-focused`);\n    if (reason === 'keyboard') {\n      option.classList.add(`${unstable_classNamePrefix}-focusVisible`);\n    }\n\n    // Scroll active descendant into view.\n    // Logic copied from https://www.w3.org/WAI/ARIA/apg/example-index/combobox/js/select-only.js\n    //\n    // Consider this API instead once it has a better browser support:\n    // .scrollIntoView({ scrollMode: 'if-needed', block: 'nearest' });\n    if (listboxNode.scrollHeight > listboxNode.clientHeight && reason !== 'mouse') {\n      const element = option;\n      const scrollBottom = listboxNode.clientHeight + listboxNode.scrollTop;\n      const elementBottom = element.offsetTop + element.offsetHeight;\n      if (elementBottom > scrollBottom) {\n        listboxNode.scrollTop = elementBottom - listboxNode.clientHeight;\n      } else if (element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0) < listboxNode.scrollTop) {\n        listboxNode.scrollTop = element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0);\n      }\n    }\n  });\n  const changeHighlightedIndex = useEventCallback(({\n    event,\n    diff,\n    direction = 'next',\n    reason = 'auto'\n  }) => {\n    if (!popupOpen) {\n      return;\n    }\n    const getNextIndex = () => {\n      const maxIndex = filteredOptions.length - 1;\n      if (diff === 'reset') {\n        return defaultHighlighted;\n      }\n      if (diff === 'start') {\n        return 0;\n      }\n      if (diff === 'end') {\n        return maxIndex;\n      }\n      const newIndex = highlightedIndexRef.current + diff;\n      if (newIndex < 0) {\n        if (newIndex === -1 && includeInputInList) {\n          return -1;\n        }\n        if (disableListWrap && highlightedIndexRef.current !== -1 || Math.abs(diff) > 1) {\n          return 0;\n        }\n        return maxIndex;\n      }\n      if (newIndex > maxIndex) {\n        if (newIndex === maxIndex + 1 && includeInputInList) {\n          return -1;\n        }\n        if (disableListWrap || Math.abs(diff) > 1) {\n          return maxIndex;\n        }\n        return 0;\n      }\n      return newIndex;\n    };\n    const nextIndex = validOptionIndex(getNextIndex(), direction);\n    setHighlightedIndex({\n      index: nextIndex,\n      reason,\n      event\n    });\n\n    // Sync the content of the input with the highlighted option.\n    if (autoComplete && diff !== 'reset') {\n      if (nextIndex === -1) {\n        inputRef.current.value = inputValue;\n      } else {\n        const option = getOptionLabel(filteredOptions[nextIndex]);\n        inputRef.current.value = option;\n\n        // The portion of the selected suggestion that has not been typed by the user,\n        // a completion string, appears inline after the input cursor in the textbox.\n        const index = option.toLowerCase().indexOf(inputValue.toLowerCase());\n        if (index === 0 && inputValue.length > 0) {\n          inputRef.current.setSelectionRange(inputValue.length, option.length);\n        }\n      }\n    }\n  });\n  const checkHighlightedOptionExists = () => {\n    var _previousProps$value;\n    if (highlightedIndexRef.current !== -1 && previousProps.filteredOptions && previousProps.filteredOptions.length !== filteredOptions.length && (multiple ? previousProps.value.every((val, i) => getOptionLabel(value[i]) === getOptionLabel(val)) : getOptionLabel((_previousProps$value = previousProps.value) != null ? _previousProps$value : '') === getOptionLabel(value != null ? value : ''))) {\n      const previousHighlightedOption = previousProps.filteredOptions[highlightedIndexRef.current];\n      if (previousHighlightedOption) {\n        const previousHighlightedOptionExists = filteredOptions.some(option => {\n          return getOptionLabel(option) === getOptionLabel(previousHighlightedOption);\n        });\n        if (previousHighlightedOptionExists) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n  const syncHighlightedIndex = React.useCallback(() => {\n    if (!popupOpen) {\n      return;\n    }\n\n    // Check if the previously highlighted option still exists in the updated filtered options list and if the value hasn't changed\n    // If it exists and the value hasn't changed, return, otherwise continue execution\n    if (checkHighlightedOptionExists()) {\n      return;\n    }\n    const valueItem = multiple ? value[0] : value;\n\n    // The popup is empty, reset\n    if (filteredOptions.length === 0 || valueItem == null) {\n      changeHighlightedIndex({\n        diff: 'reset'\n      });\n      return;\n    }\n    if (!listboxRef.current) {\n      return;\n    }\n\n    // Synchronize the value with the highlighted index\n    if (valueItem != null) {\n      const currentOption = filteredOptions[highlightedIndexRef.current];\n\n      // Keep the current highlighted index if possible\n      if (multiple && currentOption && findIndex(value, val => isOptionEqualToValue(currentOption, val)) !== -1) {\n        return;\n      }\n      const itemIndex = findIndex(filteredOptions, optionItem => isOptionEqualToValue(optionItem, valueItem));\n      if (itemIndex === -1) {\n        changeHighlightedIndex({\n          diff: 'reset'\n        });\n      } else {\n        setHighlightedIndex({\n          index: itemIndex\n        });\n      }\n      return;\n    }\n\n    // Prevent the highlighted index to leak outside the boundaries.\n    if (highlightedIndexRef.current >= filteredOptions.length - 1) {\n      setHighlightedIndex({\n        index: filteredOptions.length - 1\n      });\n      return;\n    }\n\n    // Restore the focus to the previous index.\n    setHighlightedIndex({\n      index: highlightedIndexRef.current\n    });\n    // Ignore filteredOptions (and options, isOptionEqualToValue, getOptionLabel) not to break the scroll position\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n  // Only sync the highlighted index when the option switch between empty and not\n  filteredOptions.length,\n  // Don't sync the highlighted index with the value when multiple\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  multiple ? false : value, filterSelectedOptions, changeHighlightedIndex, setHighlightedIndex, popupOpen, inputValue, multiple]);\n  const handleListboxRef = useEventCallback(node => {\n    setRef(listboxRef, node);\n    if (!node) {\n      return;\n    }\n    syncHighlightedIndex();\n  });\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      if (!inputRef.current || inputRef.current.nodeName !== 'INPUT') {\n        if (inputRef.current && inputRef.current.nodeName === 'TEXTAREA') {\n          console.warn([`A textarea element was provided to ${componentName} where input was expected.`, `This is not a supported scenario but it may work under certain conditions.`, `A textarea keyboard navigation may conflict with Autocomplete controls (e.g. enter and arrow keys).`, `Make sure to test keyboard navigation and add custom event handlers if necessary.`].join('\\n'));\n        } else {\n          console.error([`MUI: Unable to find the input element. It was resolved to ${inputRef.current} while an HTMLInputElement was expected.`, `Instead, ${componentName} expects an input element.`, '', componentName === 'useAutocomplete' ? 'Make sure you have bound getInputProps correctly and that the normal ref/effect resolutions order is guaranteed.' : 'Make sure you have customized the input component correctly.'].join('\\n'));\n        }\n      }\n    }, [componentName]);\n  }\n  React.useEffect(() => {\n    syncHighlightedIndex();\n  }, [syncHighlightedIndex]);\n  const handleOpen = event => {\n    if (open) {\n      return;\n    }\n    setOpenState(true);\n    setInputPristine(true);\n    if (onOpen) {\n      onOpen(event);\n    }\n  };\n  const handleClose = (event, reason) => {\n    if (!open) {\n      return;\n    }\n    setOpenState(false);\n    if (onClose) {\n      onClose(event, reason);\n    }\n  };\n  const handleValue = (event, newValue, reason, details) => {\n    if (multiple) {\n      if (value.length === newValue.length && value.every((val, i) => val === newValue[i])) {\n        return;\n      }\n    } else if (value === newValue) {\n      return;\n    }\n    if (onChange) {\n      onChange(event, newValue, reason, details);\n    }\n    setValueState(newValue);\n  };\n  const isTouch = React.useRef(false);\n  const selectNewValue = (event, option, reasonProp = 'selectOption', origin = 'options') => {\n    let reason = reasonProp;\n    let newValue = option;\n    if (multiple) {\n      newValue = Array.isArray(value) ? value.slice() : [];\n      if (process.env.NODE_ENV !== 'production') {\n        const matches = newValue.filter(val => isOptionEqualToValue(option, val));\n        if (matches.length > 1) {\n          console.error([`MUI: The \\`isOptionEqualToValue\\` method of ${componentName} does not handle the arguments correctly.`, `The component expects a single value to match a given option but found ${matches.length} matches.`].join('\\n'));\n        }\n      }\n      const itemIndex = findIndex(newValue, valueItem => isOptionEqualToValue(option, valueItem));\n      if (itemIndex === -1) {\n        newValue.push(option);\n      } else if (origin !== 'freeSolo') {\n        newValue.splice(itemIndex, 1);\n        reason = 'removeOption';\n      }\n    }\n    resetInputValue(event, newValue);\n    handleValue(event, newValue, reason, {\n      option\n    });\n    if (!disableCloseOnSelect && (!event || !event.ctrlKey && !event.metaKey)) {\n      handleClose(event, reason);\n    }\n    if (blurOnSelect === true || blurOnSelect === 'touch' && isTouch.current || blurOnSelect === 'mouse' && !isTouch.current) {\n      inputRef.current.blur();\n    }\n  };\n  function validTagIndex(index, direction) {\n    if (index === -1) {\n      return -1;\n    }\n    let nextFocus = index;\n    while (true) {\n      // Out of range\n      if (direction === 'next' && nextFocus === value.length || direction === 'previous' && nextFocus === -1) {\n        return -1;\n      }\n      const option = anchorEl.querySelector(`[data-tag-index=\"${nextFocus}\"]`);\n\n      // Same logic as MenuList.js\n      if (!option || !option.hasAttribute('tabindex') || option.disabled || option.getAttribute('aria-disabled') === 'true') {\n        nextFocus += direction === 'next' ? 1 : -1;\n      } else {\n        return nextFocus;\n      }\n    }\n  }\n  const handleFocusTag = (event, direction) => {\n    if (!multiple) {\n      return;\n    }\n    if (inputValue === '') {\n      handleClose(event, 'toggleInput');\n    }\n    let nextTag = focusedTag;\n    if (focusedTag === -1) {\n      if (inputValue === '' && direction === 'previous') {\n        nextTag = value.length - 1;\n      }\n    } else {\n      nextTag += direction === 'next' ? 1 : -1;\n      if (nextTag < 0) {\n        nextTag = 0;\n      }\n      if (nextTag === value.length) {\n        nextTag = -1;\n      }\n    }\n    nextTag = validTagIndex(nextTag, direction);\n    setFocusedTag(nextTag);\n    focusTag(nextTag);\n  };\n  const handleClear = event => {\n    ignoreFocus.current = true;\n    setInputValueState('');\n    if (onInputChange) {\n      onInputChange(event, '', 'clear');\n    }\n    handleValue(event, multiple ? [] : null, 'clear');\n  };\n  const handleKeyDown = other => event => {\n    if (other.onKeyDown) {\n      other.onKeyDown(event);\n    }\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if (focusedTag !== -1 && ['ArrowLeft', 'ArrowRight'].indexOf(event.key) === -1) {\n      setFocusedTag(-1);\n      focusTag(-1);\n    }\n\n    // Wait until IME is settled.\n    if (event.which !== 229) {\n      switch (event.key) {\n        case 'Home':\n          if (popupOpen && handleHomeEndKeys) {\n            // Prevent scroll of the page\n            event.preventDefault();\n            changeHighlightedIndex({\n              diff: 'start',\n              direction: 'next',\n              reason: 'keyboard',\n              event\n            });\n          }\n          break;\n        case 'End':\n          if (popupOpen && handleHomeEndKeys) {\n            // Prevent scroll of the page\n            event.preventDefault();\n            changeHighlightedIndex({\n              diff: 'end',\n              direction: 'previous',\n              reason: 'keyboard',\n              event\n            });\n          }\n          break;\n        case 'PageUp':\n          // Prevent scroll of the page\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: -pageSize,\n            direction: 'previous',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'PageDown':\n          // Prevent scroll of the page\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: pageSize,\n            direction: 'next',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'ArrowDown':\n          // Prevent cursor move\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: 1,\n            direction: 'next',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'ArrowUp':\n          // Prevent cursor move\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: -1,\n            direction: 'previous',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'ArrowLeft':\n          handleFocusTag(event, 'previous');\n          break;\n        case 'ArrowRight':\n          handleFocusTag(event, 'next');\n          break;\n        case 'Enter':\n          if (highlightedIndexRef.current !== -1 && popupOpen) {\n            const option = filteredOptions[highlightedIndexRef.current];\n            const disabled = getOptionDisabled ? getOptionDisabled(option) : false;\n\n            // Avoid early form validation, let the end-users continue filling the form.\n            event.preventDefault();\n            if (disabled) {\n              return;\n            }\n            selectNewValue(event, option, 'selectOption');\n\n            // Move the selection to the end.\n            if (autoComplete) {\n              inputRef.current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);\n            }\n          } else if (freeSolo && inputValue !== '' && inputValueIsSelectedValue === false) {\n            if (multiple) {\n              // Allow people to add new values before they submit the form.\n              event.preventDefault();\n            }\n            selectNewValue(event, inputValue, 'createOption', 'freeSolo');\n          }\n          break;\n        case 'Escape':\n          if (popupOpen) {\n            // Avoid Opera to exit fullscreen mode.\n            event.preventDefault();\n            // Avoid the Modal to handle the event.\n            event.stopPropagation();\n            handleClose(event, 'escape');\n          } else if (clearOnEscape && (inputValue !== '' || multiple && value.length > 0)) {\n            // Avoid Opera to exit fullscreen mode.\n            event.preventDefault();\n            // Avoid the Modal to handle the event.\n            event.stopPropagation();\n            handleClear(event);\n          }\n          break;\n        case 'Backspace':\n          if (multiple && !readOnly && inputValue === '' && value.length > 0) {\n            const index = focusedTag === -1 ? value.length - 1 : focusedTag;\n            const newValue = value.slice();\n            newValue.splice(index, 1);\n            handleValue(event, newValue, 'removeOption', {\n              option: value[index]\n            });\n          }\n          break;\n        case 'Delete':\n          if (multiple && !readOnly && inputValue === '' && value.length > 0 && focusedTag !== -1) {\n            const index = focusedTag;\n            const newValue = value.slice();\n            newValue.splice(index, 1);\n            handleValue(event, newValue, 'removeOption', {\n              option: value[index]\n            });\n          }\n          break;\n        default:\n      }\n    }\n  };\n  const handleFocus = event => {\n    setFocused(true);\n    if (openOnFocus && !ignoreFocus.current) {\n      handleOpen(event);\n    }\n  };\n  const handleBlur = event => {\n    // Ignore the event when using the scrollbar with IE11\n    if (unstable_isActiveElementInListbox(listboxRef)) {\n      inputRef.current.focus();\n      return;\n    }\n    setFocused(false);\n    firstFocus.current = true;\n    ignoreFocus.current = false;\n    if (autoSelect && highlightedIndexRef.current !== -1 && popupOpen) {\n      selectNewValue(event, filteredOptions[highlightedIndexRef.current], 'blur');\n    } else if (autoSelect && freeSolo && inputValue !== '') {\n      selectNewValue(event, inputValue, 'blur', 'freeSolo');\n    } else if (clearOnBlur) {\n      resetInputValue(event, value);\n    }\n    handleClose(event, 'blur');\n  };\n  const handleInputChange = event => {\n    const newValue = event.target.value;\n    if (inputValue !== newValue) {\n      setInputValueState(newValue);\n      setInputPristine(false);\n      if (onInputChange) {\n        onInputChange(event, newValue, 'input');\n      }\n    }\n    if (newValue === '') {\n      if (!disableClearable && !multiple) {\n        handleValue(event, null, 'clear');\n      }\n    } else {\n      handleOpen(event);\n    }\n  };\n  const handleOptionMouseOver = event => {\n    setHighlightedIndex({\n      event,\n      index: Number(event.currentTarget.getAttribute('data-option-index')),\n      reason: 'mouse'\n    });\n  };\n  const handleOptionTouchStart = () => {\n    isTouch.current = true;\n  };\n  const handleOptionClick = event => {\n    const index = Number(event.currentTarget.getAttribute('data-option-index'));\n    selectNewValue(event, filteredOptions[index], 'selectOption');\n    isTouch.current = false;\n  };\n  const handleTagDelete = index => event => {\n    const newValue = value.slice();\n    newValue.splice(index, 1);\n    handleValue(event, newValue, 'removeOption', {\n      option: value[index]\n    });\n  };\n  const handlePopupIndicator = event => {\n    if (open) {\n      handleClose(event, 'toggleInput');\n    } else {\n      handleOpen(event);\n    }\n  };\n\n  // Prevent input blur when interacting with the combobox\n  const handleMouseDown = event => {\n    if (event.target.getAttribute('id') !== id) {\n      event.preventDefault();\n    }\n  };\n\n  // Focus the input when interacting with the combobox\n  const handleClick = () => {\n    inputRef.current.focus();\n    if (selectOnFocus && firstFocus.current && inputRef.current.selectionEnd - inputRef.current.selectionStart === 0) {\n      inputRef.current.select();\n    }\n    firstFocus.current = false;\n  };\n  const handleInputMouseDown = event => {\n    if (inputValue === '' || !open) {\n      handlePopupIndicator(event);\n    }\n  };\n  let dirty = freeSolo && inputValue.length > 0;\n  dirty = dirty || (multiple ? value.length > 0 : value !== null);\n  let groupedOptions = filteredOptions;\n  if (groupBy) {\n    // used to keep track of key and indexes in the result array\n    const indexBy = new Map();\n    let warn = false;\n    groupedOptions = filteredOptions.reduce((acc, option, index) => {\n      const group = groupBy(option);\n      if (acc.length > 0 && acc[acc.length - 1].group === group) {\n        acc[acc.length - 1].options.push(option);\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          if (indexBy.get(group) && !warn) {\n            console.warn(`MUI: The options provided combined with the \\`groupBy\\` method of ${componentName} returns duplicated headers.`, 'You can solve the issue by sorting the options with the output of `groupBy`.');\n            warn = true;\n          }\n          indexBy.set(group, true);\n        }\n        acc.push({\n          key: index,\n          index,\n          group,\n          options: [option]\n        });\n      }\n      return acc;\n    }, []);\n  }\n  if (disabledProp && focused) {\n    handleBlur();\n  }\n  return {\n    getRootProps: (other = {}) => _extends({\n      'aria-owns': listboxAvailable ? `${id}-listbox` : null\n    }, other, {\n      onKeyDown: handleKeyDown(other),\n      onMouseDown: handleMouseDown,\n      onClick: handleClick\n    }),\n    getInputLabelProps: () => ({\n      id: `${id}-label`,\n      htmlFor: id\n    }),\n    getInputProps: () => ({\n      id,\n      value: inputValue,\n      onBlur: handleBlur,\n      onFocus: handleFocus,\n      onChange: handleInputChange,\n      onMouseDown: handleInputMouseDown,\n      // if open then this is handled imperativeley so don't let react override\n      // only have an opinion about this when closed\n      'aria-activedescendant': popupOpen ? '' : null,\n      'aria-autocomplete': autoComplete ? 'both' : 'list',\n      'aria-controls': listboxAvailable ? `${id}-listbox` : undefined,\n      'aria-expanded': listboxAvailable,\n      // Disable browser's suggestion that might overlap with the popup.\n      // Handle autocomplete but not autofill.\n      autoComplete: 'off',\n      ref: inputRef,\n      autoCapitalize: 'none',\n      spellCheck: 'false',\n      role: 'combobox'\n    }),\n    getClearProps: () => ({\n      tabIndex: -1,\n      onClick: handleClear\n    }),\n    getPopupIndicatorProps: () => ({\n      tabIndex: -1,\n      onClick: handlePopupIndicator\n    }),\n    getTagProps: ({\n      index\n    }) => _extends({\n      key: index,\n      'data-tag-index': index,\n      tabIndex: -1\n    }, !readOnly && {\n      onDelete: handleTagDelete(index)\n    }),\n    getListboxProps: () => ({\n      role: 'listbox',\n      id: `${id}-listbox`,\n      'aria-labelledby': `${id}-label`,\n      ref: handleListboxRef,\n      onMouseDown: event => {\n        // Prevent blur\n        event.preventDefault();\n      }\n    }),\n    getOptionProps: ({\n      index,\n      option\n    }) => {\n      const selected = (multiple ? value : [value]).some(value2 => value2 != null && isOptionEqualToValue(option, value2));\n      const disabled = getOptionDisabled ? getOptionDisabled(option) : false;\n      return {\n        key: getOptionLabel(option),\n        tabIndex: -1,\n        role: 'option',\n        id: `${id}-option-${index}`,\n        onMouseOver: handleOptionMouseOver,\n        onClick: handleOptionClick,\n        onTouchStart: handleOptionTouchStart,\n        'data-option-index': index,\n        'aria-disabled': disabled,\n        'aria-selected': selected\n      };\n    },\n    id,\n    inputValue,\n    value,\n    dirty,\n    popupOpen,\n    focused: focused || focusedTag !== -1,\n    anchorEl,\n    setAnchorEl,\n    focusedTag,\n    groupedOptions\n  };\n}","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n\n/**\n * @ignore - internal component.\n *\n * Alias to `Clear`.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Close');","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getAutocompleteUtilityClass(slot) {\n  return generateUtilityClass('MuiAutocomplete', slot);\n}\nconst autocompleteClasses = generateUtilityClasses('MuiAutocomplete', ['root', 'fullWidth', 'focused', 'focusVisible', 'tag', 'tagSizeSmall', 'tagSizeMedium', 'hasPopupIcon', 'hasClearIcon', 'inputRoot', 'input', 'inputFocused', 'endAdornment', 'clearIndicator', 'popupIndicator', 'popupIndicatorOpen', 'popper', 'popperDisablePortal', 'paper', 'listbox', 'loading', 'noOptions', 'option', 'groupLabel', 'groupUl']);\nexport default autocompleteClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _ClearIcon, _ArrowDropDownIcon;\nconst _excluded = [\"autoComplete\", \"autoHighlight\", \"autoSelect\", \"blurOnSelect\", \"ChipProps\", \"className\", \"clearIcon\", \"clearOnBlur\", \"clearOnEscape\", \"clearText\", \"closeText\", \"componentsProps\", \"defaultValue\", \"disableClearable\", \"disableCloseOnSelect\", \"disabled\", \"disabledItemsFocusable\", \"disableListWrap\", \"disablePortal\", \"filterOptions\", \"filterSelectedOptions\", \"forcePopupIcon\", \"freeSolo\", \"fullWidth\", \"getLimitTagsText\", \"getOptionDisabled\", \"getOptionLabel\", \"isOptionEqualToValue\", \"groupBy\", \"handleHomeEndKeys\", \"id\", \"includeInputInList\", \"inputValue\", \"limitTags\", \"ListboxComponent\", \"ListboxProps\", \"loading\", \"loadingText\", \"multiple\", \"noOptionsText\", \"onChange\", \"onClose\", \"onHighlightChange\", \"onInputChange\", \"onOpen\", \"open\", \"openOnFocus\", \"openText\", \"options\", \"PaperComponent\", \"PopperComponent\", \"popupIcon\", \"readOnly\", \"renderGroup\", \"renderInput\", \"renderOption\", \"renderTags\", \"selectOnFocus\", \"size\", \"slotProps\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes, integerPropType } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses, useAutocomplete, createFilterOptions } from '@mui/base';\nimport { alpha } from '@mui/system';\nimport Popper from '../Popper';\nimport ListSubheader from '../ListSubheader';\nimport Paper from '../Paper';\nimport IconButton from '../IconButton';\nimport Chip from '../Chip';\nimport inputClasses from '../Input/inputClasses';\nimport inputBaseClasses from '../InputBase/inputBaseClasses';\nimport outlinedInputClasses from '../OutlinedInput/outlinedInputClasses';\nimport filledInputClasses from '../FilledInput/filledInputClasses';\nimport ClearIcon from '../internal/svg-icons/Close';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport useThemeProps from '../styles/useThemeProps';\nimport styled from '../styles/styled';\nimport autocompleteClasses, { getAutocompleteUtilityClass } from './autocompleteClasses';\nimport capitalize from '../utils/capitalize';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    disablePortal,\n    focused,\n    fullWidth,\n    hasClearIcon,\n    hasPopupIcon,\n    inputFocused,\n    popupOpen,\n    size\n  } = ownerState;\n  const slots = {\n    root: ['root', focused && 'focused', fullWidth && 'fullWidth', hasClearIcon && 'hasClearIcon', hasPopupIcon && 'hasPopupIcon'],\n    inputRoot: ['inputRoot'],\n    input: ['input', inputFocused && 'inputFocused'],\n    tag: ['tag', `tagSize${capitalize(size)}`],\n    endAdornment: ['endAdornment'],\n    clearIndicator: ['clearIndicator'],\n    popupIndicator: ['popupIndicator', popupOpen && 'popupIndicatorOpen'],\n    popper: ['popper', disablePortal && 'popperDisablePortal'],\n    paper: ['paper'],\n    listbox: ['listbox'],\n    loading: ['loading'],\n    noOptions: ['noOptions'],\n    option: ['option'],\n    groupLabel: ['groupLabel'],\n    groupUl: ['groupUl']\n  };\n  return composeClasses(slots, getAutocompleteUtilityClass, classes);\n};\nconst AutocompleteRoot = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    const {\n      fullWidth,\n      hasClearIcon,\n      hasPopupIcon,\n      inputFocused,\n      size\n    } = ownerState;\n    return [{\n      [`& .${autocompleteClasses.tag}`]: styles.tag\n    }, {\n      [`& .${autocompleteClasses.tag}`]: styles[`tagSize${capitalize(size)}`]\n    }, {\n      [`& .${autocompleteClasses.inputRoot}`]: styles.inputRoot\n    }, {\n      [`& .${autocompleteClasses.input}`]: styles.input\n    }, {\n      [`& .${autocompleteClasses.input}`]: inputFocused && styles.inputFocused\n    }, styles.root, fullWidth && styles.fullWidth, hasPopupIcon && styles.hasPopupIcon, hasClearIcon && styles.hasClearIcon];\n  }\n})(({\n  ownerState\n}) => _extends({\n  [`&.${autocompleteClasses.focused} .${autocompleteClasses.clearIndicator}`]: {\n    visibility: 'visible'\n  },\n  /* Avoid double tap issue on iOS */\n  '@media (pointer: fine)': {\n    [`&:hover .${autocompleteClasses.clearIndicator}`]: {\n      visibility: 'visible'\n    }\n  }\n}, ownerState.fullWidth && {\n  width: '100%'\n}, {\n  [`& .${autocompleteClasses.tag}`]: _extends({\n    margin: 3,\n    maxWidth: 'calc(100% - 6px)'\n  }, ownerState.size === 'small' && {\n    margin: 2,\n    maxWidth: 'calc(100% - 4px)'\n  }),\n  [`& .${autocompleteClasses.inputRoot}`]: {\n    flexWrap: 'wrap',\n    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 26 + 4\n    },\n    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 52 + 4\n    },\n    [`& .${autocompleteClasses.input}`]: {\n      width: 0,\n      minWidth: 30\n    }\n  },\n  [`& .${inputClasses.root}`]: {\n    paddingBottom: 1,\n    '& .MuiInput-input': {\n      padding: '4px 4px 4px 0px'\n    }\n  },\n  [`& .${inputClasses.root}.${inputBaseClasses.sizeSmall}`]: {\n    [`& .${inputClasses.input}`]: {\n      padding: '2px 4px 3px 0'\n    }\n  },\n  [`& .${outlinedInputClasses.root}`]: {\n    padding: 9,\n    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 26 + 4 + 9\n    },\n    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 52 + 4 + 9\n    },\n    [`& .${autocompleteClasses.input}`]: {\n      padding: '7.5px 4px 7.5px 6px'\n    },\n    [`& .${autocompleteClasses.endAdornment}`]: {\n      right: 9\n    }\n  },\n  [`& .${outlinedInputClasses.root}.${inputBaseClasses.sizeSmall}`]: {\n    // Don't specify paddingRight, as it overrides the default value set when there is only\n    // one of the popup or clear icon as the specificity is equal so the latter one wins\n    paddingTop: 6,\n    paddingBottom: 6,\n    paddingLeft: 6,\n    [`& .${autocompleteClasses.input}`]: {\n      padding: '2.5px 4px 2.5px 6px'\n    }\n  },\n  [`& .${filledInputClasses.root}`]: {\n    paddingTop: 19,\n    paddingLeft: 8,\n    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 26 + 4 + 9\n    },\n    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 52 + 4 + 9\n    },\n    [`& .${filledInputClasses.input}`]: {\n      padding: '7px 4px'\n    },\n    [`& .${autocompleteClasses.endAdornment}`]: {\n      right: 9\n    }\n  },\n  [`& .${filledInputClasses.root}.${inputBaseClasses.sizeSmall}`]: {\n    paddingBottom: 1,\n    [`& .${filledInputClasses.input}`]: {\n      padding: '2.5px 4px'\n    }\n  },\n  [`& .${inputBaseClasses.hiddenLabel}`]: {\n    paddingTop: 8\n  },\n  [`& .${autocompleteClasses.input}`]: _extends({\n    flexGrow: 1,\n    textOverflow: 'ellipsis',\n    opacity: 0\n  }, ownerState.inputFocused && {\n    opacity: 1\n  })\n}));\nconst AutocompleteEndAdornment = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'EndAdornment',\n  overridesResolver: (props, styles) => styles.endAdornment\n})({\n  // We use a position absolute to support wrapping tags.\n  position: 'absolute',\n  right: 0,\n  top: 'calc(50% - 14px)' // Center vertically\n});\n\nconst AutocompleteClearIndicator = styled(IconButton, {\n  name: 'MuiAutocomplete',\n  slot: 'ClearIndicator',\n  overridesResolver: (props, styles) => styles.clearIndicator\n})({\n  marginRight: -2,\n  padding: 4,\n  visibility: 'hidden'\n});\nconst AutocompletePopupIndicator = styled(IconButton, {\n  name: 'MuiAutocomplete',\n  slot: 'PopupIndicator',\n  overridesResolver: ({\n    ownerState\n  }, styles) => _extends({}, styles.popupIndicator, ownerState.popupOpen && styles.popupIndicatorOpen)\n})(({\n  ownerState\n}) => _extends({\n  padding: 2,\n  marginRight: -2\n}, ownerState.popupOpen && {\n  transform: 'rotate(180deg)'\n}));\nconst AutocompletePopper = styled(Popper, {\n  name: 'MuiAutocomplete',\n  slot: 'Popper',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [{\n      [`& .${autocompleteClasses.option}`]: styles.option\n    }, styles.popper, ownerState.disablePortal && styles.popperDisablePortal];\n  }\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  zIndex: (theme.vars || theme).zIndex.modal\n}, ownerState.disablePortal && {\n  position: 'absolute'\n}));\nconst AutocompletePaper = styled(Paper, {\n  name: 'MuiAutocomplete',\n  slot: 'Paper',\n  overridesResolver: (props, styles) => styles.paper\n})(({\n  theme\n}) => _extends({}, theme.typography.body1, {\n  overflow: 'auto'\n}));\nconst AutocompleteLoading = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'Loading',\n  overridesResolver: (props, styles) => styles.loading\n})(({\n  theme\n}) => ({\n  color: (theme.vars || theme).palette.text.secondary,\n  padding: '14px 16px'\n}));\nconst AutocompleteNoOptions = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'NoOptions',\n  overridesResolver: (props, styles) => styles.noOptions\n})(({\n  theme\n}) => ({\n  color: (theme.vars || theme).palette.text.secondary,\n  padding: '14px 16px'\n}));\nconst AutocompleteListbox = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'Listbox',\n  overridesResolver: (props, styles) => styles.listbox\n})(({\n  theme\n}) => ({\n  listStyle: 'none',\n  margin: 0,\n  padding: '8px 0',\n  maxHeight: '40vh',\n  overflow: 'auto',\n  position: 'relative',\n  [`& .${autocompleteClasses.option}`]: {\n    minHeight: 48,\n    display: 'flex',\n    overflow: 'hidden',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    cursor: 'pointer',\n    paddingTop: 6,\n    boxSizing: 'border-box',\n    outline: '0',\n    WebkitTapHighlightColor: 'transparent',\n    paddingBottom: 6,\n    paddingLeft: 16,\n    paddingRight: 16,\n    [theme.breakpoints.up('sm')]: {\n      minHeight: 'auto'\n    },\n    [`&.${autocompleteClasses.focused}`]: {\n      backgroundColor: (theme.vars || theme).palette.action.hover,\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      }\n    },\n    '&[aria-disabled=\"true\"]': {\n      opacity: (theme.vars || theme).palette.action.disabledOpacity,\n      pointerEvents: 'none'\n    },\n    [`&.${autocompleteClasses.focusVisible}`]: {\n      backgroundColor: (theme.vars || theme).palette.action.focus\n    },\n    '&[aria-selected=\"true\"]': {\n      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),\n      [`&.${autocompleteClasses.focused}`]: {\n        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: (theme.vars || theme).palette.action.selected\n        }\n      },\n      [`&.${autocompleteClasses.focusVisible}`]: {\n        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)\n      }\n    }\n  }\n}));\nconst AutocompleteGroupLabel = styled(ListSubheader, {\n  name: 'MuiAutocomplete',\n  slot: 'GroupLabel',\n  overridesResolver: (props, styles) => styles.groupLabel\n})(({\n  theme\n}) => ({\n  backgroundColor: (theme.vars || theme).palette.background.paper,\n  top: -8\n}));\nconst AutocompleteGroupUl = styled('ul', {\n  name: 'MuiAutocomplete',\n  slot: 'GroupUl',\n  overridesResolver: (props, styles) => styles.groupUl\n})({\n  padding: 0,\n  [`& .${autocompleteClasses.option}`]: {\n    paddingLeft: 24\n  }\n});\nexport { createFilterOptions };\nconst Autocomplete = /*#__PURE__*/React.forwardRef(function Autocomplete(inProps, ref) {\n  var _slotProps$clearIndic, _slotProps$paper, _slotProps$popper, _slotProps$popupIndic;\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiAutocomplete'\n  });\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  const {\n      autoComplete = false,\n      autoHighlight = false,\n      autoSelect = false,\n      blurOnSelect = false,\n      ChipProps,\n      className,\n      clearIcon = _ClearIcon || (_ClearIcon = /*#__PURE__*/_jsx(ClearIcon, {\n        fontSize: \"small\"\n      })),\n      clearOnBlur = !props.freeSolo,\n      clearOnEscape = false,\n      clearText = 'Clear',\n      closeText = 'Close',\n      componentsProps = {},\n      defaultValue = props.multiple ? [] : null,\n      disableClearable = false,\n      disableCloseOnSelect = false,\n      disabled = false,\n      disabledItemsFocusable = false,\n      disableListWrap = false,\n      disablePortal = false,\n      filterSelectedOptions = false,\n      forcePopupIcon = 'auto',\n      freeSolo = false,\n      fullWidth = false,\n      getLimitTagsText = more => `+${more}`,\n      getOptionLabel = option => {\n        var _option$label;\n        return (_option$label = option.label) != null ? _option$label : option;\n      },\n      groupBy,\n      handleHomeEndKeys = !props.freeSolo,\n      includeInputInList = false,\n      limitTags = -1,\n      ListboxComponent = 'ul',\n      ListboxProps,\n      loading = false,\n      loadingText = 'Loading…',\n      multiple = false,\n      noOptionsText = 'No options',\n      openOnFocus = false,\n      openText = 'Open',\n      PaperComponent = Paper,\n      PopperComponent = Popper,\n      popupIcon = _ArrowDropDownIcon || (_ArrowDropDownIcon = /*#__PURE__*/_jsx(ArrowDropDownIcon, {})),\n      readOnly = false,\n      renderGroup: renderGroupProp,\n      renderInput,\n      renderOption: renderOptionProp,\n      renderTags,\n      selectOnFocus = !props.freeSolo,\n      size = 'medium',\n      slotProps = {}\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  const {\n    getRootProps,\n    getInputProps,\n    getInputLabelProps,\n    getPopupIndicatorProps,\n    getClearProps,\n    getTagProps,\n    getListboxProps,\n    getOptionProps,\n    value,\n    dirty,\n    id,\n    popupOpen,\n    focused,\n    focusedTag,\n    anchorEl,\n    setAnchorEl,\n    inputValue,\n    groupedOptions\n  } = useAutocomplete(_extends({}, props, {\n    componentName: 'Autocomplete'\n  }));\n  const hasClearIcon = !disableClearable && !disabled && dirty && !readOnly;\n  const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;\n\n  // If you modify this, make sure to keep the `AutocompleteOwnerState` type in sync.\n  const ownerState = _extends({}, props, {\n    disablePortal,\n    focused,\n    fullWidth,\n    hasClearIcon,\n    hasPopupIcon,\n    inputFocused: focusedTag === -1,\n    popupOpen,\n    size\n  });\n  const classes = useUtilityClasses(ownerState);\n  let startAdornment;\n  if (multiple && value.length > 0) {\n    const getCustomizedTagProps = params => _extends({\n      className: classes.tag,\n      disabled\n    }, getTagProps(params));\n    if (renderTags) {\n      startAdornment = renderTags(value, getCustomizedTagProps, ownerState);\n    } else {\n      startAdornment = value.map((option, index) => /*#__PURE__*/_jsx(Chip, _extends({\n        label: getOptionLabel(option),\n        size: size\n      }, getCustomizedTagProps({\n        index\n      }), ChipProps)));\n    }\n  }\n  if (limitTags > -1 && Array.isArray(startAdornment)) {\n    const more = startAdornment.length - limitTags;\n    if (!focused && more > 0) {\n      startAdornment = startAdornment.splice(0, limitTags);\n      startAdornment.push( /*#__PURE__*/_jsx(\"span\", {\n        className: classes.tag,\n        children: getLimitTagsText(more)\n      }, startAdornment.length));\n    }\n  }\n  const defaultRenderGroup = params => /*#__PURE__*/_jsxs(\"li\", {\n    children: [/*#__PURE__*/_jsx(AutocompleteGroupLabel, {\n      className: classes.groupLabel,\n      ownerState: ownerState,\n      component: \"div\",\n      children: params.group\n    }), /*#__PURE__*/_jsx(AutocompleteGroupUl, {\n      className: classes.groupUl,\n      ownerState: ownerState,\n      children: params.children\n    })]\n  }, params.key);\n  const renderGroup = renderGroupProp || defaultRenderGroup;\n  const defaultRenderOption = (props2, option) => /*#__PURE__*/_jsx(\"li\", _extends({}, props2, {\n    children: getOptionLabel(option)\n  }));\n  const renderOption = renderOptionProp || defaultRenderOption;\n  const renderListOption = (option, index) => {\n    const optionProps = getOptionProps({\n      option,\n      index\n    });\n    return renderOption(_extends({}, optionProps, {\n      className: classes.option\n    }), option, {\n      selected: optionProps['aria-selected'],\n      index,\n      inputValue\n    });\n  };\n  const clearIndicatorSlotProps = (_slotProps$clearIndic = slotProps.clearIndicator) != null ? _slotProps$clearIndic : componentsProps.clearIndicator;\n  const paperSlotProps = (_slotProps$paper = slotProps.paper) != null ? _slotProps$paper : componentsProps.paper;\n  const popperSlotProps = (_slotProps$popper = slotProps.popper) != null ? _slotProps$popper : componentsProps.popper;\n  const popupIndicatorSlotProps = (_slotProps$popupIndic = slotProps.popupIndicator) != null ? _slotProps$popupIndic : componentsProps.popupIndicator;\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(AutocompleteRoot, _extends({\n      ref: ref,\n      className: clsx(classes.root, className),\n      ownerState: ownerState\n    }, getRootProps(other), {\n      children: renderInput({\n        id,\n        disabled,\n        fullWidth: true,\n        size: size === 'small' ? 'small' : undefined,\n        InputLabelProps: getInputLabelProps(),\n        InputProps: _extends({\n          ref: setAnchorEl,\n          className: classes.inputRoot,\n          startAdornment\n        }, (hasClearIcon || hasPopupIcon) && {\n          endAdornment: /*#__PURE__*/_jsxs(AutocompleteEndAdornment, {\n            className: classes.endAdornment,\n            ownerState: ownerState,\n            children: [hasClearIcon ? /*#__PURE__*/_jsx(AutocompleteClearIndicator, _extends({}, getClearProps(), {\n              \"aria-label\": clearText,\n              title: clearText,\n              ownerState: ownerState\n            }, clearIndicatorSlotProps, {\n              className: clsx(classes.clearIndicator, clearIndicatorSlotProps == null ? void 0 : clearIndicatorSlotProps.className),\n              children: clearIcon\n            })) : null, hasPopupIcon ? /*#__PURE__*/_jsx(AutocompletePopupIndicator, _extends({}, getPopupIndicatorProps(), {\n              disabled: disabled,\n              \"aria-label\": popupOpen ? closeText : openText,\n              title: popupOpen ? closeText : openText,\n              ownerState: ownerState\n            }, popupIndicatorSlotProps, {\n              className: clsx(classes.popupIndicator, popupIndicatorSlotProps == null ? void 0 : popupIndicatorSlotProps.className),\n              children: popupIcon\n            })) : null]\n          })\n        }),\n        inputProps: _extends({\n          className: classes.input,\n          disabled,\n          readOnly\n        }, getInputProps())\n      })\n    })), anchorEl ? /*#__PURE__*/_jsx(AutocompletePopper, _extends({\n      as: PopperComponent,\n      disablePortal: disablePortal,\n      style: {\n        width: anchorEl ? anchorEl.clientWidth : null\n      },\n      ownerState: ownerState,\n      role: \"presentation\",\n      anchorEl: anchorEl,\n      open: popupOpen\n    }, popperSlotProps, {\n      className: clsx(classes.popper, popperSlotProps == null ? void 0 : popperSlotProps.className),\n      children: /*#__PURE__*/_jsxs(AutocompletePaper, _extends({\n        ownerState: ownerState,\n        as: PaperComponent\n      }, paperSlotProps, {\n        className: clsx(classes.paper, paperSlotProps == null ? void 0 : paperSlotProps.className),\n        children: [loading && groupedOptions.length === 0 ? /*#__PURE__*/_jsx(AutocompleteLoading, {\n          className: classes.loading,\n          ownerState: ownerState,\n          children: loadingText\n        }) : null, groupedOptions.length === 0 && !freeSolo && !loading ? /*#__PURE__*/_jsx(AutocompleteNoOptions, {\n          className: classes.noOptions,\n          ownerState: ownerState,\n          role: \"presentation\",\n          onMouseDown: event => {\n            // Prevent input blur when interacting with the \"no options\" content\n            event.preventDefault();\n          },\n          children: noOptionsText\n        }) : null, groupedOptions.length > 0 ? /*#__PURE__*/_jsx(AutocompleteListbox, _extends({\n          as: ListboxComponent,\n          className: classes.listbox,\n          ownerState: ownerState\n        }, getListboxProps(), ListboxProps, {\n          children: groupedOptions.map((option, index) => {\n            if (groupBy) {\n              return renderGroup({\n                key: option.key,\n                group: option.group,\n                children: option.options.map((option2, index2) => renderListOption(option2, option.index + index2))\n              });\n            }\n            return renderListOption(option, index);\n          })\n        })) : null]\n      }))\n    })) : null]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Autocomplete.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * If `true`, the portion of the selected suggestion that has not been typed by the user,\n   * known as the completion string, appears inline after the input cursor in the textbox.\n   * The inline completion string is visually highlighted and has a selected state.\n   * @default false\n   */\n  autoComplete: PropTypes.bool,\n  /**\n   * If `true`, the first option is automatically highlighted.\n   * @default false\n   */\n  autoHighlight: PropTypes.bool,\n  /**\n   * If `true`, the selected option becomes the value of the input\n   * when the Autocomplete loses focus unless the user chooses\n   * a different option or changes the character string in the input.\n   * @default false\n   */\n  autoSelect: PropTypes.bool,\n  /**\n   * Control if the input should be blurred when an option is selected:\n   *\n   * - `false` the input is not blurred.\n   * - `true` the input is always blurred.\n   * - `touch` the input is blurred after a touch event.\n   * - `mouse` the input is blurred after a mouse event.\n   * @default false\n   */\n  blurOnSelect: PropTypes.oneOfType([PropTypes.oneOf(['mouse', 'touch']), PropTypes.bool]),\n  /**\n   * Props applied to the [`Chip`](/material-ui/api/chip/) element.\n   */\n  ChipProps: PropTypes.object,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The icon to display in place of the default clear icon.\n   * @default <ClearIcon fontSize=\"small\" />\n   */\n  clearIcon: PropTypes.node,\n  /**\n   * If `true`, the input's text is cleared on blur if no value is selected.\n   *\n   * Set to `true` if you want to help the user enter a new value.\n   * Set to `false` if you want to help the user resume their search.\n   * @default !props.freeSolo\n   */\n  clearOnBlur: PropTypes.bool,\n  /**\n   * If `true`, clear all values when the user presses escape and the popup is closed.\n   * @default false\n   */\n  clearOnEscape: PropTypes.bool,\n  /**\n   * Override the default text for the *clear* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Clear'\n   */\n  clearText: PropTypes.string,\n  /**\n   * Override the default text for the *close popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Close'\n   */\n  closeText: PropTypes.string,\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  componentsProps: PropTypes.shape({\n    clearIndicator: PropTypes.object,\n    paper: PropTypes.object,\n    popper: PropTypes.object,\n    popupIndicator: PropTypes.object\n  }),\n  /**\n   * The default value. Use when the component is not controlled.\n   * @default props.multiple ? [] : null\n   */\n  defaultValue: chainPropTypes(PropTypes.any, props => {\n    if (props.multiple && props.defaultValue !== undefined && !Array.isArray(props.defaultValue)) {\n      return new Error(['MUI: The Autocomplete expects the `defaultValue` prop to be an array when `multiple={true}` or undefined.', `However, ${props.defaultValue} was provided.`].join('\\n'));\n    }\n    return null;\n  }),\n  /**\n   * If `true`, the input can't be cleared.\n   * @default false\n   */\n  disableClearable: PropTypes.bool,\n  /**\n   * If `true`, the popup won't close when a value is selected.\n   * @default false\n   */\n  disableCloseOnSelect: PropTypes.bool,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, will allow focus on disabled items.\n   * @default false\n   */\n  disabledItemsFocusable: PropTypes.bool,\n  /**\n   * If `true`, the list box in the popup will not wrap focus.\n   * @default false\n   */\n  disableListWrap: PropTypes.bool,\n  /**\n   * If `true`, the `Popper` content will be under the DOM hierarchy of the parent component.\n   * @default false\n   */\n  disablePortal: PropTypes.bool,\n  /**\n   * A function that determines the filtered options to be rendered on search.\n   *\n   * @param {T[]} options The options to render.\n   * @param {object} state The state of the component.\n   * @returns {T[]}\n   */\n  filterOptions: PropTypes.func,\n  /**\n   * If `true`, hide the selected options from the list box.\n   * @default false\n   */\n  filterSelectedOptions: PropTypes.bool,\n  /**\n   * Force the visibility display of the popup icon.\n   * @default 'auto'\n   */\n  forcePopupIcon: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.bool]),\n  /**\n   * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.\n   * @default false\n   */\n  freeSolo: PropTypes.bool,\n  /**\n   * If `true`, the input will take up the full width of its container.\n   * @default false\n   */\n  fullWidth: PropTypes.bool,\n  /**\n   * The label to display when the tags are truncated (`limitTags`).\n   *\n   * @param {number} more The number of truncated tags.\n   * @returns {ReactNode}\n   * @default (more) => `+${more}`\n   */\n  getLimitTagsText: PropTypes.func,\n  /**\n   * Used to determine the disabled state for a given option.\n   *\n   * @param {T} option The option to test.\n   * @returns {boolean}\n   */\n  getOptionDisabled: PropTypes.func,\n  /**\n   * Used to determine the string value for a given option.\n   * It's used to fill the input (and the list box options if `renderOption` is not provided).\n   *\n   * If used in free solo mode, it must accept both the type of the options and a string.\n   *\n   * @param {T} option\n   * @returns {string}\n   * @default (option) => option.label ?? option\n   */\n  getOptionLabel: PropTypes.func,\n  /**\n   * If provided, the options will be grouped under the returned string.\n   * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.\n   *\n   * @param {T} options The options to group.\n   * @returns {string}\n   */\n  groupBy: PropTypes.func,\n  /**\n   * If `true`, the component handles the \"Home\" and \"End\" keys when the popup is open.\n   * It should move focus to the first option and last option, respectively.\n   * @default !props.freeSolo\n   */\n  handleHomeEndKeys: PropTypes.bool,\n  /**\n   * This prop is used to help implement the accessibility logic.\n   * If you don't provide an id it will fall back to a randomly generated one.\n   */\n  id: PropTypes.string,\n  /**\n   * If `true`, the highlight can move to the input.\n   * @default false\n   */\n  includeInputInList: PropTypes.bool,\n  /**\n   * The input value.\n   */\n  inputValue: PropTypes.string,\n  /**\n   * Used to determine if the option represents the given value.\n   * Uses strict equality by default.\n   * ⚠️ Both arguments need to be handled, an option can only match with one value.\n   *\n   * @param {T} option The option to test.\n   * @param {T} value The value to test against.\n   * @returns {boolean}\n   */\n  isOptionEqualToValue: PropTypes.func,\n  /**\n   * The maximum number of tags that will be visible when not focused.\n   * Set `-1` to disable the limit.\n   * @default -1\n   */\n  limitTags: integerPropType,\n  /**\n   * The component used to render the listbox.\n   * @default 'ul'\n   */\n  ListboxComponent: PropTypes.elementType,\n  /**\n   * Props applied to the Listbox element.\n   */\n  ListboxProps: PropTypes.object,\n  /**\n   * If `true`, the component is in a loading state.\n   * This shows the `loadingText` in place of suggestions (only if there are no suggestions to show, e.g. `options` are empty).\n   * @default false\n   */\n  loading: PropTypes.bool,\n  /**\n   * Text to display when in a loading state.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Loading…'\n   */\n  loadingText: PropTypes.node,\n  /**\n   * If `true`, `value` must be an array and the menu will support multiple selections.\n   * @default false\n   */\n  multiple: PropTypes.bool,\n  /**\n   * Text to display when there are no options.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'No options'\n   */\n  noOptionsText: PropTypes.node,\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {T|T[]} value The new value of the component.\n   * @param {string} reason One of \"createOption\", \"selectOption\", \"removeOption\", \"blur\" or \"clear\".\n   * @param {string} [details]\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {string} reason Can be: `\"toggleInput\"`, `\"escape\"`, `\"selectOption\"`, `\"removeOption\"`, `\"blur\"`.\n   */\n  onClose: PropTypes.func,\n  /**\n   * Callback fired when the highlight option changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {T} option The highlighted option.\n   * @param {string} reason Can be: `\"keyboard\"`, `\"auto\"`, `\"mouse\"`.\n   */\n  onHighlightChange: PropTypes.func,\n  /**\n   * Callback fired when the input value changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {string} value The new value of the text input.\n   * @param {string} reason Can be: `\"input\"` (user input), `\"reset\"` (programmatic change), `\"clear\"`.\n   */\n  onInputChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n  /**\n   * If `true`, the component is shown.\n   */\n  open: PropTypes.bool,\n  /**\n   * If `true`, the popup will open on input focus.\n   * @default false\n   */\n  openOnFocus: PropTypes.bool,\n  /**\n   * Override the default text for the *open popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Open'\n   */\n  openText: PropTypes.string,\n  /**\n   * Array of options.\n   */\n  options: PropTypes.array.isRequired,\n  /**\n   * The component used to render the body of the popup.\n   * @default Paper\n   */\n  PaperComponent: PropTypes.elementType,\n  /**\n   * The component used to position the popup.\n   * @default Popper\n   */\n  PopperComponent: PropTypes.elementType,\n  /**\n   * The icon to display in place of the default popup icon.\n   * @default <ArrowDropDownIcon />\n   */\n  popupIcon: PropTypes.node,\n  /**\n   * If `true`, the component becomes readonly. It is also supported for multiple tags where the tag cannot be deleted.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Render the group.\n   *\n   * @param {AutocompleteRenderGroupParams} params The group to render.\n   * @returns {ReactNode}\n   */\n  renderGroup: PropTypes.func,\n  /**\n   * Render the input.\n   *\n   * @param {object} params\n   * @returns {ReactNode}\n   */\n  renderInput: PropTypes.func.isRequired,\n  /**\n   * Render the option, use `getOptionLabel` by default.\n   *\n   * @param {object} props The props to apply on the li element.\n   * @param {T} option The option to render.\n   * @param {object} state The state of the component.\n   * @returns {ReactNode}\n   */\n  renderOption: PropTypes.func,\n  /**\n   * Render the selected value.\n   *\n   * @param {T[]} value The `value` provided to the component.\n   * @param {function} getTagProps A tag props getter.\n   * @param {object} ownerState The state of the Autocomplete component.\n   * @returns {ReactNode}\n   */\n  renderTags: PropTypes.func,\n  /**\n   * If `true`, the input's text is selected on focus.\n   * It helps the user clear the selected value.\n   * @default !props.freeSolo\n   */\n  selectOnFocus: PropTypes.bool,\n  /**\n   * The size of the component.\n   * @default 'medium'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['small', 'medium']), PropTypes.string]),\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    clearIndicator: PropTypes.object,\n    paper: PropTypes.object,\n    popper: PropTypes.object,\n    popupIndicator: PropTypes.object\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The value of the autocomplete.\n   *\n   * The value must have reference equality with the option in order to be selected.\n   * You can customize the equality behavior with the `isOptionEqualToValue` prop.\n   */\n  value: chainPropTypes(PropTypes.any, props => {\n    if (props.multiple && props.value !== undefined && !Array.isArray(props.value)) {\n      return new Error(['MUI: The Autocomplete expects the `value` prop to be an array when `multiple={true}` or undefined.', `However, ${props.value} was provided.`].join('\\n'));\n    }\n    return null;\n  })\n} : void 0;\nexport default Autocomplete;","import * as React from 'react';\nconst usePreviousProps = value => {\n  const ref = React.useRef({});\n  React.useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n};\nexport default usePreviousProps;"],"names":["stripDiacritics","string","normalize","replace","createFilterOptions","config","ignoreAccents","ignoreCase","limit","matchFrom","stringify","trim","options","inputValue","getOptionLabel","input","toLowerCase","filteredOptions","filter","option","candidate","indexOf","slice","findIndex","array","comp","i","length","defaultFilterOptions","defaultIsActiveElementInListbox","listboxRef","_listboxRef$current$p","current","parentElement","contains","document","activeElement","useAutocomplete","props","unstable_isActiveElementInListbox","unstable_classNamePrefix","autoComplete","autoHighlight","autoSelect","blurOnSelect","clearOnBlur","freeSolo","clearOnEscape","componentName","defaultValue","multiple","disableClearable","disableCloseOnSelect","disabledProp","disabled","disabledItemsFocusable","disableListWrap","filterOptions","filterSelectedOptions","getOptionDisabled","getOptionLabelProp","_option$label","label","groupBy","handleHomeEndKeys","idProp","id","includeInputInList","inputValueProp","isOptionEqualToValue","value","onChange","onClose","onHighlightChange","onInputChange","onOpen","openProp","open","openOnFocus","readOnly","selectOnFocus","valueProp","useId","optionLabel","String","ignoreFocus","React","firstFocus","inputRef","anchorEl","setAnchorEl","focusedTag","setFocusedTag","defaultHighlighted","highlightedIndexRef","useControlled","controlled","default","name","setValueState","state","setInputValueState","focused","setFocused","resetInputValue","event","newValue","newInputValue","setOpenState","inputPristine","setInputPristine","inputValueIsSelectedValue","popupOpen","some","value2","previousProps","usePreviousProps","valueChange","listboxAvailable","focusTag","useEventCallback","tagToFocus","focus","querySelector","setHighlightedIndex","index","reason","removeAttribute","setAttribute","prev","classList","remove","listboxNode","add","scrollHeight","clientHeight","element","scrollBottom","scrollTop","elementBottom","offsetTop","offsetHeight","changeHighlightedIndex","diff","direction","nextIndex","nextFocus","nextFocusDisabled","getAttribute","hasAttribute","validOptionIndex","maxIndex","newIndex","Math","abs","getNextIndex","setSelectionRange","syncHighlightedIndex","_previousProps$value","every","val","previousHighlightedOption","checkHighlightedOptionExists","valueItem","currentOption","itemIndex","optionItem","handleListboxRef","node","setRef","handleOpen","handleClose","handleValue","details","isTouch","selectNewValue","reasonProp","origin","Array","isArray","push","splice","ctrlKey","metaKey","blur","handleFocusTag","nextTag","validTagIndex","handleClear","handleKeyDown","other","onKeyDown","defaultMuiPrevented","key","which","preventDefault","stopPropagation","handleFocus","handleBlur","handleInputChange","target","handleOptionMouseOver","Number","currentTarget","handleOptionTouchStart","handleOptionClick","handleTagDelete","handlePopupIndicator","handleMouseDown","handleClick","selectionEnd","selectionStart","select","handleInputMouseDown","dirty","groupedOptions","Map","reduce","acc","group","getRootProps","_extends","onMouseDown","onClick","getInputLabelProps","htmlFor","getInputProps","onBlur","onFocus","undefined","ref","autoCapitalize","spellCheck","role","getClearProps","tabIndex","getPopupIndicatorProps","getTagProps","onDelete","getListboxProps","getOptionProps","selected","onMouseOver","onTouchStart","createSvgIcon","_jsx","d","getAutocompleteUtilityClass","slot","generateUtilityClass","_ClearIcon","_ArrowDropDownIcon","generateUtilityClasses","_excluded","AutocompleteRoot","styled","overridesResolver","styles","ownerState","fullWidth","hasClearIcon","hasPopupIcon","inputFocused","size","autocompleteClasses","tag","capitalize","inputRoot","root","visibility","width","margin","maxWidth","flexWrap","paddingRight","minWidth","inputClasses","paddingBottom","padding","inputBaseClasses","outlinedInputClasses","right","paddingTop","paddingLeft","filledInputClasses","flexGrow","textOverflow","opacity","AutocompleteEndAdornment","endAdornment","position","top","AutocompleteClearIndicator","IconButton","clearIndicator","marginRight","AutocompletePopupIndicator","popupIndicator","popupIndicatorOpen","transform","AutocompletePopper","Popper","popper","disablePortal","popperDisablePortal","theme","zIndex","vars","modal","AutocompletePaper","Paper","paper","typography","body1","overflow","AutocompleteLoading","loading","color","palette","text","secondary","AutocompleteNoOptions","noOptions","AutocompleteListbox","listbox","listStyle","maxHeight","minHeight","display","justifyContent","alignItems","cursor","boxSizing","outline","WebkitTapHighlightColor","breakpoints","up","backgroundColor","action","hover","disabledOpacity","pointerEvents","primary","mainChannel","selectedOpacity","alpha","main","hoverOpacity","focusOpacity","AutocompleteGroupLabel","ListSubheader","groupLabel","background","AutocompleteGroupUl","groupUl","inProps","_slotProps$clearIndic","_slotProps$paper","_slotProps$popper","_slotProps$popupIndic","startAdornment","useThemeProps","ChipProps","className","clearIcon","ClearIcon","fontSize","clearText","closeText","componentsProps","forcePopupIcon","getLimitTagsText","more","limitTags","ListboxComponent","ListboxProps","loadingText","noOptionsText","openText","PaperComponent","PopperComponent","popupIcon","ArrowDropDownIcon","renderGroupProp","renderGroup","renderInput","renderOptionProp","renderOption","renderTags","slotProps","_objectWithoutPropertiesLoose","classes","slots","composeClasses","useUtilityClasses","getCustomizedTagProps","params","map","Chip","children","_jsxs","component","props2","renderListOption","optionProps","clearIndicatorSlotProps","paperSlotProps","popperSlotProps","popupIndicatorSlotProps","clsx","InputLabelProps","InputProps","title","inputProps","as","style","clientWidth","option2","index2"],"sourceRoot":""}