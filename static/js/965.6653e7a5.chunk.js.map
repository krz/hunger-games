{"version":3,"file":"static/js/965.6653e7a5.chunk.js","mappings":"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","sources":["hooks/useUrlParams.js","pages/logosValidator/LogoQuestionValidator.jsx","pages/questions/store.js","robotoff.ts","utils.js"],"sourcesContent":["import * as React from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nexport const setUrlParams = (parameters, defaultParameters) => {\n  const newRelativePathQuery = `${\n    window.location.pathname\n  }?${convertObjectParamsToUrlParams(parameters, defaultParameters)}`;\n  window.history.pushState(null, \"\", newRelativePathQuery);\n};\n\nexport const getDefaultizedUrlParams = (defaultParameters, synonyms = {}) => {\n  const parameters = { ...defaultParameters };\n  const urlParams = new URLSearchParams(window.location.search);\n  Object.keys(defaultParameters).forEach((key) => {\n    const value = urlParams.get(key);\n    if (value !== null && JSON.stringify(defaultParameters[key]) !== value) {\n      if (value === \"true\" || value === \"false\") {\n        parameters[key] = JSON.parse(value);\n      } else {\n        parameters[key] = value;\n      }\n    }\n  });\n\n  Object.entries(synonyms).forEach(([valueKey, synonymKeys]) => {\n    const toTest =\n      typeof synonymKeys === \"string\" ? [synonymKeys] : synonymKeys;\n    toTest.forEach((synonymKey) => {\n      const value = urlParams.get(synonymKey);\n      if (\n        value !== null &&\n        JSON.stringify(defaultParameters[valueKey]) !== value\n      ) {\n        if (value === \"true\" || value === \"false\") {\n          parameters[valueKey] = JSON.parse(value);\n        } else {\n          parameters[valueKey] = value;\n        }\n      }\n    });\n  });\n\n  return parameters;\n};\n\nexport const convertObjectParamsToUrlParams = (\n  parameters,\n  defaultParameters\n) => {\n  const urlParams = new URLSearchParams(window.location.search);\n\n  Object.keys(parameters).forEach((key) => {\n    if (JSON.stringify(parameters[key]) !== urlParams.get(key)) {\n      urlParams.set(key, parameters[key]);\n    }\n  });\n\n  if (defaultParameters !== undefined) {\n    Object.keys(defaultParameters).forEach((key) => {\n      if (\n        urlParams.get(key) !== null &&\n        defaultParameters[key] === parameters[key]\n      ) {\n        // Already in default. We can remove it\n        urlParams.delete(key);\n      }\n    });\n  }\n\n  return urlParams.toString();\n};\n\n/**\n * Hook that works as useState to keep in sync with URL query params\n * @param {object} defaultParams The object to get from the URL\n * @param {object} synonyms The synonmys under the form { valueKeyA: ['synonymA1', 'synsonymA2'], valueKeyB: 'synsonlymB1' }.\n * If the urls containg a paramter named `synonymA1` it will be used to override valueKeyA value.\n * @returns [state, setState]\n */\nconst useUrlParams = (defaultParams, synonyms) => {\n  const [parameters, setParameters] = React.useState(() =>\n    getDefaultizedUrlParams(defaultParams)\n  );\n  const { search } = useLocation();\n\n  React.useEffect(() => {\n    setParameters((prevParams) => {\n      const newParams = getDefaultizedUrlParams(defaultParams, synonyms);\n\n      const shouldUpdate = Object.keys(defaultParams).some(\n        (key) => newParams[key] !== prevParams[key]\n      );\n      return shouldUpdate ? newParams : prevParams;\n    });\n  }, [search, defaultParams, synonyms]);\n\n  const updateParameters = React.useCallback(\n    (modifier) => {\n      let newParams;\n      if (typeof modifier === \"function\") {\n        newParams = modifier(parameters);\n      } else {\n        newParams = modifier;\n      }\n      setParameters(newParams);\n      setUrlParams(newParams, defaultParams);\n    },\n    [parameters, defaultParams]\n  );\n  return [parameters, updateParameters];\n};\n\nexport default useUrlParams;\n","import * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport Divider from \"@mui/material/Divider\";\nimport Stack from \"@mui/material/Stack\";\nimport Button from \"@mui/material/Button\";\nimport Link from \"@mui/material/Link\";\nimport Box from \"@mui/material/Box\";\nimport Card from \"@mui/material/Card\";\nimport CardActionArea from \"@mui/material/CardActionArea\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport Paper from \"@mui/material/Paper\";\nimport Slider from \"@mui/material/Slider\";\nimport Typography from \"@mui/material/Typography\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\n\nimport { useParams } from \"react-router-dom\";\nimport { Provider, useDispatch, useSelector } from \"react-redux\";\n\nimport store, {\n  fetchQuestions,\n  updateFilter,\n  filterStateSelector,\n  nbOfQuestionsInBufferSelector,\n  questionsToAnswerSelector,\n  numberOfQuestionsAvailableSelector,\n  answerQuestion as answerQuestionAction,\n} from \"../questions/store\";\nimport robotoff from \"../../robotoff\";\nimport off from \"../../off\";\nimport useUrlParams from \"../../hooks/useUrlParams\";\n\nimport { LOGOS } from \"./dashboardDefinition\";\nimport { CircularProgress } from \"@mui/material\";\n\nconst fetchData = async (insightId) => {\n  const response = await robotoff.insightDetail(insightId);\n\n  if (\n    response?.data?.source_image &&\n    response?.data?.data?.logo_id &&\n    !response?.data?.data?.bounding_box\n  ) {\n    const logoData = await robotoff.getLogosImages([\n      response?.data?.data?.logo_id,\n    ]);\n    const bounding_box = logoData?.data?.logos?.[0]?.bounding_box;\n\n    return { ...response, bounding_box };\n  }\n\n  return response;\n};\n\nconst LogoQuesitonCard = (props) => {\n  const { t } = useTranslation();\n  const { question, toggleSelection, checked, imageSize, zoomOnLogo } = props;\n\n  const [croppedImageUrl, setCroppedImageUrl] = React.useState(\"\");\n\n  React.useEffect(() => {\n    if (!zoomOnLogo) {\n      setCroppedImageUrl(question.source_image_url);\n      return;\n    }\n\n    let isValidQuery = true;\n\n    const getImageUrl = async () => {\n      const { data, bounding_box } = await fetchData(question.insight_id);\n\n      if (!isValidQuery) {\n        return;\n      }\n\n      if (data?.data?.bounding_box && data?.source_image) {\n        setCroppedImageUrl(\n          robotoff.getCroppedImageUrl(\n            off.getImageUrl(data?.source_image),\n            data.data.bounding_box\n          )\n        );\n      } else if (bounding_box && data?.source_image) {\n        setCroppedImageUrl(\n          robotoff.getCroppedImageUrl(\n            off.getImageUrl(data?.source_image),\n            bounding_box\n          )\n        );\n      }\n    };\n    getImageUrl().catch(() => {});\n\n    return () => {\n      isValidQuery = false;\n    };\n  }, [question.insight_id, question.source_image_url, zoomOnLogo]);\n\n  return (\n    <Card\n      sx={{ width: imageSize, height: imageSize }}\n      key={question.insight_id}\n    >\n      <CardActionArea\n        sx={{\n          width: imageSize,\n          height: imageSize,\n          position: \"relative\",\n        }}\n        onClick={toggleSelection(question.insight_id)}\n        tabIndex={-1}\n      >\n        {croppedImageUrl ? (\n          <img\n            src={croppedImageUrl}\n            alt={t(\"nutriscore.image_alt\")}\n            loading=\"lazy\"\n            style={{ objectFit: \"contain\", width: \"100%\", height: \"100%\" }}\n          />\n        ) : (\n          <Typography>NOT A LOGO</Typography>\n        )}\n        <Checkbox\n          sx={{ position: \"absolute\", bottom: 10, right: 10 }}\n          checked={checked}\n          readOnly\n          size=\"large\"\n        />\n      </CardActionArea>\n    </Card>\n  );\n};\n\nconst NoMoreLogos = ({ insightType, valueTag }) => {\n  const { t } = useTranslation();\n\n  return (\n    <Box sx={{ width: \"100%\", textAlign: \"center\", py: 5, m: 0 }}>\n      <Typography variant=\"subtitle1\">\n        {t(\"logos.no_more_questions\")}\n      </Typography>\n      <Button\n        color=\"secondary\"\n        size=\"small\"\n        component={Link}\n        variant=\"contained\"\n        href={`/logos/deep-search?type=${insightType}&value=${valueTag}`}\n        target=\"_blank\"\n        sx={{ ml: 2, minWidth: 150 }}\n      >\n        Search\n      </Button>\n    </Box>\n  );\n};\n\nfunction LogoQuestionValidator() {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n\n  const [controlledState, setControlledState] = useUrlParams(\n    {\n      imageSize: 200,\n      zoomOnLogo: true,\n    },\n    {}\n  );\n  const { valueTag } = useParams();\n  const imageSize = Number.parseInt(controlledState.imageSize);\n  const zoomOnLogo = JSON.parse(controlledState.zoomOnLogo);\n\n  const selectedOption = React.useMemo(() => LOGOS[valueTag] ?? {}, [valueTag]);\n\n  React.useLayoutEffect(() => {\n    dispatch(\n      updateFilter({\n        insightType: selectedOption.type,\n        sortByPopularity: false,\n        valueTag,\n        predictor:\n          selectedOption?.predictor === undefined\n            ? \"universal-logo-detector\"\n            : selectedOption?.predictor,\n      })\n    );\n  }, [dispatch, valueTag, selectedOption]);\n\n  const [selectedIds, setSelectedIds] = React.useState([]);\n  const [lastClickedId, setLastClickedId] = React.useState(null);\n\n  const buffer = useSelector(questionsToAnswerSelector);\n  const numberOfQuestionsAvailable = useSelector(\n    numberOfQuestionsAvailableSelector\n  );\n  const filterState = useSelector(filterStateSelector);\n  const answerQuestion = React.useCallback(\n    ({ insight_id, value }) =>\n      dispatch(answerQuestionAction({ insight_id, value })),\n    [dispatch]\n  );\n\n  const remainingQuestionNb = useSelector(nbOfQuestionsInBufferSelector);\n  React.useEffect(() => {\n    if (remainingQuestionNb < 5) {\n      dispatch(fetchQuestions());\n    }\n  }, [dispatch, remainingQuestionNb]);\n\n  const toggleSelection = (insight_id) => (event) => {\n    if (event.shiftKey) {\n      setSelectedIds((prev) => {\n        const selectRange = prev.includes(lastClickedId);\n        let isInRange = false;\n        const rangeIds = buffer\n          .map((question) => {\n            if (\n              question.insight_id === insight_id ||\n              question.insight_id === lastClickedId\n            ) {\n              isInRange = !isInRange;\n              if (!isInRange) {\n                return question.insight_id;\n              }\n            }\n            return isInRange ? question.insight_id : null;\n          })\n          .filter((x) => x !== null);\n\n        if (selectRange) {\n          return [...prev, ...rangeIds.filter((id) => !prev.includes(id))];\n        }\n        return prev.filter((id) => !rangeIds.includes(id));\n      });\n    } else {\n      setSelectedIds((prev) =>\n        prev.includes(insight_id)\n          ? prev.filter((id) => id !== insight_id)\n          : [...prev, insight_id]\n      );\n    }\n    setLastClickedId(insight_id);\n  };\n\n  const handleKeyDown = (event) => {\n    if (!event.shiftKey) {\n      return;\n    }\n    const lastClickedIndexInBuffer = buffer.findIndex(\n      (question) => question.insight_id === lastClickedId\n    );\n    if (lastClickedIndexInBuffer === -1) {\n      return;\n    }\n\n    let indexToAdd;\n    if (event.key === \"ArrowRight\") {\n      indexToAdd = lastClickedIndexInBuffer + 1;\n    } else if (event.key === \"ArrowLeft\") {\n      indexToAdd = lastClickedIndexInBuffer - 1;\n    } else {\n      return;\n    }\n\n    if (indexToAdd < 0 || indexToAdd >= buffer.length) {\n      return;\n    }\n\n    const idsToAdd = [lastClickedId, buffer[indexToAdd].insight_id];\n\n    setSelectedIds((prev) => [\n      ...prev,\n      ...idsToAdd.filter((id) => !prev.includes(id)),\n    ]);\n    setLastClickedId(buffer[indexToAdd].insight_id);\n  };\n\n  const selectAll = () => {\n    setSelectedIds(buffer.map((question) => question.insight_id));\n  };\n  const unselectAll = () => {\n    setSelectedIds([]);\n  };\n\n  return (\n    <Box>\n      <Box sx={{ padding: 2 }}>\n        <Typography>{t(\"nutriscore.label\")}</Typography>\n        <Typography>\n          {t(\"nutriscore.description\", {\n            label: selectedOption.label,\n          })}\n        </Typography>\n        <Typography>\n          Ici vous annotez des produits. Mais vous pouvez aussi aider Robotoff\n          en annotant des logos détectés à cette adresse:{\" \"}\n          <Link\n            href={`https://hunger.openfoodfacts.org/logos/deep-search?type=label&value=${selectedOption.tag}`}\n            target=\"_blank\"\n          >\n            recherche des logos {selectedOption.label}\n          </Link>\n          .\n        </Typography>\n      </Box>\n      <Stack\n        direction=\"row\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        sx={{ pt: 5, px: 5, pb: 0, textAlign: \"center\" }}\n      >\n        <Typography sx={{ mx: 3 }}>\n          {t(\"nutriscore.images_remaining\", {\n            remaining: numberOfQuestionsAvailable,\n          })}\n        </Typography>\n        {selectedOption.logo && (\n          <img\n            src={selectedOption.logo}\n            alt=\"searched logo\"\n            style={{ maxHeight: 75 }}\n          />\n        )}\n        <Box sx={{ mx: 2, width: 500, maxWidth: 500, textAlign: \"left\" }}>\n          <Typography gutterBottom>{t(\"nutriscore.image_sizes\")}</Typography>\n          <Slider\n            aria-label={t(\"nutriscore.image_sizes\")}\n            value={imageSize}\n            onChangeCommitted={(event, newValue) =>\n              setControlledState((prev) => ({ ...prev, imageSize: newValue }))\n            }\n            valueLabelDisplay=\"auto\"\n            step={50}\n            marks\n            min={50}\n            max={500}\n            sx={{ maxWidth: 500 }}\n          />\n        </Box>\n\n        <FormControlLabel\n          onChange={(event) =>\n            setControlledState((prev) => ({\n              ...prev,\n              zoomOnLogo: event.target.checked,\n            }))\n          }\n          control={<Checkbox checked={zoomOnLogo} />}\n          label={t(\"nutriscore.zoom_on_logo\")}\n          labelPlacement=\"end\"\n        />\n      </Stack>\n      <Stack\n        direction=\"row\"\n        justifyContent=\"start\"\n        alignItems=\"center\"\n        sx={{ px: 5, py: 1, textAlign: \"left\" }}\n      >\n        <Button onClick={selectAll} size=\"small\" sx={{ mr: 2 }}>\n          {t(\"nutriscore.select_all\")}\n        </Button>\n        <Button onClick={unselectAll} size=\"small\">\n          {t(\"nutriscore.deselect_all\")}\n        </Button>\n      </Stack>\n\n      <Divider sx={{ mb: 4 }} />\n      <div\n        style={{\n          display: \"grid\",\n          gridTemplateColumns: `repeat(auto-fill, minmax(${\n            imageSize + 10\n          }px, 1fr))`,\n          gridGap: 10,\n        }}\n        onKeyDown={handleKeyDown}\n      >\n        {buffer\n          .filter(\n            (question) =>\n              question.insight_id && question.insight_id !== \"NO_QUESTION_LEFT\"\n          )\n          .map((question) => (\n            <LogoQuesitonCard\n              key={question.insight_id}\n              question={question}\n              toggleSelection={toggleSelection}\n              checked={selectedIds.includes(question.insight_id)}\n              imageSize={imageSize}\n              zoomOnLogo={zoomOnLogo}\n            />\n          ))}\n      </div>\n\n      {remainingQuestionNb === 0 && <NoMoreLogos {...filterState} />}\n\n      <Paper\n        sx={{\n          paddingX: 2,\n          paddingY: 1,\n          position: \"sticky\",\n          bottom: 0,\n          marginTop: 2,\n        }}\n      >\n        <Stack direction=\"row\" justifyContent=\"end\">\n          <Button\n            size=\"large\"\n            variant=\"contained\"\n            color=\"error\"\n            onClick={() => {\n              selectedIds.forEach((insight_id) =>\n                answerQuestion({\n                  value: 0,\n                  insight_id,\n                })\n              );\n              setSelectedIds([]);\n            }}\n            fullWidth\n          >\n            {t(\"nutriscore.incorrect\")}\n          </Button>\n          <Button\n            sx={{ ml: 3 }}\n            size=\"large\"\n            variant=\"contained\"\n            color=\"success\"\n            onClick={() => {\n              selectedIds.forEach((insight_id) =>\n                answerQuestion({\n                  value: 1,\n                  insight_id,\n                })\n              );\n              setSelectedIds([]);\n            }}\n            fullWidth\n          >\n            {t(\"nutriscore.correct\", {\n              label: selectedOption.label,\n            })}\n          </Button>\n        </Stack>\n      </Paper>\n    </Box>\n  );\n}\n\nexport default function WrappedLogoQuestionValidator() {\n  return (\n    <React.Suspense fallback={<CircularProgress />}>\n      <Provider store={store}>\n        <LogoQuestionValidator />\n      </Provider>\n    </React.Suspense>\n  );\n}\n","import {\n  createSlice,\n  createAsyncThunk,\n  configureStore,\n  createSelector,\n} from \"@reduxjs/toolkit\";\n\nimport { IS_DEVELOPMENT_MODE } from \"../../const\";\nimport robotoff from \"../../robotoff\";\n\nimport { sleep } from \"../../utils\";\n\nconst PAGE_SIZE = 25;\n\nexport const fetchQuestions = createAsyncThunk(\n  \"fetchQuestions\",\n  async (_, thunkApi) => {\n    const state = thunkApi.getState();\n    const { data } = await robotoff.questions(\n      state.questionBuffer.filterState,\n      PAGE_SIZE,\n      state.questionBuffer.page\n    );\n    return { page: state.questionBuffer.page, pages_size: PAGE_SIZE, ...data };\n  }\n);\n\nexport const answerQuestion = createAsyncThunk(\n  \"answerQuestion\",\n  async ({ insight_id, value }) => {\n    if (IS_DEVELOPMENT_MODE) {\n      return await sleep(500);\n    }\n    return await robotoff.annotate(insight_id, value);\n  }\n);\n\nexport const questionBuffer = createSlice({\n  name: \"questions\",\n  initialState: {\n    page: 1,\n    questions: {},\n    remainingQuestions: [],\n    answeredQuestions: [],\n    fetchCompletted: false,\n    numberOfQuestionsAvailable: 0,\n    filterState: {\n      insightType: \"brand\",\n      brandFilter: \"\",\n      countryFilter: \"\",\n      sortByPopularity: false,\n      valueTag: \"\",\n      predictor: \"\",\n    },\n  },\n  reducers: {\n    updateFilter: (state, action) => {\n      if (\n        Object.keys(action.payload).every(\n          (key) => state.filterState[key] === action.payload[key]\n        )\n      ) {\n        // Early return if new state is similar to the current one\n        return;\n      }\n      // Update filter and reset fetched data\n      state.filterState = { ...state.filterState, ...action.payload };\n      state.page = 1;\n      state.remainingQuestions = [];\n      state.fetchCompletted = false;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchQuestions.fulfilled, (state, { payload }) => {\n        const { questions, count, page, pages_size } = payload;\n\n        const newQuestions = questions.filter(\n          (question) => state.questions[question.insight_id] === undefined\n        );\n\n        const questionsToAdd = newQuestions.filter(\n          (question) => question.source_image_url\n        );\n\n        const newQuestionsObject = {};\n        questionsToAdd.forEach((q) => {\n          newQuestionsObject[q.insight_id] = q;\n        });\n\n        const questionsFromNextPage = Math.max(0, count - page * pages_size); // The number of questions starting from page+1\n\n        const numberOfQuestionsAvailable =\n          questionsFromNextPage + //Questions from unseen pages\n          state.remainingQuestions.length + //Questions from previouse pages\n          questionsToAdd.length; // QUestions added with this fetch\n\n        const newPage =\n          questionsFromNextPage > 0 && questionsToAdd.length === 0\n            ? state.page + 1\n            : state.page;\n\n        return {\n          ...state,\n          page: newPage,\n          remainingQuestions: [\n            ...state.remainingQuestions,\n            ...questionsToAdd.map((question) => question.insight_id),\n          ],\n          questions: { ...state.questions, ...newQuestionsObject },\n          fetchCompletted: count < state.page * PAGE_SIZE,\n          numberOfQuestionsAvailable,\n        };\n      })\n      .addCase(answerQuestion.pending, (state, action) => {\n        const { insight_id, value } = action.meta.arg;\n\n        return {\n          ...state,\n          remainingQuestions: state.remainingQuestions.filter(\n            (question_id) => question_id !== insight_id\n          ),\n          answeredQuestions: [...state.answeredQuestions, insight_id],\n          numberOfQuestionsAvailable: state.numberOfQuestionsAvailable - 1,\n          questions: {\n            ...state.questions,\n            [insight_id]: {\n              ...state.questions[insight_id],\n              validationValue: value,\n              status: \"pending\",\n            },\n          },\n        };\n      })\n      .addCase(answerQuestion.fulfilled, (state, action) => {\n        const { insight_id } = action.meta.arg;\n        return {\n          ...state,\n          questions: {\n            ...state.questions,\n            [insight_id]: {\n              ...state.questions[insight_id],\n              status: \"validated\",\n            },\n          },\n        };\n      })\n      .addCase(answerQuestion.rejected, (state, action) => {\n        const { insight_id } = action.meta.arg;\n        return {\n          ...state,\n          questions: {\n            ...state.questions,\n            [insight_id]: {\n              ...state.questions[insight_id],\n              status: \"failled\",\n            },\n          },\n        };\n      });\n  },\n});\n\nexport const { updateFilter } = questionBuffer.actions;\nexport default configureStore({\n  reducer: {\n    questionBuffer: questionBuffer.reducer,\n  },\n});\n\nconst getSubState = (state) => state.questionBuffer;\n\nexport const nbOfQuestionsInBufferSelector = createSelector(\n  getSubState,\n  (bufferState) => bufferState.remainingQuestions.length\n);\n\nexport const nextPageSelector = createSelector(\n  getSubState,\n  (bufferState) => bufferState.remainingQuestions.length\n);\n\nexport const currentQuestionSelector = createSelector(\n  getSubState,\n  (bufferState) =>\n    bufferState.questions[bufferState.remainingQuestions[0]] ?? null\n);\n\nexport const questionsToAnswerSelector = createSelector(\n  getSubState,\n  (bufferState) =>\n    bufferState.remainingQuestions.map(\n      (insight_id) => bufferState.questions[insight_id]\n    )\n);\n\nexport const filterStateSelector = createSelector(\n  getSubState,\n  (bufferState) => bufferState.filterState\n);\n\nexport const answeredQuestionsSelector = createSelector(\n  getSubState,\n  (bufferState) =>\n    bufferState.answeredQuestions.map(\n      (insight_id) => bufferState.questions[insight_id]\n    )\n);\n\nexport const nextImagesSelector = createSelector(getSubState, (bufferState) =>\n  bufferState.remainingQuestions\n    .slice(1, 5)\n    .map((insight_id) => bufferState.questions[insight_id]?.source_image_url)\n    .filter((image_url) => !!image_url)\n);\n\nexport const isLoadingSelector = createSelector(\n  getSubState,\n  (bufferState) => !bufferState.fetchCompletted\n);\n\nexport const numberOfQuestionsAvailableSelector = createSelector(\n  getSubState,\n  (bufferState) => bufferState.numberOfQuestionsAvailable\n);\n","import axios from \"axios\";\nimport { ROBOTOFF_API_URL, IS_DEVELOPMENT_MODE } from \"./const\";\nimport { getLang } from \"./localeStorageManager\";\nimport { reformatValueTag, removeEmptyKeys } from \"./utils\";\n\nexport interface QuestionInterface {\n  barcode: string;\n  insight_id: string;\n  insight_type: string;\n  question: string;\n  source_image_url?: string;\n  type: string;\n  value: string;\n  value_tag: string;\n}\n\ntype GetQuestionsResponse = { count: number; questions: QuestionInterface[] };\n\nconst robotoff = {\n  annotate(insightId: string, annotation) {\n    if (IS_DEVELOPMENT_MODE) {\n      console.log(\n        `Annotated, ${ROBOTOFF_API_URL}/insights/annotate`,\n        new URLSearchParams(\n          `insight_id=${insightId}&annotation=${annotation}&update=1`\n        ),\n        { withCredentials: true }\n      );\n    } else {\n      return axios.post(\n        `${ROBOTOFF_API_URL}/insights/annotate`,\n        new URLSearchParams(\n          `insight_id=${insightId}&annotation=${annotation}&update=1`\n        ),\n        { withCredentials: true }\n      );\n    }\n  },\n\n  questionsByProductCode(code: string) {\n    return axios\n      .get<GetQuestionsResponse>(`${ROBOTOFF_API_URL}/questions/${code}`)\n      .then((result) => {\n        let questions = result.data.questions;\n        result.data.questions = questions.filter(\n          (question) => question.source_image_url\n        );\n        return result;\n      });\n  },\n\n  questions(filterState, count = 10, page = 1) {\n    const {\n      insightType,\n      brandFilter,\n      valueTag,\n      countryFilter,\n      sortByPopularity,\n      campaign,\n      predictor,\n    } = filterState;\n\n    const searchParams = {\n      insight_types: insightType,\n      value_tag: valueTag,\n      brands: reformatValueTag(brandFilter),\n      country: countryFilter !== \"en:world\" ? countryFilter : null,\n      campaign,\n      predictor,\n    };\n\n    const lang = getLang();\n\n    return axios.get<GetQuestionsResponse>(\n      `${ROBOTOFF_API_URL}/questions/${\n        sortByPopularity ? \"popular\" : \"random\"\n      }`,\n      {\n        params: removeEmptyKeys({\n          ...searchParams,\n          lang,\n          count,\n          page,\n        }),\n      }\n    );\n  },\n\n  insightDetail(insight_id) {\n    return axios.get(`${ROBOTOFF_API_URL}/insights/detail/${insight_id}`);\n  },\n\n  loadLogo(logoId) {\n    return axios.get(`${ROBOTOFF_API_URL}/images/logos/${logoId}`);\n  },\n\n  updateLogo(logoId, value, type) {\n    return axios.put(\n      `${ROBOTOFF_API_URL}/images/logos/${logoId}`,\n      removeEmptyKeys({\n        value,\n        type,\n      }),\n      { withCredentials: true }\n    );\n  },\n\n  searchLogos(barcode, value, type, count = 25, random = false) {\n    const formattedValue = [\"label\", \"category\"].includes(type)\n      ? { taxonomy_value: value }\n      : { value };\n\n    return axios.get(`${ROBOTOFF_API_URL}/images/logos/search/`, {\n      params: removeEmptyKeys({\n        barcode,\n        type,\n        count,\n        random,\n        ...formattedValue,\n      }),\n    });\n  },\n\n  getLogoAnnotations(logoId, index, count = 25) {\n    const url =\n      logoId.length > 0\n        ? `${ROBOTOFF_API_URL}/ann/search/${logoId}`\n        : `${ROBOTOFF_API_URL}/ann/search`;\n    return axios.get(url, {\n      params: removeEmptyKeys({\n        index,\n        count,\n      }),\n    });\n  },\n\n  annotateLogos(annotations) {\n    return axios.post(\n      `${ROBOTOFF_API_URL}/images/logos/annotate`,\n      removeEmptyKeys({\n        annotations,\n      }),\n      { withCredentials: true }\n    );\n  },\n\n  getInsights(\n    barcode = \"\",\n    insightType = \"\",\n    valueTag = \"\",\n    annotation = \"\",\n    page = 1,\n    count = 25\n  ) {\n    let annotated;\n    if (annotation.length && annotation === \"not_annotated\") {\n      annotated = \"0\";\n      annotation = \"\";\n    }\n    return axios.get(`${ROBOTOFF_API_URL}/insights`, {\n      params: removeEmptyKeys({\n        barcode,\n        insight_types: insightType,\n        value_tag: valueTag,\n        annotation,\n        page,\n        annotated,\n        count,\n      }),\n    });\n  },\n\n  getUserStatistics(username) {\n    return axios.get(`${ROBOTOFF_API_URL}/users/statistics/${username}`);\n  },\n\n  getCroppedImageUrl(imageUrl, boundingBox) {\n    const [y_min, x_min, y_max, x_max] = boundingBox;\n    return `${ROBOTOFF_API_URL}/images/crop?image_url=${imageUrl}&y_min=${y_min}&x_min=${x_min}&y_max=${y_max}&x_max=${x_max}`;\n  },\n\n  getLogosImages(logoIds) {\n    return axios.get(\n      `${ROBOTOFF_API_URL}/images/logos?logo_ids=${logoIds.join(\",\")}`\n    );\n  },\n\n  getNutritionValueFromImage(language, imageOcrUrl, images) {\n    var ocrUrlSubString = imageOcrUrl.split(\"/\");\n\n    // setting a default value, assuming length of ocrUrlSubString is 7,\n    // and product code is 8 characters long\n    var productCodeForOcrUrl = ocrUrlSubString[5];\n\n    let nutritionKeyWithLangSuffix = `nutrition_${language}`;\n\n    for (var key in images) {\n      if (nutritionKeyWithLangSuffix === key) {\n        var imgid = images[nutritionKeyWithLangSuffix].imgid;\n      }\n    }\n\n    if (ocrUrlSubString.length > 7) {\n      // the productCode is 13 characters long\n      productCodeForOcrUrl =\n        ocrUrlSubString[5] +\n        \"/\" +\n        ocrUrlSubString[6] +\n        \"/\" +\n        ocrUrlSubString[7] +\n        \"/\" +\n        ocrUrlSubString[8];\n    }\n\n    return axios.get(\n      `${ROBOTOFF_API_URL}/predict/nutrient?ocr_url=https://images.openfoodfacts.org/images/products/${productCodeForOcrUrl}/${imgid}.json`\n    );\n  },\n\n  getUnansweredValues(params: {\n    type: \"label\" | \"brand\" | \"category\";\n    country;\n    campaign;\n    page?: number;\n    count?: number;\n  }) {\n    let page = params.page ?? 1;\n    page = page >= 1 ? page : 1;\n\n    return axios.get(\n      `${ROBOTOFF_API_URL}/questions/unanswered/?${Object.keys({\n        ...params,\n        page,\n      })\n        .filter((key) => params[key] !== undefined)\n        .map((key) => `${key}=${params[key]}`)\n        .join(\"&\")}`\n    );\n  },\n};\n\nexport default robotoff;\n","const reformatTagMapping = {\n  \" \": \"-\",\n  \"'\": \"-\",\n  \"&\": \"\",\n  à: \"a\",\n  â: \"a\",\n  ä: \"a\",\n  é: \"e\",\n  è: \"e\",\n  ê: \"e\",\n  ë: \"e\",\n  î: \"i\",\n  ï: \"i\",\n  ô: \"o\",\n  ö: \"o\",\n  û: \"u\",\n  ù: \"u\",\n  ü: \"u\",\n};\n\nexport const reformatValueTag = (value) => {\n  if (!value) {\n    return value;\n  }\n  let output = value.trim().toLowerCase();\n  for (const [search, replace] of Object.entries(reformatTagMapping)) {\n    output = output.replace(new RegExp(search, \"g\"), replace);\n  }\n  output = output.replace(/-{2,}/g, \"-\");\n  return output;\n};\n\nexport const removeEmptyKeys = (obj) => {\n  Object.keys(obj).forEach(\n    (key) => (obj[key] == null || obj[key] === \"\") && delete obj[key]\n  );\n  return obj;\n};\n\n//  Only for testing purpose\nexport function sleep(ms) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\n//to provide capitalised country name; en:france => France\nexport const capitaliseName = (string) => {\n  if (!string) {\n    return string;\n  }\n  let name = string.slice(3);\n  return name.charAt(0).toUpperCase() + name.slice(1);\n};\n"],"names":["getDefaultizedUrlParams","defaultParameters","synonyms","parameters","urlParams","URLSearchParams","window","location","search","Object","keys","forEach","key","value","get","JSON","stringify","parse","entries","valueKey","synonymKeys","synonymKey","convertObjectParamsToUrlParams","set","undefined","delete","toString","defaultParams","React","setParameters","useLocation","prevParams","newParams","some","updateParameters","modifier","newRelativePathQuery","pathname","history","pushState","setUrlParams","fetchData","insightId","robotoff","response","data","source_image","logo_id","bounding_box","logoData","logos","LogoQuesitonCard","props","t","useTranslation","question","toggleSelection","checked","imageSize","zoomOnLogo","croppedImageUrl","setCroppedImageUrl","isValidQuery","getImageUrl","insight_id","off","catch","source_image_url","sx","width","height","position","onClick","tabIndex","src","alt","loading","style","objectFit","bottom","right","readOnly","size","NoMoreLogos","insightType","valueTag","textAlign","py","m","variant","color","component","Link","href","target","ml","minWidth","LogoQuestionValidator","dispatch","useDispatch","useUrlParams","controlledState","setControlledState","useParams","Number","parseInt","selectedOption","LOGOS","updateFilter","type","sortByPopularity","predictor","selectedIds","setSelectedIds","lastClickedId","setLastClickedId","buffer","useSelector","questionsToAnswerSelector","numberOfQuestionsAvailable","numberOfQuestionsAvailableSelector","filterState","filterStateSelector","answerQuestion","answerQuestionAction","remainingQuestionNb","nbOfQuestionsInBufferSelector","fetchQuestions","event","shiftKey","prev","selectRange","includes","isInRange","rangeIds","map","filter","x","id","padding","label","tag","direction","justifyContent","alignItems","pt","px","pb","mx","remaining","logo","maxHeight","maxWidth","gutterBottom","onChangeCommitted","newValue","valueLabelDisplay","step","marks","min","max","onChange","control","labelPlacement","mr","mb","display","gridTemplateColumns","gridGap","onKeyDown","lastClickedIndexInBuffer","findIndex","indexToAdd","length","idsToAdd","paddingX","paddingY","marginTop","fullWidth","WrappedLogoQuestionValidator","fallback","store","createAsyncThunk","_","thunkApi","state","getState","questionBuffer","page","pages_size","IS_DEVELOPMENT_MODE","sleep","createSlice","name","initialState","questions","remainingQuestions","answeredQuestions","fetchCompletted","brandFilter","countryFilter","reducers","action","payload","every","extraReducers","builder","addCase","fulfilled","count","questionsToAdd","newQuestionsObject","q","questionsFromNextPage","Math","newPage","pending","meta","arg","question_id","validationValue","status","rejected","actions","configureStore","reducer","getSubState","createSelector","bufferState","nextPageSelector","currentQuestionSelector","answeredQuestionsSelector","nextImagesSelector","slice","image_url","isLoadingSelector","annotate","annotation","axios","ROBOTOFF_API_URL","withCredentials","console","log","questionsByProductCode","code","then","result","campaign","searchParams","insight_types","value_tag","brands","reformatValueTag","country","lang","getLang","params","removeEmptyKeys","insightDetail","loadLogo","logoId","updateLogo","searchLogos","barcode","random","formattedValue","taxonomy_value","getLogoAnnotations","index","url","annotateLogos","annotations","getInsights","annotated","getUserStatistics","username","getCroppedImageUrl","imageUrl","boundingBox","y_min","x_min","y_max","x_max","getLogosImages","logoIds","join","getNutritionValueFromImage","language","imageOcrUrl","images","ocrUrlSubString","split","productCodeForOcrUrl","nutritionKeyWithLangSuffix","imgid","getUnansweredValues","reformatTagMapping","à","â","ä","é","è","ê","ë","î","ï","ô","ö","û","ù","ü","output","trim","toLowerCase","replace","RegExp","obj","ms","Promise","resolve","setTimeout","capitaliseName","string","charAt","toUpperCase"],"sourceRoot":""}