{"version":3,"file":"static/js/5.5fa67bab.chunk.js","mappings":"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","sources":["pages/logosValidator/DashboardCard.tsx","pages/logosValidator/DashBoard.tsx"],"sourcesContent":["import * as React from \"react\";\n\nimport Card from \"@mui/material/Card\";\nimport CardMedia from \"@mui/material/CardMedia\";\nimport Badge from \"@mui/material/Badge\";\nimport CardContent from \"@mui/material/CardContent\";\nimport Typography from \"@mui/material/Typography\";\nimport CardActions from \"@mui/material/CardActions\";\nimport Button from \"@mui/material/Button\";\nimport Link from \"@mui/material/Link\";\n\nimport robotoff from \"../../robotoff\";\nimport { getQuestionSearchParams } from \"../../components/QuestionFilter\";\nimport { LogoDefinition } from \"./dashboardDefinition\";\n\nconst DashboardCard = (props: LogoDefinition) => {\n  const { tag, label, logo, message, link, type } = props;\n\n  const questionsUrl = `/questions?${getQuestionSearchParams({\n    // insightType: \"label\",\n    insightType: type,\n    valueTag: tag,\n  })}`;\n  const logoQuestionsUrl = `/logoQuestion/${tag}`;\n  // const logoAnnotationUrl = `/logos/deep-search?type=label&value=${tag}`;\n  const logoAnnotationUrl = `/logos/deep-search?type=${type}&value=${tag}`;\n\n  const [questionNumber, setQuestionNumber] = React.useState<\"?\" | number>(\"?\");\n\n  React.useEffect(() => {\n    let isValid = true;\n    robotoff\n      .questions(\n        {\n          insightType: \"label\",\n          valueTag: tag,\n        },\n        1,\n        1\n      )\n      .then(({ data }) => {\n        if (isValid) {\n          setQuestionNumber(data?.count ?? 0);\n        }\n      });\n    return () => {\n      isValid = false;\n    };\n  }, [tag]);\n\n  return (\n    <div style={{ minWidth: 200, maxWidth: 350 }}>\n      <Badge\n        sx={{\n          width: \"100%\",\n          height: \"100%\",\n          \"& .MuiBadge-badge\": {\n            fontSize: \"1.5rem\",\n            minWidth: \"2rem\",\n            minHeight: \"2rem\",\n          },\n        }}\n        badgeContent={questionNumber}\n        showZero\n        color={\n          questionNumber === \"?\"\n            ? \"info\"\n            : questionNumber > 0\n            ? \"error\"\n            : \"success\"\n        }\n      >\n        <Card\n          sx={{\n            width: \"100%\",\n            height: \"100%\",\n            display: \"flex\",\n            flexDirection: \"column\",\n          }}\n        >\n          <CardMedia\n            component=\"img\"\n            height=\"150\"\n            image={logo}\n            alt=\"\"\n            sx={{ objectFit: \"contain\" }}\n          />\n          <CardContent sx={{ flexGrow: 1 }}>\n            <Typography gutterBottom variant=\"h5\" component=\"div\">\n              {label}\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              {message} {link && <Link href={link}>More info</Link>}\n            </Typography>\n          </CardContent>\n          <CardActions>\n            <Button\n              variant=\"outlined\"\n              size=\"small\"\n              component={Link}\n              href={questionsUrl}\n            >\n              Questions\n            </Button>\n\n            <Button\n              variant=\"outlined\"\n              size=\"small\"\n              component={Link}\n              href={logoQuestionsUrl}\n            >\n              ANnotation\n            </Button>\n\n            <Button\n              variant=\"outlined\"\n              size=\"small\"\n              component={Link}\n              href={logoAnnotationUrl}\n            >\n              Search\n            </Button>\n          </CardActions>\n        </Card>\n      </Badge>\n    </div>\n  );\n};\n\nexport default DashboardCard;\n","import * as React from \"react\";\nimport Tabs from \"@mui/material/Tabs\";\nimport Tab from \"@mui/material/Tab\";\nimport Typography from \"@mui/material/Typography\";\nimport Box from \"@mui/material/Box\";\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\nimport { useTheme } from \"@mui/material/styles\";\n\nimport { LOGOS, DASHBOARD } from \"./dashboardDefinition\";\nimport DashboardCard from \"./DashboardCard\";\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  // Keep logos mounted to avoid loading again the number of remaining questions\n  const [hasBeenVisible, setHasBeenVisible] = React.useState(value === index);\n  if (value === index && !hasBeenVisible) {\n    setHasBeenVisible(true);\n  }\n\n  return (\n    <Box\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`vertical-tabpanel-${index}`}\n      aria-labelledby={`vertical-tab-${index}`}\n      sx={{ flexGrow: 1 }}\n      {...other}\n    >\n      {hasBeenVisible && (\n        <Box\n          sx={{\n            p: 3,\n          }}\n        >\n          <Typography>{DASHBOARD[index].title}</Typography>\n          <Box\n            sx={{\n              display: \"grid\",\n              gridTemplateColumns: \"repeat(auto-fill, 350px)\",\n              gap: \"30px\",\n            }}\n          >\n            {DASHBOARD[index].logos.map((tag) => (\n              <DashboardCard key={tag} {...LOGOS[tag]} />\n            ))}\n          </Box>\n        </Box>\n      )}\n    </Box>\n  );\n}\n\nfunction a11yProps(index: number) {\n  return {\n    id: `vertical-tab-${index}`,\n    \"aria-controls\": `vertical-tabpanel-${index}`,\n  };\n}\n\nexport default function VerticalTabs() {\n  const theme = useTheme();\n  const isDesktop = useMediaQuery(theme.breakpoints.up(\"md\"));\n\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event: React.SyntheticEvent, newValue: number) => {\n    setValue(newValue);\n  };\n\n  return (\n    <React.Suspense>\n      <Box\n        sx={{\n          flexGrow: 1,\n          bgcolor: \"background.paper\",\n          display: \"flex\",\n          flexDirection: isDesktop ? \"row\" : \"column\",\n          height: isDesktop ? \"calc( 100vh - 100px)\" : undefined,\n          width: isDesktop ? undefined : \"100vw\",\n        }}\n      >\n        <Tabs\n          orientation={isDesktop ? \"vertical\" : \"horizontal\"}\n          variant=\"scrollable\"\n          value={value}\n          onChange={handleChange}\n          aria-label=\"Logo categories\"\n          sx={{\n            ...(isDesktop ? { borderRight: 1 } : { borderBottom: 1 }),\n            borderColor: \"divider\",\n          }}\n        >\n          {DASHBOARD.map(({ tag, title }, index) => (\n            <Tab label={title} key={index} {...a11yProps(index)} />\n          ))}\n        </Tabs>\n        {DASHBOARD.map(({ tag, title }, index) => (\n          <TabPanel value={value} key={index} index={index} />\n        ))}\n      </Box>\n    </React.Suspense>\n  );\n}\n"],"names":["props","tag","label","logo","message","link","type","questionsUrl","getQuestionSearchParams","insightType","valueTag","logoQuestionsUrl","logoAnnotationUrl","React","questionNumber","setQuestionNumber","isValid","robotoff","then","data","count","style","minWidth","maxWidth","Badge","sx","width","height","fontSize","minHeight","badgeContent","showZero","color","Card","display","flexDirection","CardMedia","component","image","alt","objectFit","CardContent","flexGrow","Typography","gutterBottom","variant","Link","href","CardActions","Button","size","TabPanel","children","value","index","other","hasBeenVisible","setHasBeenVisible","Box","role","hidden","id","p","DASHBOARD","title","gridTemplateColumns","gap","logos","map","LOGOS","VerticalTabs","theme","useTheme","isDesktop","useMediaQuery","breakpoints","up","setValue","bgcolor","undefined","Tabs","orientation","onChange","event","newValue","borderRight","borderBottom","borderColor","Tab","a11yProps"],"sourceRoot":""}